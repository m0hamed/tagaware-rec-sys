<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12060081.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:20000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// Let's define unordered map</comment>
<cpp:ifdef># <cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>__cplusplus</name> <operator>&gt;</operator> <literal type="number">199711L</literal></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;tr1/unordered_map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name><name>std</name><operator>::</operator><name>tr1</name></name>;</namespace></using>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VA_NUM_ARGS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VA_NUM_ARGS_IMPL_((0,__VA_ARGS__, 5,4,3,2,1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VA_NUM_ARGS_IMPL_</name><parameter_list>(<parameter><type><name>tuple</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>VA_NUM_ARGS_IMPL tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VA_NUM_ARGS_IMPL</name><parameter_list>(<parameter><type><name>_0</name></type></parameter>,<parameter><type><name>_1</name></type></parameter>,<parameter><type><name>_2</name></type></parameter>,<parameter><type><name>_3</name></type></parameter>,<parameter><type><name>_4</name></type></parameter>,<parameter><type><name>_5</name></type></parameter>,<parameter><type><name>N</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>macro_dispatcher</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro_dispatcher_(macro, VA_NUM_ARGS(__VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>macro_dispatcher_</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro_dispatcher__(macro, nargs)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>macro_dispatcher__</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro_dispatcher___(macro, nargs)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>macro_dispatcher___</name><parameter_list>(<parameter><type><name>macro</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro ## nargs</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>std::cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>std::cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;", "&lt;&lt;#b&lt;&lt;"="&lt;&lt;(b)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>std::cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;", "&lt;&lt;#b&lt;&lt;"="&lt;&lt;(b)&lt;&lt;", "&lt;&lt;#c&lt;&lt;"="&lt;&lt;(c)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>std::cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;", "&lt;&lt;#b&lt;&lt;"="&lt;&lt;(b)&lt;&lt;", "&lt;&lt;#c&lt;&lt;"="&lt;&lt;(c)&lt;&lt;", "&lt;&lt;#d&lt;&lt;"="&lt;&lt;(d)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>std::cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;", "&lt;&lt;#b&lt;&lt;"="&lt;&lt;(b)&lt;&lt;", "&lt;&lt;#c&lt;&lt;"="&lt;&lt;(c)&lt;&lt;", "&lt;&lt;#d&lt;&lt;"="&lt;&lt;(d)&lt;&lt;", "&lt;&lt;#e&lt;&lt;"="&lt;&lt;(e)&lt;&lt;"\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::cerr&lt;&lt;#x&lt;&lt;"="&lt;&lt;(x)&lt;&lt;"  "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DEB(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBN</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>macro_dispatcher(DBN, __VA_ARGS__)(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;"=["; printarray(a,n); cout&lt;&lt;"]\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;"["&lt;&lt;s&lt;&lt;"-"&lt;&lt;n-1&lt;&lt;"]=["; printarray(a,n,s); cout&lt;&lt;"]\n"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>double</name></type> <name>__begin</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DTIME</name><parameter_list>(<parameter><type><name>ccc</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__begin = clock(); ccc; std::cerr&lt;&lt;"Time of work = "&lt;&lt;(clock()-__begin)/CLOCKS_PER_SEC&lt;&lt;std::endl;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>,<parameter><type><name>typename</name></type> <name>T3</name></parameter>&gt;</parameter_list></template>
struct <name>triple</name><block>{<public type="default"><decl_stmt><decl><type><name>T1</name></type> <name>a</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T2</name></type> <name>b</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T3</name></type> <name>c</name></decl>;</decl_stmt><constructor><name>triple</name><parameter_list>()</parameter_list><block>{}</block></constructor><empty_stmt>;</empty_stmt><constructor><name>triple</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>_a</name></decl></parameter>,<parameter><decl><type><name>T2</name></type> <name>_b</name></decl></parameter>, <parameter><decl><type><name>T3</name></type> <name>_c</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>a</name><argument_list>(<argument><expr><name>_a</name></expr></argument>)</argument_list></call>,<call><name>b</name><argument_list>(<argument><expr><name>_b</name></expr></argument>)</argument_list></call>,<call><name>c</name><argument_list>(<argument><expr><name>_c</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor></public>}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tri</name></cpp:macro> <cpp:value>triple&lt;int,int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trl</name></cpp:macro> <cpp:value>triple&lt;ll,ll,ll&gt;</cpp:value></cpp:define>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>,<parameter><type><name>typename</name></type> <name>T3</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>,<argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t1</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>,<argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t2</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><name><name>t1</name><operator>.</operator><name>a</name></name><operator>!=</operator><name><name>t2</name><operator>.</operator><name>a</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>a</name></name><operator>&lt;</operator><name><name>t2</name><operator>.</operator><name>a</name></name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><name><name>t1</name><operator>.</operator><name>b</name></name><operator>&lt;</operator><name><name>t2</name><operator>.</operator><name>b</name></name></expr>;</return></block></else></if>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>, <parameter><type><name>typename</name></type> <name>T3</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>triple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>a</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>b</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>c</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return> }</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FJ</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j=0;j&lt;n;j++)</cpp:value></cpp:define>

<comment type="line">//STL containers</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>for( auto v = (c).begin();  v != (c).end(); ++v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>                      <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                     <cpp:value>((b).find(a) != (b).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>(find(all(b),a) != (b).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>                       <cpp:value>((int)(a.size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svi</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FI(n) S(vec[y])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>svl</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FI(n) Sl(vec[y])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro> <cpp:value>::iterator</cpp:value></cpp:define>

<comment type="line">//int some_primes[10] = {100271, 500179, 1000003, 2000227, 5000321}</comment>
<comment type="line">//fill char arrays</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                    <cpp:value>memset(a, v, sizeof (a))</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>bits_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>v</name><operator>=</operator><name>v</name><operator>-</operator><operator>(</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>v</name><operator>=</operator><operator>(</operator><name>v</name><operator>&amp;</operator><literal type="number">0x33333333</literal><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt><return>return<expr><operator>(</operator><operator>(</operator><name>v</name><operator>+</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xF0F0F0F</literal><operator>)</operator><operator>*</operator><literal type="number">0x1010101</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">24</literal></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>bits_count</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>v</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt> <return>return <expr><call><name>bits_count</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bits_count</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>unsigned</name> <name>int</name></type> <name>reverse_bits</name><parameter_list>(<parameter><decl><type><specifier>register</specifier> <name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xaaaaaaaa</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xcccccccc</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xf0f0f0f0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0xff00ff00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt><return>return<expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>-</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>ispow2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkbit</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>( (n &gt;&gt; b) &amp; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>ind</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(lower_bound(all(arr),ind)-arr.begin())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sor</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>sort(all(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rsor</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(all(a)); reverse(all(a));</cpp:value></cpp:define>

<comment type="line">//STL output ********************************</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>first</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>first</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>}</block></for><return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>first</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name><typename>typename</typename> <name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></name></type> <name>ii</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>ii</name><operator>!=</operator><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><operator>*</operator><name>ii</name></expr>;</expr_stmt><expr_stmt><expr><name>first</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>}</block></for><return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type><name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt><for>for <control>(<init><decl><type><name><typename>typename</typename> <name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>const_iterator</name></name></type> <name>ii</name> <init>=<expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>ii</name><operator>!=</operator><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><operator>*</operator><name>ii</name></expr>;</expr_stmt><expr_stmt><expr><name>first</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>}</block></for><return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>printarray</name><parameter_list>(<parameter><decl><type><name>T</name></type>  <name><name>a</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>T2</name></type> <name>sz</name></decl></parameter>,<parameter><decl><type><name>T2</name></type> <name>beg</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>T2</name></type> <name>i</name><init>=<expr><name>beg</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREIN</name><parameter_list>(<parameter><type><name>FILE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(FILE,"rt",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREOUT</name><parameter_list>(<parameter><type><name>FILE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(FILE,"wt",stdout)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqrt</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sqrt(1.0*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pow(1.0*(x),n)</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>*=</operator><name>x</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>_mod</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>_mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>_mod</name></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>t</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>t</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>t</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><name>t</name></expr>;</expr_stmt>}</block></while><return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name>b</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><name>b</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>lcm</name><argument_list>(<argument><expr><call><name>lcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>lcm</name><argument_list>(<argument><expr><call><name>lcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&gt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&gt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>double</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&gt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>double</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>double</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>double</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>getar</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for></block></for> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>getar</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>getar</name><parameter_list>(<parameter><decl><type><name>pii</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>ii</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>getar</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>cinarr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>}</block></function>
<comment type="line">// Useful constants</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>			<cpp:value>1011111111</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro>			<cpp:value>(double)1e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>			<cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>			<cpp:value>3.14159265358979</cpp:value></cpp:define>
<comment type="line">//*******************************************************************************/</comment>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>v</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>beg</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>w</name> <operator>=</operator> <ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><name><name>v</name><index>[<expr><literal type="number">25</literal> <operator>-</operator> <name>j</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>start</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>w</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>w</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>w</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>w</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>beg</name><operator>++</operator></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></while>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <range>: <expr><name><name>v</name><index>[<expr><name>p</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <name>p</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
