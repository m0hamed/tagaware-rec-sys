<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12515397.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">510</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>d</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>maxn</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></for>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>d</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<continue>continue;</continue>
			}</block></then></if>

			<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>it</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>x</name> <operator>+</operator> <name>dx</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><name>y</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>dx</name></expr></init></decl>;</decl_stmt>

					<if>if <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>it</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>it</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>it</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <name>x</name></expr>]</index><index>[<expr><name>it</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name> <operator>%=</operator> <name>p</name></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index><index>[<expr><name>it</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></then></if>
				}</block></for>
			}</block></else></if>
		}</block></for>

		<expr_stmt><expr><name>it</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>it</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
