<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12562324.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>PP</name>;</typedef>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>segSet</name></decl>,<decl><type ref="prev"/><name>tmpSet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>GameCheated</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

<function><type><name>PP</name></type> <name>segFind</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>auto</name></type> <name>rit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>lit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>tmp</name> <init>= <expr><name>lit</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>rit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>rit</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lit</name> <operator>=</operator> <operator>--</operator><name>tmp</name></expr>;</expr_stmt>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>lit</name></expr> </then><else>: <expr><name>rit</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tmp</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;=</operator> <name><name>val</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;=</operator> <name><name>val</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>tmp</name></expr>;</return></block></then></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>fun</name><parameter_list>(<parameter><decl><type><name>PP</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<comment type="line">//å­å¨æçº¿æ®µ[l,r]åé£çº¿æ®µ[x.first,x.second]</comment>
	<decl_stmt><decl><type><name>LL</name></type> <name><name>be</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ed</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>be</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr><operator>,</operator><expr><name><name>ed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>be</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator><expr><name><name>ed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>be</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>ed</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>be</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ed</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name><name>tmpSet</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>lit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>rit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition><expr><name>lit</name> <operator>!=</operator> <name>rit</name></expr>;</condition><incr><expr><operator>++</operator><name>lit</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>(</operator><name><name>lit</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>x</name> <operator>||</operator> <name><name>lit</name><operator>-&gt;</operator><name>first</name></name> <operator>==</operator> <name>y</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>flag</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>lit</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>flag</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>tmpSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>*</operator><name>lit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><call><name><name>tmpSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>GameCheated</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>tmpSet</name></expr></argument>,<argument><expr><name>segSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>auto</name></type> <name>lit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>rit</name> <init>= <expr><call><name><name>segSet</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>lit</name> <operator>!=</operator> <name>rit</name></expr>)</condition><block>{
		<comment type="block">/* æ³¨æè¿éçå é¤åå¹³æ¶çæ°ç»å é¤æ¯ä¸ä¸æ ·ç */</comment>
		<expr_stmt><expr><name>lit</name> <operator>=</operator> <call><name><name>segSet</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>lit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type>	<name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>tl</name></decl>,<decl><type ref="prev"/><name>tr</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>L</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>ans</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>GameCheated</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>tl</name> <operator>=</operator> <name>L</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tr</name> <operator>=</operator> <name>tl</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>x</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<comment type="line">//å°çº¿æ®µ[x,y]åæ[x,x],[y,y]ï¼ç¶åæå¥å°éåä¸­ï¼æ¹ä¾¿åé¢çæä½</comment>
		<decl_stmt><decl><type><name>auto</name></type> <name>lit</name> <init>= <expr><call><name>segFind</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name><name>flag</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>tl</name> <operator>!=</operator> <name>tr</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>lit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><name>tl</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>lit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>fun</name><argument_list>(<argument><expr><name>lit</name></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>		<comment type="line">//å­å¨æçº¿æ®µ[l,r]åé£çº¿æ®µ[tl,tl]</comment>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>					<comment type="line">//ä¸å­å¨çº¿æ®µ[l,r]åå«çº¿æ®µ[tl,tl]</comment>

			<decl_stmt><decl><type><name>auto</name></type> <name>rit</name> <init>= <expr><call><name>segFind</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tr</name></expr></argument>,<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>					<comment type="line">//æ³¨æä¸ºä»ä¹è¦æ¾å¨è¿éï¼å ä¸ºä¸é¢litçæä½ä¼å½±åritçæä½</comment>

			<if>if<condition>(<expr><name>rit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><name>tr</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>rit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>fun</name><argument_list>(<argument><expr><name>rit</name></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tr</name></expr></argument>,<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>		<comment type="line">//å­å¨æçº¿æ®µ[l,r]åé£çº¿æ®µ[tr,tr]</comment>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tr</name></expr></argument>,<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>					<comment type="line">//ä¸å­å¨çº¿æ®µ[l,r]åå«çº¿æ®µ[tr,tr]</comment>
		}</block></then><else>else<block>{
			<if>if<condition>(<expr><name>lit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><name>tl</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>lit</name> <operator>!=</operator> <call><name><name>segSet</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>fun</name><argument_list>(<argument><expr><name>lit</name></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>segSet</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
		<if>if<condition>(<expr><name>ans</name></expr>)</condition><then><block>{
			<comment type="line">//[tl,tr]ä¸­å­å¨åºå£</comment>
			<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<comment type="line">//[tl,tr]ä¸­ä¸å­å¨åºå£</comment>
			<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name>tl</name></expr></argument>,<argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>GameCheated</name> <operator>||</operator> <call><name><name>segSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Game cheated!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then><elseif>else <if>if<condition>(<expr><call><name><name>segSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><call><name><name>segSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>==</operator> <call><name><name>segSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>segSet</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
