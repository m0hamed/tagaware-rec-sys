<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12516799.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>cell</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>nod</name></decl>,<decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name><init>=<expr><literal type="number">500005</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>len</name></decl>,<decl><type ref="prev"/><name><name>start</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>stop</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>niv</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>AIB</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>v</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>cell</name></expr></argument>&gt;</argument_list></name></type><name><name>Q</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>cell</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>sit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>nodes</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nivel</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>niv</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>nivel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>start</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>len</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>pit</name><init>=<expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>pit</name><operator>!=</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>pit</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><operator>*</operator><name>pit</name></expr></argument>,<argument><expr><name>nivel</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>stop</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>len</name></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>zeros</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>x</name><operator>^</operator><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>poz</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>poz</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><call><name>zeros</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>AIB</name><index>[<expr><name>i</name></expr>]</index></name><operator>^=</operator><name>val</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>poz</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>rez</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><name>poz</name></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>-=</operator><call><name>zeros</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>rez</name><operator>^=</operator><name><name>AIB</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>rez</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>aux</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cell</name></type> <name>k</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    <expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><operator>.</operator><name>nod</name></name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>k</name><operator>.</operator><name>in</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Q</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>nodes</name><index>[<expr><name><name>niv</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>NMAX</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <comment type="line">//sterg nodurile trecute</comment>
            <for>for <control>(<init><expr><name>it</name><operator>=</operator><name><name>nodes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>it</name><operator>!=</operator><name><name>nodes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name><name>start</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>c</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            <comment type="line">//bag</comment>
            <for>for <control>(<init><expr><name>it</name><operator>=</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>it</name><operator>!=</operator><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
                 <block type="pseudo"><expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name><name>start</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>c</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

            <comment type="line">//raspund</comment>
            <for>for <control>(<init><expr><name>sit</name><operator>=</operator><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>sit</name><operator>!=</operator><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>sit</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>aux</name><operator>=</operator><call><name>Query</name><argument_list>(<argument><expr><name><name>stop</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>sit</name><operator>)</operator><operator>.</operator><name>nod</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>^</operator><call><name>Query</name><argument_list>(<argument><expr><name><name>start</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>sit</name><operator>)</operator><operator>.</operator><name>nod</name></name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    <while>while <condition>(<expr><name>aux</name> <operator>&amp;&amp;</operator> <name>cnt</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition>
                        <block>{
                            <expr_stmt><expr><name>aux</name><operator>-=</operator><name>aux</name><operator>^</operator><operator>(</operator><name>aux</name><operator>&amp;</operator><operator>(</operator><name>aux</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                        }</block></while>
                    <if>if <condition>(<expr><name>cnt</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>sit</name><operator>)</operator><operator>.</operator><name>in</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
                }</block></for>
        }</block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
