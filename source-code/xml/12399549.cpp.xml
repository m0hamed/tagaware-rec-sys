<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12399549.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>word</name></decl> ,<decl><type ref="prev"/><name>word2</name></decl> ;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl> ;</decl_stmt>
	<if>if<condition>(<expr><name>len</name><operator>&amp;</operator><literal type="number">1</literal><operator>||</operator><name>len</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>len</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>temp</name></decl> ,<decl><type ref="prev"/><name>temp1</name></decl> ,<decl><type ref="prev"/><name>tmp</name></decl> ,<decl><type ref="prev"/><name>tmp1</name></decl> ;</decl_stmt>
	<expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> <operator>,</operator><expr><call><name><name>temp1</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> <operator>,</operator><expr><call><name><name>tmp</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> <operator>,</operator><expr><call><name><name>tmp1</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>check</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>||</operator><call><name>check</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>check</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>,<argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>word</name><operator>&gt;&gt;</operator><name>word2</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>word</name></expr></argument>,<argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
