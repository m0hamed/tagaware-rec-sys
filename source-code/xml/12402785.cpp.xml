<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12402785.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<function><type><name>void</name></type> <name>fre</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"c://test//input.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"c://test//output.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,y,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memcpy(x,y,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>o&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>o&lt;&lt;1|1</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>UL</name>;</typedef>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>gmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>gmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>Z</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxint</name><init>=<expr><literal type="number">2147483647</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms31</name><init>=<expr><literal type="number">522133279</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms63</name><init>=<expr><literal type="number">1061109567</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms127</name><init>=<expr><literal type="number">2139062143</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-8</literal></expr></init></decl>,<decl><type ref="prev"/><name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//.0</comment>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mop</name></decl>;</decl_stmt>
<struct>struct <name>A</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>,<decl><type ref="prev"/><name>O</name></decl>,<decl><type ref="prev"/><name>tim</name></decl>,<decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>ST</name></decl>,<decl><type ref="prev"/><name>ED</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>first</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>w</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt><comment type="line">//è¿éçè¾¹æ°ä¾ç¶æ¯è¦*2çï¼å ä¸ºæä»¬æä¸æ çæ å°å³ç³»</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>ff</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ww</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nn</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dfn</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>isbridge</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name>v</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>()</parameter_list><block>{}</block></constructor>
	<constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x_</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>v_</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x_</name></expr>;</expr_stmt><expr_stmt><expr><name>v</name><operator>=</operator><name>v_</name></expr>;</expr_stmt>}</block></constructor>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><specifier>const</specifier>
	<block>{
		<return>return <expr><name>v</name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>ins</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>z</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name><name>first</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>first</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ii</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ww</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nn</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name><name>ff</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ff</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>inq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>v</name><operator>&gt;=</operator><name><name>f</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>node</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dij</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ST</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>O</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>inq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ST</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if><expr_stmt><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><name><name>first</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>z</name></expr>;</condition><incr><expr><name>z</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>inq</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name><name>w</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></while>
}</block></function>
<function><type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lastz</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dfn</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>tim</name></expr>;</expr_stmt><comment type="line">//æ¶é´æ³èµå¼</comment>
	<expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//å¥æ </comment>
	<for>for<control>(<init><expr><name>z</name><operator>=</operator><name><name>ff</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</init><condition><expr><name>z</name></expr>;</condition><incr><expr><name>z</name><operator>=</operator><name><name>nn</name><index>[<expr><name>z</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>z</name><operator>^</operator><name>lastz</name><operator>)</operator><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><comment type="line">//ä¸è½èµ°åç¶è¾¹</comment>
	<block>{
		<expr_stmt><expr><name>y</name><operator>=</operator><name><name>ww</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><comment type="line">//tarjanæ²¡æå¤çè¿çç¹</comment>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>gmin</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><comment type="line">//æ´æ°å½åç¹çææ©æ¶é´æ³</comment>
	}</block></then></if></block></for>
	<if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><comment type="line">//è¿ä¸ªç¹æ¯ä¸ä¸ªåè¿éåéçæ ¹</comment>
	<block>{
		<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>y</name><operator>=</operator><name><name>s</name><index>[<expr><name>top</name><operator>--</operator></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>e</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><comment type="line">//ååºæ ä¸­çå½åèç¹</comment>
			<if>if<condition>(<expr><name>y</name><operator>==</operator><name>x</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if><comment type="line">//éæ</comment>
		}</block></while>
		<expr_stmt><expr><name><name>isbridge</name><index>[<expr><name>lastz</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><comment type="line">//åæ¶ä»ä¹åè¿éåéåè¿ä¸ªå­è¿éåçå°±æ¯æ¡¥</comment>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ST</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ED</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>first</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>id</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name><operator>=</operator><name>z</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ins</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>O</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>dij</name><argument_list>(<argument><expr><name>ST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>LL</name></type> <name>DIS</name><init>=<expr><name><name>f</name><index>[<expr><name>O</name></expr>]</index><index>[<expr><name>ED</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>O</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>dij</name><argument_list>(<argument><expr><name>ED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>ff</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>id</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>LL</name></type> <name>dis</name><init>=<expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>z</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>dis</name><operator>==</operator><name>DIS</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>ii</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ii</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>id</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if><comment type="line">//ç»èï¼ä¸ºäºå®ç°è¾¹çæ å°ï¼è¿éè¦+2</comment>
		}</block></for>
		<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>isbridge</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>dfn</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>MS</name><argument_list>(<argument><expr><name>low</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>ST</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>isbridge</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then><comment type="line">//å¿ç»ä¹è·¯</comment>
			<else>else
			<block>{
				<expr_stmt><expr><name>x</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>z</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>LL</name></type> <name>dis</name><init>=<expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>z</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>LL</name></type> <name>reduce</name><init>=<expr><name>dis</name><operator>-</operator><operator>(</operator><name>DIS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>z</name><operator>&gt;</operator><name>reduce</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name>reduce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
ãé¢æã
ænä¸ªåå¸ï¼åå¸ä¹é´ä»¥ååè¾¹è¿éï¼âå¾è®ºé¢ä¸å®è¦çè¾¹çæ¹åæ§âï¼ï¼è¾¹æä¸å®ä¸ºæ­£æ´æ°
æä»¬æ³ä»så°tï¼èä¸ä¸å®èµ°ä»så°tçæç­è·¯
æä»¬æ³ç¥é
å¯¹äºæ¯æ¡è·¯
ï¼1ï¼å®æ¯å¦å¿ç¶æ¯ä»så°tçå¿ç»ä¹è·¯ï¼å¦ææ¯åè¾åºYES
ï¼2ï¼è½å¦ä¿®æ¹å®çæå¼ï¼è¯å®æ¯å¾å°ä¿®æ¹å¦ï¼ï¼ä¿®æ¹åä¾ç¶ä¸ºæ­£æ´æ°ï¼ï¼ä½¿å¾è¿æ¡è·¯æä¸ºä»så°tçå¿ç»ä¹è·¯ï¼å¦æå¯ä»¥è¾åºCANåæå¼åå°é
ï¼3ï¼æ è®ºå¦ä½ï¼è¿æ¡è·¯é½ä¸å¯è½æ¯ä»så°tçå¿ç»ä¹è·¯ï¼åè¾åºNO

ãç±»åã
å¾è®º

dijstra+heapæç­è·¯
&amp;&amp;
tarjanå¤æ¡¥ç®æ³

ãåæã
é¦åè¯å®è¦æ±æç­è·¯äº
è¿æ ·æä»¬æ£æµä¸æ¡è¾¹æ¯å¦æ¯æç­è·¯çè¾¹
è¦çå®å°STåEDçè·ç¦»
é´äºåå¾æ¯ååå¾ï¼æä»¥æä»¬è¦å»ºç«ä¸ä¸ªåå¾
åå¾ä»STåæç­è·¯ï¼åå¾ä»EDåæç­è·¯ï¼å¯¹äºæ¯æç­è·¯ä¸çè¾¹ï¼éè¦å¤å®å®æ¯å¦æ¯å¿ç»ä¹è·¯
ä»ä¹æ¯å¿ç»ä¹è·¯å¢ï¼å°±æ¯å¦æææè¿æ¡è¾¹ï¼é£ä¹åå¾çè¿éæ§åå°ç ´åã
æ¡¥æ¯å»ºç«å¨æ åå¾çåºç¡ä¸
äºæ¯å¯¹äºè¿äºè¾¹ï¼æä»¬å»ºä¸ä¸ªæ åå¾ï¼è®©åè·tarjanï¼æ è®°æææ¯æ¡¥çè¾¹
ç¶åå°±ACå¦

ãæ¶é´å¤æåº¦&amp;&amp;ä¼åã

ãtrickã


ãæ°æ®ã
Sample test(s)
input
6 7 1 6
1 2 2
1 3 10
2 3 7
2 4 8
3 5 3
4 5 2
5 6 1
output
YES
CAN 2
CAN 1
CAN 1
CAN 1
CAN 1
YES

input
3 3 1 3
1 2 10
2 3 10
1 3 100
output
YES
YES
CAN 81

input
2 2 1 2
1 2 1
1 2 2
output
YES
NO

*/</comment></unit>
