<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12470910.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">4e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dfact</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>n</name></expr>?</condition><then><expr><operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><ternary><condition><expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>c</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>dfact</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><name><name>dfact</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dfact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>*</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>pow</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
	<expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>ll</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><operator>(</operator><call><name>c</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>ans</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>anss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><call><name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cnt</name><operator>=</operator><operator>(</operator><name>cnt</name><operator>*</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>anss</name><operator>=</operator><operator>(</operator><name>anss</name><operator>+</operator><name>cnt</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>anss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
