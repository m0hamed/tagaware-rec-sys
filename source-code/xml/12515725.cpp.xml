<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12515725.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//  Mafi, KUET 2K11</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d %d",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld %lld",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(v,val,sizeof v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERSE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reverse(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp1</name></cpp:macro> <cpp:value>pair&lt;int,pair&lt;int,int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp2</name></cpp:macro> <cpp:value>pair&lt;pair&lt;int,int&gt;,int &gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&lt;=b;i++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100006</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>modu</name></cpp:macro> <cpp:value>1000003</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a*b)/gcd(a,b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>freopen("input.txt","r",stdin);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>freopen("output.txt","w",stdout);</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">//int row[]={1,0,-1,0};int col[]={0,1,0,-1}; //4 Direction</comment>
<comment type="line">//int row[]={1,1,0,-1,-1,-1,0,1};int col[]={0,1,1,1,0,-1,-1,-1};//8 direction</comment>
<comment type="line">//int row[]={2,1,-1,-2,-2,-1,1,2};int col[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction</comment>

<function><type><name>ll</name></type> <name>leap</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>%</operator><literal type="number">4</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>x</name><operator>%</operator><literal type="number">100</literal><operator>!=</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><name>x</name><operator>%</operator><literal type="number">400</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><call><name>nCr</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>n</name><operator>/</operator><name>r</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>)</parameter_list><comment type="line">//N%M</comment>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><name>N</name><operator>/</operator><name>M</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>N</name><operator>-=</operator><name>temp</name><operator>*</operator><name>M</name></expr>;</expr_stmt>
    <return>return <expr><name>N</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>M</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>MOD</name></decl></parameter>)</parameter_list> <comment type="line">//(N^M)%MOD</comment>
<block>{
    <if>if<condition>(<expr><name>M</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name>M</name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>==</operator><name>M</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><name>M</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><operator>(</operator><name>ret</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ret</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
    }</block></then>
    <else>else <block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><name>N</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><call><name>bigmod</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>modinverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>  <comment type="line">//a*x=1(mod m)</comment>
<block>{
    <return>return <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct>struct <name>Euclid</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <constructor><name>Euclid</name><parameter_list>()</parameter_list> <block>{}</block></constructor><empty_stmt>;</empty_stmt>
    <constructor><name>Euclid</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>xx</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>yy</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>dd</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>xx</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>yy</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <name>dd</name></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block>;</struct>

<function><type><name>Euclid</name></type> <name>Extended_gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><comment type="line">// input a,b Output x,y,d;ax+by = d,d=gcd(a,b)</comment>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>Euclid</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>Euclid</name></type> <name>e</name> <init>= <expr><call><name>Extended_gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>Euclid</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>y</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>x</name></name><operator>-</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name><name>e</name><operator>.</operator><name>y</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>count_bit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>__builtin_popcountll(x)</cpp:value></cpp:define> <comment type="line">//number of 1 in binary of x; __builtin_popcount=int,__builtin_popcountl=long int,__builtin_popcountll=long long int</comment>
<function><type><name>ll</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>N</name><operator>|</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>N</name><operator>&amp;</operator><operator>~</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name>N</name><operator>&amp;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name><name>arr</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>arr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>t</argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>,<decl><type ref="prev"/><name>maxi</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><call><name>sc1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>maxi</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>maxi</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ind</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <expr_stmt><expr><name><name>arr</name><index>[<expr><name>ind</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>,<decl><type ref="prev"/><name>maxi</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>t</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{

        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>t</name></expr>]</index></name><operator>&gt;</operator><name>maxi</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>maxi</name> <operator>=</operator><name><name>arr</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ind</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ind</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
