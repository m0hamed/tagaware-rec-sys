<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12186008.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line" format="doxygen">//////////////////////////////////////////////////////////////////</comment>
<comment type="line" format="doxygen">////////////////// Sa1378 Platform Vesion 1.2.8 /////////////////</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////</comment>


<comment type="line">// Yesterday is history...</comment>
<comment type="line">// Tomorrow is a mystery...</comment>
<comment type="line">// But Today is a GIFT.</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sa1378</name></cpp:macro> <cpp:value>main()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chie</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(1100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST</name></cpp:macro> <cpp:value>setprecision</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IB</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>((ld)3.1415926535897932384626433832795028841971)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>((ll)1e9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>((ll)1e9+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH</name></cpp:macro> <cpp:value>((ll)1e16+7)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>sqr5</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>p_</name><init>=<expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>sqr5</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ld</name></type> <name>tavan</name><parameter_list>(<parameter><decl><type><name>ld</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><operator>(</operator><call><name>tavan</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ld</name></type> <name>fib</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><call><name>tavan</name><argument_list>(<argument><expr><name>p_</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>tavan</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>p_</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><name>sqr5</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>&lt;</operator> <name>b</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>a</name> <operator>%</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>%</operator><name>i</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
<comment type="line">//bool sortt(ll x,ll y){ return a[x] &lt; a[y]; }</comment>
<decl_stmt><decl><type><name>ifstream</name></type> <name>fin</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ofstream</name></type> <name>fout</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">200100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">200100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s1</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>s2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>		
	<expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>	
	<if>if<condition>(<expr><operator>(</operator><call><name>check</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>s1</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>check</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>s1</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>s2</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>				 
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>Sa1378</name>
<argument_list>{
    <argument><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr></argument>;
    if<argument><expr><operator>(</operator><call><name>check</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator>
    	<name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr></argument>;
    else
		<argument><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr></argument>;	
	return <argument><expr><literal type="number">0</literal></expr></argument>;
}</argument_list></decl></decl_stmt></unit>
