<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/11854092.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__STDC_FORMAT_MACROS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{   <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>min1</name></decl>,<decl><type ref="prev"/><name>min2</name></decl>,<decl><type ref="prev"/><name>min3</name></decl>,<decl><type ref="prev"/><name>max1</name></decl>,<decl><type ref="prev"/><name>max2</name></decl>,<decl><type ref="prev"/><name>max3</name></decl>,<decl><type ref="prev"/><name>first</name></decl>,<decl><type ref="prev"/><name>second</name></decl>,<decl><type ref="prev"/><name>third</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">"%"</literal><name>PRId64</name></expr></argument> ,<argument><expr><operator>&amp;</operator><name>min1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>max1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">"%"</literal><name>PRId64</name></expr></argument> ,<argument><expr><operator>&amp;</operator><name>min2</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>max2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">"%"</literal><name>PRId64</name></expr></argument> ,<argument><expr><operator>&amp;</operator><name>min3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>max3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>third</name><operator>=</operator><name>min3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>-</operator><name>min3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>second</name><operator>=</operator><name>min2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>-</operator><name>min2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>&gt;=</operator><name>min1</name> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;=</operator><name>max1</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>first</name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><name>max1</name></expr>)</condition><then>
    <block>{   <expr_stmt><expr><name>first</name><operator>=</operator><name>max1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>-</operator><name>max1</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>n</name><operator>+</operator><name>second</name><operator>&lt;=</operator><name>max2</name></expr>)</condition><then>
        <block>{   <expr_stmt><expr><name>second</name><operator>=</operator><name>second</name><operator>+</operator><name>n</name></expr>;</expr_stmt>
        }</block></then><else>else
        <block>{   <expr_stmt><expr><name>second</name><operator>=</operator><name>max2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>-</operator><name>max2</name><operator>+</operator><name>min2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>third</name><operator>=</operator><name>third</name><operator>+</operator><name>n</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">" %"</literal><name>PRId64</name><literal type="string">" %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,<argument><expr><name>first</name></expr></argument>,<argument><expr><name>second</name></expr></argument>,<argument><expr><name>third</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
