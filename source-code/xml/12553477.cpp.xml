<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12553477.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>A</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>G</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name>  <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Answer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>time</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>G</name><index>[<expr><name>deep</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>A</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>deep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>time</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>used</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tin</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tout</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Answer</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>cin</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>szz</name> <init>= <expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>Answer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>szz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>szz</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><call><name>int</name><argument_list>(<argument><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>Answer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>Answer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Answer</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>num</name><operator>)</operator></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>high</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>sz</name></expr></init></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>l</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>tin</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
        }</block></while>

        <if>if <condition>(<expr><name><name>tin</name><index>[<expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>left</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>left</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><name>left</name> <operator>&gt;=</operator> <name>sz</name> <operator>||</operator> <operator>(</operator><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>tout</name><index>[<expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>left</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><name>left</name></expr></init></decl>, <decl><type ref="prev"/><name>r1</name> <init>= <expr><name>sz</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>r1</name> <operator>-</operator> <name>l1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>r1</name> <operator>+</operator> <name>l1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name><name>tout</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>l1</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>r1</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
        }</block></while>

        <if>if <condition>(<expr><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>tout</name><index>[<expr><name><name>G</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>right</name> <operator>=</operator> <name>l1</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>right</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><name>right</name> <operator>&gt;=</operator> <name>sz</name> <operator>||</operator> <operator>(</operator><name>left</name> <operator>==</operator> <name>right</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>chislo</name> <init>= <expr><name><name>Answer</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>right</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>Answer</name><index>[<expr><name>high</name></expr>]</index><index>[<expr><name>left</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>chislo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{
            <if>if <condition>(<expr><name>chislo</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>odd</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>chislo</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>odd</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
