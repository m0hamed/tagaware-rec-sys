<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12523424.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; n; ++i)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>row</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>row</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>row</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c1</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>c2</name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>mx</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>row</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>row</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name> <operator>+</operator> <name>col</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>row</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>row</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <name>k</name> <operator>||</operator> <name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <name>col</name> <operator>||</operator> <name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;=</operator> <name>col</name>
                    <operator>||</operator> <name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name>
                    <operator>||</operator> <name><name>g</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>mx</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name>k</name> <operator>&amp;&amp;</operator> <name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if <condition>(<expr><name>k</name> <operator>-</operator> <name>j</name> <operator>+</operator> <name><name>c2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>c1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
                    <comment type="line">// printf("%d %d %d\n", j, k, dp[idx][j][k]);</comment>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <name><name>dp</name><index>[<expr><operator>!</operator><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>row</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <name><name>dp</name><index>[<expr><operator>!</operator><name>idx</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <name><name>dp</name><index>[<expr><operator>!</operator><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>row</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>+</operator> <name><name>dp</name><index>[<expr><operator>!</operator><name>idx</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                <comment type="line">// printf("%d %d %d\n", j, k, dp[idx][j][k]);</comment>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>!</operator><name>idx</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><operator>!</operator><name>idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>row</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
