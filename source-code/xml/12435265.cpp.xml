<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12435265.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>P</name>;</typedef>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>G</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>P</name></type> <name>p</name><init>=<expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>!=</operator><name>u</name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>!=</operator><name>v</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name><name>second</name><argument_list type="generic">&lt;<argument><expr><name>l</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>&gt;</argument_list></name></name><name>r</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>==</operator><name>u</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name><name>second</name><argument_list type="generic">&lt;<argument><expr><name>l</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>&gt;</argument_list></name></name><name>r</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>P</name></type> <name>p</name><init>=<expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>!=</operator><name>v</name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>!=</operator><name>u</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name><name>second</name><argument_list type="generic">&lt;<argument><expr><name>l</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>&gt;</argument_list></name></name><name>r</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>==</operator><name>v</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><operator>(</operator><name><name>p</name><operator>.</operator><name><name>second</name><argument_list type="generic">&lt;<argument><expr><name>l</name><operator>||</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>&gt;</argument_list></name></name><name>r</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><operator>~</operator><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>ans</name><init>=<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>)</condition><block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>G</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>G</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
            <expr_stmt><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*  for(int i=1;i&lt;=2*n;i++){
            for(int j=i;j&lt;=2*n;j++){
                if(j-i==1){
                    if(~dp[i][j])printf("dp[%d][%d]=%I64d\n",i,j,dp[i][j]);
                }
            }
        }*/</comment>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
