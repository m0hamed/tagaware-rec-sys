<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12053849.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/* Have courage and be kind*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include> <comment type="line">//system("pause");</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>(1&lt;&lt;29)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,-1,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,v,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>((double)2*acos(0.0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V).erase(unique((V).begin(),(V).end()),(V).end())</cpp:value></cpp:define><comment type="line">//vector must be sorted</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxx3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>maxx(a,maxx(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMDIGIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int)(log10((x))/log10((y))))+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)/gcd((x),(y)))*(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(f, "r", stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(f, "w", stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lol</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ulol</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bin2dec</name><parameter_list>(<parameter><type><name>b</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0,d=0;b[i];d=(d&lt;&lt;1)|(b[i++]-48));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dec2bin</name><parameter_list>(<parameter><type><name>d</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int nnn=d;while(nnn){if(nnn%2)b+="1";else b+="0";nnn&gt;&gt;=1;}reverse(ALL(b));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_add</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>while(y){typeof(x) carry = x &amp; y;x=x^y;y=carry&lt;&lt;1;}</cpp:value></cpp:define> <comment type="line">//answer is x</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define> <comment type="line">//10^9+7</comment>

<comment type="line" format="doxygen">///int rrr[]={1,0,-1,0};int ccc[]={0,1,0,-1}; //4 Direction</comment>
<comment type="line" format="doxygen">///int rrr[]={1,1,0,-1,-1,-1,0,1};int ccc[]={0,1,1,1,0,-1,-1,-1};//8 direction</comment>
<comment type="line" format="doxygen">///int rrr[]={2,1,-1,-2,-2,-1,1,2};int ccc[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction</comment>
<comment type="line" format="doxygen">///int rrr[]={2,1,-1,-2,-1,1};int ccc[]={0,1,1,0,-1,-1}; //Hexagonal Direction</comment>
<comment type="line" format="doxygen">///int month[]={31,28,31,30,31,30,31,31,30,31,30,31}; //month</comment>
<comment type="line" format="doxygen">///string monthArray[] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};</comment>
<comment type="line" format="doxygen">///string dayArray[]={"Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday"};//Day</comment>
<comment type="line" format="doxygen">/// for(map&lt;int,int&gt;::iterator i=mp.begin();i!=mp.end();i++)cout&lt;&lt;i-&gt;first&lt;&lt;" "&lt;&lt;i-&gt;second&lt;&lt;endl;</comment>
<comment type="line" format="doxygen">/// vector&lt; pair&lt;string,string&gt; &gt; result;  result.push_back(make_pair(words[i].word, words[j].word));</comment>
<comment type="line" format="doxygen">///nCr[0][0]=1; for(int i=1;i&lt;1002005;i++){ nCr[i][0]=1; for(int j=1;j&lt;=i;j++) nCr[i][j]=nCr[i-1][j]+nCr[i-1][j-1];}</comment>


<function><type><name>lol</name></type> <name>mod_v</name><parameter_list>(<parameter><decl><type><name>lol</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
      <block type="pseudo"><return>return<expr><operator>(</operator><name>num</name><operator>%</operator><name>mod</name><operator>)</operator></expr>;</return></block></then>
    <else>else
     <block type="pseudo"><return>return<expr><operator>(</operator><name>num</name><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>lol</name></type> <name>fast_pow</name><parameter_list>(<parameter><decl><type><name>lol</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>md</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>lol</name></type> <name>r</name><init>=<expr><literal type="number">1</literal><operator>%</operator><name>md</name></expr></init></decl>;</decl_stmt> <comment type="line">// if mo==1 the r should be equal to 0</comment>
    <while>while<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name>r</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>md</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>p</name><operator>=</operator><name>p</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>md</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>countBits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sum</name></expr>;</return>
}</block></function>


<comment type="block" format="doxygen">/********** Solution ***************/</comment>
<struct>struct <name>point</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>oc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>point</name></type> <name><name>arr</name><index>[<expr><literal type="number">1000006</literal></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//bool cmp(point a, point b)</comment>
<comment type="line">//{</comment>
<comment type="line">//    if(arr[a].oc&lt;arr[b].oc)</comment>
<comment type="line">//     return arr[a].oc&gt;arr[b].oc;</comment>
<comment type="line">//    else</comment>
<comment type="line">//     return true;</comment>
<comment type="line">//}</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//READ("input.txt");</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR1</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><call><name>sf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mx</name><operator>=</operator><call><name>MAX</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>oc</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>oc</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>f</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>oc</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
     <comment type="line">//sort(arr+1,arr+mx+1,cmp);</comment>
     <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>ri</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>le</name><init>=<expr><name>inf</name></expr></init></decl>;</decl_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>mx</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
     <block>{
         <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oc</name><operator>&gt;</operator><name>ans</name></expr>)</condition><then>
         <block>{
             <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ri</name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>le</name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>;</expr_stmt>
         }</block></then>
         <elseif>else <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>oc</name><operator>==</operator><name>ans</name></expr>)</condition><then>
         <block>{
             <if>if<condition>(<expr><name>ri</name><operator>-</operator><name>le</name><operator>&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition><then>
             <block>{
                 <expr_stmt><expr><name>ri</name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>
                 <expr_stmt><expr><name>le</name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>;</expr_stmt>
             }</block></then></if>
         }</block></then></if></elseif></if>
     }</block></for>
<comment type="line">//     for(int i=2;i&lt;=mx;i++)</comment>
<comment type="line">//     {</comment>
<comment type="line">//         if(arr[i].oc==arr[i-1].oc)</comment>
<comment type="line">//         {</comment>
<comment type="line">//             ri=MAX(ri,arr[i].l);</comment>
<comment type="line">//             le=MIN(le,arr[i].f);</comment>
<comment type="line">//         }</comment>
<comment type="line">//     }</comment>
     <expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>le</name></expr></argument>,<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
