<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12378071.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>           
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>  <comment type="line">// Include for memset!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">2000000000</literal></expr></init></decl>;</decl_stmt>                     <comment type="line">// 9</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>LLINF</name> <init>= <expr><literal type="number">9000000000000000000LL</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 18</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>LDINF</name> <init>= <expr><literal type="number">1e300</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type> <name>vvii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">72</literal></expr>]</index><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">// Satisfies</comment>
<function><type><name>bool</name></type> <name>satisfies</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>con</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>v1</name> <operator>==</operator> <name>v2</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>con</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>v1</name> <operator>&lt;</operator> <name>v2</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>con</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>v1</name> <operator>&gt;</operator> <name>v2</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>con</name><operator>.</operator><name>first</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>v1</name> <operator>&lt;=</operator> <name>v2</name></expr>;</return></block></then></if>
    <return>return <expr><name>v1</name> <operator>&gt;=</operator> <name>v2</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>second.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>second.second</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>ways</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>constraints</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
            <comment type="line">// Only</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>stf</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{ 
                <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>&lt;=</operator> <name>r</name>
                    <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf</name> <operator>=</operator> <name>stf</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>stf</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>bool</name></type> <name>stf1</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>stf2</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>, <decl><type ref="prev"/><name>stf3</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>constraints</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>&lt;=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>&lt;=</operator> <name>r</name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <comment type="line">// l , l + 1</comment>
                <if>if <condition>(<expr><operator>(</operator><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf1</name> <operator>=</operator> <name>stf1</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf1</name> <operator>=</operator> <name>stf1</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf1</name> <operator>=</operator> <name>stf1</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                <comment type="line">// l , r</comment>
                <if>if <condition>(<expr><operator>(</operator><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf2</name> <operator>=</operator> <name>stf2</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf2</name> <operator>=</operator> <name>stf2</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>l</name> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf2</name> <operator>=</operator> <name>stf2</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
                <comment type="line">// r - 1, r</comment>
                <if>if <condition>(<expr><operator>(</operator><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf3</name> <operator>=</operator> <name>stf3</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>it</name><operator>.</operator><name>ff</name></name> <operator>==</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf3</name> <operator>=</operator> <name>stf3</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>it</name><operator>.</operator><name>sf</name></name> <operator>==</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>stf3</name> <operator>=</operator> <name>stf3</name> <operator>&amp;&amp;</operator> <call><name>satisfies</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>

            }</block></for>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>stf1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>ways</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>stf2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>ways</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>stf3</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>ways</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></then></if>
    <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">72</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">72</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for></block></for>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>constraints</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>constraints</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>type</name></expr>, <expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>ways</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>constraints</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
