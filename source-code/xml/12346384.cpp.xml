<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12346384.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>200001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Point</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Point</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
        <if>if<condition>(<expr><name>x</name><operator>!=</operator><name><name>rhs</name><operator>.</operator><name>x</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>x</name><operator>&lt;</operator><name><name>rhs</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
        <return>return <expr><name>y</name><operator>&lt;</operator><name><name>rhs</name><operator>.</operator><name>y</name></name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Point</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
        <return>return <expr><name>x</name><operator>&lt;=</operator><name><name>rhs</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name><name>rhs</name><operator>.</operator><name>y</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fact</name><index>[<expr><name>V</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>inv</name><index>[<expr><name>V</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Point</name></type> <name><name>data</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>p</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>*=</operator><name>b</name></expr><operator>,</operator> <expr><name>ret</name><operator>%=</operator><name>M</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>b</name><operator>*=</operator><name>b</name></expr><operator>,</operator> <expr><name>b</name><operator>%=</operator><name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>factGen</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>D</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name>invGen</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>V</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>getX</name></decl>,<decl><type ref="prev"/><name>getY</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>, <decl><type ref="prev"/><name>sub</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>factGen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invGen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><name>data</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>getX</name><operator>=</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>getY</name><operator>=</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>getX</name><operator>+</operator><name>getY</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getX</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getY</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>sub</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;=</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>getX</name><operator>=</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>getY</name><operator>=</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>data</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name><name>fact</name><index>[<expr><name>getX</name><operator>+</operator><name>getY</name></expr>]</index></name></expr><operator>,</operator> <expr><name>tmp</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getX</name></expr>]</index></name></expr><operator>,</operator> <expr><name>tmp</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getY</name></expr>]</index></name></expr><operator>,</operator> <expr><name>tmp</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sub</name> <operator>+=</operator> <name>tmp</name></expr><operator>,</operator> <expr><name>sub</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>sub</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>M</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <comment type="block">/*printf("\n");*/</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>h</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>ans</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>ans</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>sub</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>getX</name><operator>=</operator><name>h</name><operator>-</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator> <expr><name>getY</name><operator>=</operator><name>w</name><operator>-</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>fact</name><index>[<expr><name>getX</name><operator>+</operator><name>getY</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getX</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>getY</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sub</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>sub</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>sub</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>M</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
