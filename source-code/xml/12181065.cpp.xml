<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12181065.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = k; i &gt;= n; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ve</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<struct>struct <name>st</name><block>{<public type="default">
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>st</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{ <return>return <expr><name>n</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>n</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<function><type><name>ll</name></type> <name>fq</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>maxi</name></decl>, <decl><type ref="prev"/><name>mini</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
         <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxi</name> <operator>=</operator> <operator>*</operator><call><name>max_element</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro><block>{
        <if>if <condition>( <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>maxi</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">6</literal></expr></init></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>( <expr><name>z</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>v</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>s1</name> <init>= <expr><name><name>v</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><name><name>v</name><index>[<expr><operator>(</operator><name>k</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">6</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>s3</name> <init>= <expr><name><name>v</name><index>[<expr><operator>(</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">6</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>fq</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>fq</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>fq</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>fq</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
