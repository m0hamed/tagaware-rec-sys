<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12592130.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lol</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>lol</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name><name>str</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lol</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">506</literal></expr>]</index><index>[<expr><literal type="number">506</literal></expr>]</index></name><init>=<expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>lol</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>r2</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>c2</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type> <name>trell</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></for>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//ifstream fin;</comment>
    <comment type="line">//fin.open("output.txt");</comment>
    <comment type="line">//#define cin fin</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>lol</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>lol</name></type> <name>moves</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>moves</name><operator>&lt;</operator><operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>;</condition><incr><expr><name>moves</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>lol</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>lol</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
        <for>for<control>(<init><decl><type><name>lol</name></type> <name>r1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>r1</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>r1</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <for>for<control>(<init><decl><type><name>lol</name></type> <name>r2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>r2</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>r2</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>lol</name></type> <name>c1</name> <init>= <expr><name>moves</name> <operator>-</operator> <name>r1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>lol</name></type> <name>c2</name> <init>= <expr><operator>-</operator><name>r2</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <name>moves</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

                <if>if<condition>(<expr><operator>!</operator><call><name>ok</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>       <comment type="line">// boundary ke bahar hai</comment>
                <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name><operator>!=</operator><name><name>str</name><index>[<expr><name>r2</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

                <decl_stmt><decl><type><name>lol</name></type> <name>yahan_tak</name><init>=<expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>    <comment type="line">// ye thora ajeeb wala dp hai</comment>

                <comment type="line">// the 4 possible cases</comment>

                <if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>r2</name></expr>]</index><index>[<expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name>   <operator>=</operator>   <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>+</operator> <name>yahan_tak</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>   <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>yahan_tak</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>   <operator>=</operator>   <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>yahan_tak</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>r2</name></expr>]</index><index>[<expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name>     <operator>=</operator>   <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>+</operator> <name>yahan_tak</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
            }</block></for>
        }</block></for>
    }</block></for>

    <comment type="line">//trell();</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>lol</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>lol</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>lol</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>r2</name></decl></parameter>,<parameter><decl><type><name>lol</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>r1</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r2</name><operator>&lt;</operator><name>m</name> <operator>&amp;&amp;</operator> <name>c1</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>r1</name><operator>&lt;</operator><name>m</name> <operator>&amp;&amp;</operator> <name>r2</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>c2</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r1</name><operator>&lt;=</operator><name>r2</name> <operator>&amp;&amp;</operator> <name>c1</name><operator>&lt;=</operator><name>c2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
</unit>
