<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12061317.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>Q</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>N</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>N</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>Q</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>lv</name> <operator>&gt;&gt;</operator> <name>L</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>ans</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>L</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>lv</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>R</name> <operator>&lt;&lt;=</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>lv</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>R</name> <operator>+=</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>lv</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>beg</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name><name>beg</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;</operator> <name>L</name></expr>)</condition>
            <block>{
                <if>if <condition>(<expr><name><name>beg</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;=</operator> <name>L</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name><name>beg</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>beg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                
                <expr_stmt><expr><name>beg</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            
            <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            
            <decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>--</operator><name>end</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name><name>end</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;</operator> <name>R</name></expr>)</condition>
            <block>{
                <if>if <condition>(<expr><name><name>end</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>end</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                
                <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>end</name></expr>;</expr_stmt>
            }</block></while>

            <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>now</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>now</name> <operator>!=</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><operator>--</operator><name>now</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>now</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;=</operator> <name>L</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>now</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>L</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>now</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;</operator> <name>R</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>R</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>now</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            
            <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            
            <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr><name>now</name> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>now</name><operator>-&gt;</operator><name>first</name></name> <operator>&gt;</operator> <name>R</name></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <if>if <condition>(<expr><name><name>now</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;</operator> <name>R</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>R</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>now</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                
                <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            }</block></while>
            
            <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></else></if>
    }</block></for>

    <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Game cheated!\n"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
