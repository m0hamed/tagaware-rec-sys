<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12529807.cpp"><comment type="line">//Language: MS C++</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>pt</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>right</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vall</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>valr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
    <constructor><name>pt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>left</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>right</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vall</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call>, <call><name>left</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call>, <call><name>right</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call>, <call><name>vall</name><argument_list>(<argument><expr><name>vall</name></expr></argument>)</argument_list></call>, <call><name>valr</name><argument_list>(<argument><expr><name>valr</name></expr></argument>)</argument_list></call>, <call><name>len</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call>, <call><name>col</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">300013</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>Do</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pt</name></expr></argument>&gt;</argument_list></name></type> <name>t</name></decl>;</decl_stmt>
    <constructor><name>Do</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>n</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>resize</name></name><argument_list>( <argument><expr><name>n</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
    <function><type><name>pt</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>right</name></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>b</name><operator>.</operator><name>left</name></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name>pt</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>vall</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>valr</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>col</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>pt</name></type> <name>ans</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>len</name></name><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>valr</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>vall</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>col</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>val</name></name><operator>)</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>valr</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>vall</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>col</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>col</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>col</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>col</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>col</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>val</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>val</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
        <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>right</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>right</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>a</name><operator>.</operator><name>vall</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>vall</name></name> <operator>=</operator> <name><name>a</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>vall</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>len</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>valr</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>valr</name></name> <operator>=</operator> <name><name>b</name><operator>.</operator><name>len</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>valr</name></name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>pt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>comb</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
        <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>pt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>val</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <if>if <condition>(<expr><name>pos</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>comb</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>t</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>pt</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
        <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>tl</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>tr</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return></block></then></if>
        <return>return <expr><call><name>comb</name><argument_list>(<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>get</name><argument_list>(<argument><expr><name>v</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>pt</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Do</name></type> <name>tree</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>p</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>upd</name></name><argument_list>(<argument><expr><name>t</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>pt</name></type> <name>ans</name> <init>= <expr><call><name><name>tree</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><operator>.</operator><name>val</name></name> <operator>-</operator> <name><name>ans</name><operator>.</operator><name>col</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
}</block></function></unit>
