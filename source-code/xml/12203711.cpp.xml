<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12203711.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bin</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>a3</name></decl>,<decl><type ref="prev"/><name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>&lt;=</operator><name>a1</name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>b1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name><operator>&lt;=</operator><name>b1</name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>a1</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{

<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a1</name><operator>&gt;&gt;</operator><name>b1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a2</name><operator>&gt;&gt;</operator><name>b2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a3</name><operator>&gt;&gt;</operator><name>b3</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rj</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>a3</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rj</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>b3</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rj</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>  
<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>b3</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rj</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>  
<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>a3</name></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rj</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>  

<expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>rj</name><operator>)</operator></expr>?</condition><then><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr></then><else>:<expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr></else></ternary></expr>;</expr_stmt>    
    
}</block></function></unit>
