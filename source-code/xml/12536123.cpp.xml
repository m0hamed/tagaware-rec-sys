<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12536123.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block" format="doxygen">/*************************************************************************
    &gt; File Name: code/cf/#316/EE.cpp
    &gt; Author: 111qqz
    &gt; Email: rkz2013@126.com 
    &gt; Created Time: 2015å¹´08æ15æ¥ ææå­ 04æ¶10å13ç§
 ************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y0</name></cpp:macro> <cpp:value>abc111qqz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>hust111qqz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yn</name></cpp:macro> <cpp:value>hez111qqz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j1</name></cpp:macro> <cpp:value>cute111qqz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm</name></cpp:macro> <cpp:value>crazy111qqz</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lr</name></cpp:macro> <cpp:value>dying111qqz</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=0;i&lt;int(n);++i)</cpp:value></cpp:define>  
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1E9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">5E2</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>st</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>st</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  <comment type="line">//  dp[0][1][n]= st[1][1]==st[n][m];</comment>
    <if>if <condition>(<expr><name><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>st</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then>
    <block>{
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></else></if>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>step</name> <operator>&lt;=</operator> <name>mx</name></expr> ;</condition> <incr><expr><name>step</name><operator>++</operator></expr></incr>)</control>
    <block>{
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <name>cur</name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name>  <operator>=</operator><literal type="number">0</literal></expr> ;</expr_stmt>
        }</block></for>
    }</block></for>
    
     <for>for <control>( <init><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>x1</name> <operator>&lt;=</operator> <name>n</name><operator>&amp;&amp;</operator><name>x1</name><operator>-</operator><literal type="number">1</literal><operator>&lt;=</operator><name>step</name></expr> ;</condition><incr><expr><name>x1</name><operator>++</operator></expr></incr>)</control>
     <block>{
        <for>for <control>( <init><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><name>n</name></expr></init></decl> ;</init> <condition><expr><name>x2</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator><name>n</name><operator>-</operator><name>x2</name><operator>&lt;=</operator><name>step</name></expr> ;</condition><incr><expr><name>x2</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><literal type="number">1</literal><operator>+</operator><name>step</name><operator>-</operator><operator>(</operator><name>x1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>         
            <decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><name>m</name><operator>-</operator><name>step</name><operator>+</operator><operator>(</operator><name>n</name><operator>-</operator><name>x2</name><operator>)</operator></expr></init></decl>;</decl_stmt>         <comment type="line">//ç±x1,x2 å¯ä»¥è®¡ç®åºy1,y2</comment>
            <if>if <condition>(<expr><name><name>st</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name><operator>==</operator><name><name>st</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then>
            <block>{
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            }</block></then></if><comment type="line">//åªæå½åpic ç¸åçæ¶åæè½¬ç§»</comment>
        }</block></for>   
     }</block></for>
    }</block></for>
     <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
     <block>{
         <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
     }</block></for>
     <if>if <condition>(<expr><operator>(</operator><name>m</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
     <block>{
        <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></for>
     }</block></then></if>
     <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
