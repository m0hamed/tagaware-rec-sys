<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12191078.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits<comment type="line">//</comment></cpp:file>stdc++.h&gt;</cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str1</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>str2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>str1</name><operator>==</operator><name>str2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><call><name><name>str1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <call><name><name>str2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>str1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>str1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>str2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>str2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//cout&lt;&lt;str1&lt;&lt;" "&lt;&lt;str2&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>str1</name><operator>==</operator><name>str2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
    }</block></then></if></elseif>
    <comment type="line">//else if((str1.size()/4)%2!=0) return false;</comment>
    <elseif>else <if>if<condition>(<expr><call><name><name>str1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{

    <decl_stmt><decl><type><name>string</name></type> <name>a1</name><init>=<expr><call><name><name>str1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>str1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>a2</name><init>=<expr><call><name><name>str1</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>str1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>str1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>b1</name><init>=<expr><call><name><name>str2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>str2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>b2</name><init>=<expr><call><name><name>str2</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><call><name><name>str2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><call><name><name>str2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <return>return <expr><operator>(</operator><call><name>check</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>b1</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>check</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>b1</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></then></if></elseif>
    <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>s1</name><operator>==</operator><name>s2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else<block>{

        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></else></if>

}</block></function>
</unit>
