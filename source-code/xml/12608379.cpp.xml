<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12608379.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>md</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.000000000001</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<class>class <name>Tree</name> 
<block>{<private type="default">

</private><public>public:
    <struct>struct <name>elem</name> 
    <block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

        <constructor><name>elem</name><parameter_list>()</parameter_list> 
        <block>{
            <expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></constructor>
    </public>}</block>;</struct>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>elem</name></expr></argument>&gt;</argument_list></name></type> <name>tree</name></decl>;</decl_stmt>

    <constructor><name>Tree</name><parameter_list>()</parameter_list> 
    <block>{
        <expr_stmt><expr><name>tree</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>elem</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>MAXN</name></expr></argument>, <argument><expr><call><name>elem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor><empty_stmt>;</empty_stmt>

    <function><type><name>void</name></type> <name>push_down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> 
    <block>{
        <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> 
        <block>{
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>*</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>  
        <block>{
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>

        <return>return;</return>
    }</block></function>


    <function><type><name>void</name></type> <name>modify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> 
    <block>{
        <if>if <condition>(<expr><name><name>b</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>a</name></expr></argument> &gt;</argument_list></name> <name>r</name> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> 
        <block>{
            <return>return;</return> 
        }</block></then></if>
        
        <expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//printf("id = %d l = %d r = %d a = %d b = %d\n", id, l, r, a, b);</comment>

        <if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name> <operator>*</operator> <name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        
            <if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> 
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
            }</block></then></if>
            
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></function>


    <function><type><name>int</name></type> <name>getsum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> 
    <block>{
        <if>if <condition>(<expr><name><name>b</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>a</name></expr></argument> &gt;</argument_list></name> <name>r</name> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> 
        <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name>getsum</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>getsum</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><type><name>void</name></type> <name>CreateTree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> 
    <block>{
       <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> 
       <block>{
           <return>return;</return>
       }</block></then></if>

       <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> 
       <block>{
           <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
           <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
           <return>return;</return>
       }</block></then></if>
        
       <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

       <expr_stmt><expr><call><name>CreateTree</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>CreateTree</name><argument_list>(<argument><expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>tree</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>id</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
    }</block></function>

</public>}</block>;</class>


<decl_stmt><decl><type><name>Tree</name></type> <name><name>letters</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
        <block>{
            <if>if <condition>(<expr><name><name>letters</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getsum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> 
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><name>j</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef> 
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//DEBUG</comment>
        
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <expr_stmt><expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>CreateTree</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <expr_stmt><expr><name><name>letters</name><index>[<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>


    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name><name>letters_count</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block>{
            <expr_stmt><expr><name><name>letters_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>letters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getsum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>k</name></expr>)</condition><then> 
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
            <block>{
                <expr_stmt><expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name><name>letters_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>letters_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then> <else>else 
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> 
            <block>{
                <expr_stmt><expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name><name>letters_count</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>letters_count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>show</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Execution time = %.4lfsec"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
