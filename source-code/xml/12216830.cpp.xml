<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12216830.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name><name>Numbers</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>Numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>Numbers</name></expr></argument>,<argument><expr><name>Numbers</name><operator>+</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>Numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name><name>Numbers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>       
}</block></function></unit>
