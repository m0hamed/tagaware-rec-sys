<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/11852386.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>std::numeric_limits&lt;double&gt;::epsilon()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max_buf_size</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>max_buf_size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>_bytes_read_</name> <init>= <expr><name>max_buf_size</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>_s</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>_bytes_read_</name></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>getc1</name><parameter_list>()</parameter_list> <block>{ <if>if<condition>(<expr><name>_s</name> <operator>&gt;=</operator> <name>buf</name> <operator>+</operator> <name>_bytes_read_</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>_bytes_read_</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>max_buf_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>buf</name><index>[<expr><name>_bytes_read_</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <expr_stmt><expr><name>_s</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt> }</block></then></if> <return>return <expr><operator>*</operator><operator>(</operator><name>_s</name><operator>++</operator><operator>)</operator></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>readint</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>t</name><init>=<expr><call><name>getc1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>!=</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
	<block>{ <expr_stmt><expr><name>n</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></then></if>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{ <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>res</name> <operator>+</operator> <operator>(</operator><name>t</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
	<return>return <expr><name>res</name><operator>*</operator><name>n</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>readLL</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>t</name><init>=<expr><call><name>getc1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>!=</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
	<block>{ <expr_stmt><expr><name>n</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></then></if>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{ <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>LL</name><operator>)</operator><literal type="number">10</literal><operator>*</operator><name>res</name> <operator>+</operator> <operator>(</operator><name>t</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
	<return>return <expr><name>res</name><operator>*</operator><name>n</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>skipwhitespace</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getc1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while> <return>return <expr><name>ch</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>readline</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>skipwhitespace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>( <expr><operator>(</operator><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>int</name></type> <name>readstr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>skipwhitespace</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>( <expr><operator>(</operator><name>ch</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getc1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>n</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>char</name></type> <name>readchar</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>skipwhitespace</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
 
<decl_stmt><decl><type><name>char</name></type> <name><name>outbuf</name><index>[<expr><name>max_buf_size</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>outbuf_p</name></decl>;</decl_stmt>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>putc1</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><name>outbuf_p</name> <operator>&gt;=</operator> <name>max_buf_size</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>max_buf_size</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>outbuf_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> }</block></then></if> <expr_stmt><expr><name><name>outbuf</name><index>[<expr><name>outbuf_p</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt> }</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>outbuf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>outbuf_p</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>outbuf_p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> }</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>writeint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><name>n</name></expr></else></ternary></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><name>n</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc1</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putc1</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>writeLL</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <ternary><condition><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><operator>-</operator><name>n</name></expr></else></ternary></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><operator>!</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><name>n</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">48</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putc1</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <literal type="number">25</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putc1</name><argument_list>(<argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>writestr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>*</operator><name>p</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>putc1</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>writedouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="string">"%.*f"</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>writestr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<comment type="line">// END OF IO</comment>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>e</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>e</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt></block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>pow1</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>e</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>mod</name></decl></parameter>)</parameter_list>	<comment type="line">// mod should be prime</comment>
<block>{
	<if>if<condition>(<expr><name>e</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>pow1</name><argument_list>(<argument><expr><call><name>pow1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>-</operator><name>e</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><call><name>pow1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> 
<type><name>T</name></type> <name>egcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>T</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>d</name> <init>= <expr><call><name>egcd</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <name>x1</name><operator>*</operator> <operator>(</operator><name>b</name><operator>/</operator><name>a</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>
 
<function><type><name>LL</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>inv</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>egcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>inv</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>inv</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>inv</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>inv</name></expr>;</return>
}</block></function>
 
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<while>while<condition>(<expr><name>b</name></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>t</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
 
<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>getfactors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>f</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>*</operator><name>a</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>n</name> <operator>%</operator> <name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>a</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
		}</block></while>
		<if>if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>f</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>getbit</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name>n</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>min1</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>max1</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>min2</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>max2</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>min3</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>max3</name> <init>= <expr><call><name>readint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>max1</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>min2</name><operator>-</operator><name>min3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a2</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>max2</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>a1</name><operator>-</operator><name>min3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>max3</name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>a1</name><operator>-</operator><name>a2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d\n"</literal></expr></argument>,<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


}</block></function>




</unit>
