<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12590984.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">505</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name><init>=<expr><literal type="number">505</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7.5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>M</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxm</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>maxm</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>x1</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal><operator>||</operator><name>x1</name></expr></argument>&gt;</argument_list></name><name>n</name><operator>||</operator><name><name>y1</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal><operator>||</operator><name>y1</name></expr></argument>&gt;</argument_list></name><name>m</name><operator>||</operator><name><name>x2</name><argument_list type="generic">&lt;<argument><expr><name>x1</name><operator>||</operator><name>x2</name></expr></argument>&gt;</argument_list></name><name>n</name><operator>||</operator><name><name>y2</name><argument_list type="generic">&lt;<argument><expr><name>y1</name><operator>||</operator><name>y2</name></expr></argument>&gt;</argument_list></name><name>m</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("input.txt","r",stdin);</comment>
	<while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition>
	<block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>M</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<comment type="line">//        for(int i=1;i&lt;=n;i++)printf("%s\n",M[i]+1);</comment>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>M</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>M</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<comment type="line">//		cout&lt;&lt;dp[1][1][n]&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//		cout&lt;&lt;mid&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>x1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>x1</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>x1</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>y1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>y1</name><operator>&lt;=</operator><name>m</name><operator>&amp;&amp;</operator><name>x1</name><operator>+</operator><name>y1</name><operator>&lt;=</operator><name>mid</name></expr>;</condition><incr><expr><name>y1</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name>x1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>x2</name><init>=<expr><name>x1</name></expr></init></decl>;</init><condition><expr><name>x2</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>x2</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<decl_stmt><decl><type><name>int</name></type> <name>y2</name><init>=<expr><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">2</literal><operator>-</operator><name>x1</name><operator>-</operator><name>y1</name><operator>-</operator><name>x2</name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name><name>y2</name><argument_list type="generic">&lt;<argument><expr><name>y1</name><operator>||</operator><name>y2</name></expr></argument>&gt;</argument_list></name><name>m</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
<comment type="line">//					cout&lt;&lt;x1&lt;&lt;' '&lt;&lt;y1&lt;&lt;' '&lt;&lt;x2&lt;&lt;' '&lt;&lt;y2&lt;&lt;endl;</comment>
					<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>x1</name><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name><name>M</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name><operator>==</operator><name><name>M</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>+</operator><name><name>dp</name><index>[<expr><operator>(</operator><name>x1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
						<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>+</operator><name><name>dp</name><index>[<expr><operator>(</operator><name>x1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
						<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>+</operator><name><name>dp</name><index>[<expr><name>x1</name><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
						<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>+</operator><name><name>dp</name><index>[<expr><name>x1</name><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
					}</block></then></if>
<comment type="line">//					printf("%d\n",M[x1][y1]==M[x2][y2]);</comment>
<comment type="line">//					printf("dp[%d][%d][%d][%d]=%d\n",x1,y1,x2,y2,dp[x1][y1][x2]);</comment>
					<if>if<condition>(<expr><name>x1</name><operator>+</operator><name>y1</name><operator>==</operator><name>mid</name></expr>)</condition><then>
					<block>{
<comment type="line">//						printf("dp[%d][%d][%d][%d]=%d\n",x1,y1,x2,y2,dp[x1%2][y1][x2]);</comment>
						<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><name><name>dp</name><index>[<expr><name>x1</name><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block></for></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
