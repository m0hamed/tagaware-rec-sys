<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12380865.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Out</name><index>[<expr><literal type="number">100010</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>)</parameter_list>
<block>{<return>return <expr><name><name>a</name><index>[<expr><name>a1</name></expr>]</index></name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>a2</name></expr>]</index></name></expr>;</return>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>id</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>id</name><operator>+</operator><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>Out</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>N</name></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Out</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2e9</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>Out</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>N</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>Out</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>Out</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>Out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>Out</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
