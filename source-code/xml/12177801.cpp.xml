<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12177801.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>is</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>js</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>it</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>jt</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>lop</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>js</name><operator>-</operator><name>is</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>is</name><operator>+</operator><name>k</name></expr>]</index></name><operator>==</operator><name><name>t</name><index>[<expr><name>it</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>lop</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
    }</block></for>
    <if>if<condition>(<expr><name>lop</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name>js</name><operator>-</operator><name>is</name><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <comment type="line">//  cout&lt;&lt;is&lt;&lt;" "&lt;&lt;(js-((js-is)/2))-1&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><operator>(</operator><operator>(</operator><call><name>f</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>is</name><operator>+</operator><operator>(</operator><operator>(</operator><name>js</name><operator>-</operator><name>is</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>it</name><operator>+</operator><operator>(</operator><name>jt</name><operator>-</operator><name>it</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>jt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><call><name>f</name><argument_list>(<argument><expr><operator>(</operator><name>is</name><operator>+</operator><operator>(</operator><name>js</name><operator>-</operator><name>is</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>js</name></expr></argument>,<argument><expr><name>it</name></expr></argument>,<argument><expr><name>it</name><operator>+</operator><operator>(</operator><operator>(</operator><name>jt</name><operator>-</operator><name>it</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><then>
    <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>is</name></expr></argument>,<argument><expr><name>is</name><operator>+</operator><operator>(</operator><operator>(</operator><name>js</name><operator>-</operator><name>is</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,<argument><expr><name>it</name></expr></argument>,<argument><expr><name>it</name><operator>+</operator><operator>(</operator><operator>(</operator><name>jt</name><operator>-</operator><name>it</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>f</name><argument_list>(<argument><expr><operator>(</operator><name>is</name><operator>+</operator><operator>(</operator><name>js</name><operator>-</operator><name>is</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>js</name></expr></argument>,<argument><expr><operator>(</operator><name>it</name><operator>+</operator><operator>(</operator><name>jt</name><operator>-</operator><name>it</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>jt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
<comment type="line">//  cout&lt;&lt;s.size()&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <else>else
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
