<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12594854.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>70</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>menor</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>, <decl><type ref="prev"/><name><name>igual</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>, <decl><type ref="prev"/><name><name>menori</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>val</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter> )</parameter_list><block>{
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>igual</name><index>[ <expr><name>x2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>igual</name><index>[ <expr><name>x2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt> 
        <if>if<condition>( <expr><name>ind</name> <operator>!=</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>!=</operator> <name>y2</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>  
    }</block></for>
    
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>igual</name><index>[ <expr><name>y2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>igual</name><index>[ <expr><name>y2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt> 
        <if>if<condition>( <expr><name>ind</name> <operator>!=</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>!=</operator> <name>y2</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>  
    }</block></for>
    
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>menor</name><index>[ <expr><name>x2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>menor</name><index>[ <expr><name>x2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> <operator>&lt;=</operator> <name>ind</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>&lt;=</operator> <name>y</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if<condition>( <expr><name>ind</name> <operator>==</operator> <name>x2</name> <operator>||</operator> <name>ind</name> <operator>==</operator> <name>y2</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>menor</name><index>[ <expr><name>y2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>menor</name><index>[ <expr><name>y2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> <operator>&lt;=</operator> <name>ind</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>&lt;=</operator> <name>y</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if<condition>( <expr><name>ind</name> <operator>==</operator> <name>x2</name> <operator>||</operator> <name>ind</name> <operator>==</operator> <name>y2</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>menori</name><index>[ <expr><name>x2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>menori</name><index>[ <expr><name>x2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> <operator>&lt;=</operator> <name>ind</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>&lt;=</operator> <name>y</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>menori</name><index>[ <expr><name>y2</name></expr> ]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><name><name>menori</name><index>[ <expr><name>y2</name></expr> ]</index><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> <operator>&lt;=</operator> <name>ind</name> <operator>&amp;&amp;</operator> <name>ind</name> <operator>&lt;=</operator> <name>y</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    }</block></for>   
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>memo</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>dp</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list><block>{
    <if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>( <expr><name><name>used</name><index>[ <expr><name>x</name></expr> ]</index><index>[ <expr><name>y</name></expr> ]</index></name></expr> )</condition><then> <block type="pseudo"><return>return <expr><name><name>memo</name><index>[ <expr><name>x</name></expr> ]</index><index>[ <expr><name>y</name></expr> ]</index></name></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>used</name><index>[ <expr><name>x</name></expr> ]</index><index>[ <expr><name>y</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>dev</name> <init>= <expr><name><name>memo</name><index>[ <expr><name>x</name></expr> ]</index><index>[ <expr><name>y</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>x</name> <operator>-</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">0</literal>  <operator>&amp;&amp;</operator> <call><name>val</name><argument_list>( <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument> , <argument><expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>  )</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>dp</name><argument_list>( <argument><expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>( <expr><name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>val</name><argument_list>( <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument> , <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>dp</name><argument_list>( <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>( <expr><name>x</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>val</name><argument_list>( <argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument> , <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>dev</name> <operator>+=</operator> <call><name>dp</name><argument_list>( <argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>dev</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>op</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>op</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr> <operator>,</operator> <expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>op</name> <operator>==</operator> <literal type="string">"="</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>igual</name><index>[ <expr><name>a</name></expr> ]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>( <expr><name>op</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>menor</name><index>[ <expr><name>b</name></expr> ]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif> 
        <elseif>else <if>if<condition>( <expr><name>op</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>menori</name><index>[ <expr><name>b</name></expr> ]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>( <expr><name>op</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>menor</name><index>[ <expr><name>a</name></expr> ]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>menori</name><index>[ <expr><name>a</name></expr> ]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <if>if<condition>( <expr><call><name>val</name><argument_list>( <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>i</name></expr></argument>  , <argument><expr><name>i</name></expr></argument> , <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>( <argument><expr><name>i</name></expr></argument> , <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    
}</block></function>   </unit>
