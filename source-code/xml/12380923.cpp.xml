<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12380923.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>std::make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) (a).size()</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<struct>struct <name>pair</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sign</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name></type> <name><name>all</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>full</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"1122"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"1221"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"2211"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"332211"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"233211"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"133221"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"123321"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"113322"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"223311"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"122331"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"112332"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>all</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="string">"112233"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name><name>all</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name> <init>= <expr><name><name>all</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name> <operator>&gt;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></for>
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ans</name></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <return>return <expr><name>ans</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name></name></type> <name>out</name></decl>, <decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&lt;=</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&lt;=</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>pair</name></type> <name>p</name></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&lt;</operator> <name>i</name> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&gt;</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&lt;</operator> <name>i</name> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&gt;</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>pair</name></type> <name>p</name></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>l</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt></block></else></if>
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>r</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <else>else
            <block>{
                <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&gt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&lt;=</operator> <name>i</name> <operator>+</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                }</block></then>
                <else>else
                <block>{
                    <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>==</operator> <literal type="number">20</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                }</block></else></if>
                <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            }</block></else></if>
        }</block></for>
        <if>if <condition>(<expr><name>ok</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>f1</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>j</name></expr>, <expr><literal type="number">20</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            }</block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>)</condition><then>
            <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name> <operator>-</operator> <name>len</name></expr>, <expr><literal type="number">20</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            }</block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>f2</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<comment type="line">//printf("%d %I64d %I64d\n", i, f1, f2);</comment>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>f1</name> <operator>*</operator> <name>f2</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    
    <expr_stmt><expr><call><name>full</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pair</name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %c%c%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>l</name></expr><operator>,</operator> <expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>, <expr><literal type="number">10</literal></expr>}</block></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>, <expr><literal type="number">20</literal></expr>}</block></expr>;</expr_stmt></block></else></if>
    }</block></for>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><call><name>f</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function></unit>
