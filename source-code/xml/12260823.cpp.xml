<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12260823.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a &lt; c;a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII</name></cpp:macro> <cpp:value>pair &lt; int,int &gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PII</name></type> <name><name>tree</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>move</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fake</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>x</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{   <return>return <expr><literal type="number">0</literal></expr>;</return>   }</block></then></if>
	<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>fake</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>C</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{   <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>   <return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>dir</name></expr></argument>,<argument><expr><name>fake</name></expr></argument>)</argument_list></call></expr>;</return>   }</block></then></if>
	<expr_stmt><expr><name>dir</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>tree</name><index>[<expr><name>fake</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>C</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>fake</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
	<return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>dir</name></expr></argument>,<argument><expr><name>fake</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>y</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt> 
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>begin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&gt;&gt;</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>C</name></expr>;</expr_stmt>  <if>if<condition>(<expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{   <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>C</name></expr>;</expr_stmt>   <expr_stmt><expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>   }</block></then></if>   <expr_stmt><expr><name><name>tree</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>    }</block>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>=</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>C</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>begin</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><name>begin</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>max</name><argument_list>( <argument><expr><call><name>move</name><argument_list>(<argument><expr><name>begin</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>move</name><argument_list>(<argument><expr><name>begin</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
