<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12378113.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<comment type="line">// el primero que cumple que el valor es val (ademas p &lt; pos)</comment>
<function><type><name>int</name></type> <name>buscoMenor</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name> <operator>||</operator> <name><name>num</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>d</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{
        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name> <operator>||</operator> <operator>(</operator><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>m</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>d</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<comment type="line">// el ultimo que cumple que la posicion es val y la posicion es a lo sumo pos</comment>
<function><type><name>int</name></type> <name>buscoMayor</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name> <operator>||</operator> <name><name>num</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>d</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{
        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name> <operator>&amp;&amp;</operator> <name>m</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>d</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>


<comment type="line">// el primero que cumple que el valor es val y la posicion es como minimo pos</comment>
<function><type><name>int</name></type> <name>buscoMenor2</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name> <operator>||</operator> <name><name>num</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>d</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{
        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <comment type="line">// si con d me pase o hay alguno valido antes</comment>
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name> <operator>&amp;&amp;</operator> <name>m</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>d</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<comment type="line">// el ultimo que cumple que la posicion es val (ademas p &gt; pos)</comment>
<function><type><name>int</name></type> <name>buscoMayor2</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>val</name> <operator>||</operator> <name><name>num</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>d</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition> <block>{
        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <name>val</name> <operator>||</operator> <operator>(</operator><name><name>num</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name>m</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; d &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>d</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>val</name> <operator>&amp;&amp;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&gt;</operator> <name>pos</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ACMTUYO</name></cpp:ifdef> 
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"c.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name><name>num</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>num</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// busqueda binaria buscando la cant de val/k con pos menor</comment>
        <if>if <condition>(<expr><name>val</name><operator>%</operator><name>k</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
            
        <comment type="line">// cerr &lt;&lt; pos &lt;&lt; endl;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>menor</name> <init>= <expr><call><name>buscoMenor</name><argument_list>(<argument><expr><name>val</name><operator>/</operator><name>k</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mayor</name> <init>= <expr><call><name>buscoMayor</name><argument_list>(<argument><expr><name>val</name><operator>/</operator><name>k</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; menor &lt;&lt; " " &lt;&lt; mayor &lt;&lt; endl;   </comment>

        <if>if <condition>(<expr><name>menor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>mayor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
            
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>mayor</name> <operator>-</operator> <name>menor</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// cerr &lt;&lt; a &lt;&lt; " ---------------------------------" &lt;&lt; endl;</comment>
        
        <comment type="line">// bb buscando la cant de val*k con pos mayor</comment>
        <expr_stmt><expr><name>menor</name> <operator>=</operator> <call><name>buscoMenor2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>val</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>k</name><operator>)</operator></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mayor</name> <operator>=</operator> <call><name>buscoMayor2</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>val</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>k</name><operator>)</operator></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// cerr &lt;&lt; ((long long) val)*((long long) k) &lt;&lt; endl;</comment>
        
        <comment type="line">// cerr &lt;&lt; i &lt;&lt; " " &lt;&lt; menor &lt;&lt; " " &lt;&lt; mayor &lt;&lt; endl;</comment>
    
        <if>if <condition>(<expr><name>menor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>mayor</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>a</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>mayor</name> <operator>-</operator> <name>menor</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>result</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>   
</unit>
