<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12349187.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V</name></cpp:macro> <cpp:value>100001</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>H</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name><operator>&lt;</operator><name>q</name><operator>)</operator></expr>?</condition><then><expr><name>p</name></expr></then><else>:<expr><name>q</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name><operator>&gt;</operator><name>q</name><operator>)</operator></expr>?</condition><then><expr><name>p</name></expr></then><else>:<expr><name>q</name></expr></else></ternary></expr>;</return>
}</block></function>
<struct>struct <name>Block</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>lf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>rt</name></decl>;</decl_stmt>
    <constructor><name>Block</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    <constructor><name>Block</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>_lf</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>_rt</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>lf</name><argument_list>(<argument><expr><name>_lf</name></expr></argument>)</argument_list></call>,<call><name>rt</name><argument_list>(<argument><expr><name>_rt</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    <function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_h</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>_lf</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>_rt</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>h</name> <operator>=</operator> <name>_h</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lf</name> <operator>=</operator> <name>_lf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rt</name> <operator>=</operator> <name>_rt</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>normalize</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>H</name> <operator>-</operator> <name>h</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
            <expr_stmt><expr><name>lf</name> <operator>&lt;&lt;=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rt</name> <operator>=</operator> <operator>(</operator><name>rt</name><operator>&lt;&lt;</operator><literal type="number">1LL</literal><operator>)</operator> <operator>|</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
        }</block></while>
    }</block></function>
    <function><type><name>bool</name></type> <name>empty</name><parameter_list>()</parameter_list><block>{
        <return>return <expr><name>lf</name><operator>&gt;</operator><name>rt</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name>Block</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>lf</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>lf</name></expr></argument>,<argument><expr><name><name>other</name><operator>.</operator><name>lf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rt</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>rt</name></expr></argument>,<argument><expr><name><name>other</name><operator>.</operator><name>rt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>bool</name></type> <name>emptyAfterIntersect</name><parameter_list>(<parameter><decl><type><name>Block</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><name><name>other</name><operator>.</operator><name>lf</name></name><operator>&gt;</operator><name>rt</name> <operator>||</operator> <name><name>other</name><operator>.</operator><name>rt</name></name><operator>&lt;</operator><name>lf</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>list</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%lld,%lld)\n"</literal></expr></argument>,<argument><expr><name>lf</name></expr></argument>,<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Block</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
        <if>if<condition>(<expr><name>lf</name><operator>==</operator><name><name>rhs</name><operator>.</operator><name>lf</name></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>rt</name><operator>&lt;</operator><name><name>rhs</name><operator>.</operator><name>rt</name></name></expr>;</return></block></then></if>
        <return>return <expr><name>lf</name><operator>&lt;</operator><name><name>rhs</name><operator>.</operator><name>lf</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>Block</name></type> <name><name>yes</name><index>[<expr><name>V</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>no</name><index>[<expr><name>V</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Block</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>topY</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>topN</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Block</name></type> <name>now</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Block</name></type> <name>ret</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>H</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld%lld%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>yes</name><index>[<expr><name>topY</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>no</name><index>[<expr><name>topN</name><operator>++</operator></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>topY</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>yes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>topN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>no</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>normalize</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1LL</literal></expr></argument>,<argument><expr><literal type="number">1LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>normalize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>topY</name><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>ret</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>intersect</name></name><argument_list>(<argument><expr><name><name>yes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><call><name><name>ret</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else<block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>no</name></expr></argument>,<argument><expr><name>no</name><operator>+</operator><name>topN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>topN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><call><name><name>ret</name><operator>.</operator><name>emptyAfterIntersect</name></name><argument_list>(<argument><expr><name><name>no</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name><name>no</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf</name><operator>&gt;</operator><name><name>ret</name><operator>.</operator><name>lf</name></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><call><name>Block</name><argument_list>(<argument><expr><name><name>ret</name><operator>.</operator><name>lf</name></name></expr></argument>, <argument><expr><name><name>no</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>lf</name></name> <operator>=</operator> <name><name>no</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rt</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><operator>!</operator><call><name><name>ret</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lf</name><operator>!=</operator><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>rt</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
