<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12518883.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT</name></cpp:macro> <cpp:value>freopen("draft.inp","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT</name></cpp:macro> <cpp:value>freopen("draft.out","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=l;i&lt;=r;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=l;i&lt;r;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=l;i&gt;=r;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto i=l;i&gt;r;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDL</name></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">5e2</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>dy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name>x</name><operator>&amp;&amp;</operator><name>y</name><operator>&amp;&amp;</operator><name>x</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name>y</name><operator>&lt;=</operator><name>m</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>equa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xa</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ya</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>xb</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>yb</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name><name>a</name><index>[<expr><name>xa</name></expr>]</index><index>[<expr><name>ya</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>xb</name></expr>]</index><index>[<expr><name>yb</name></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>m</argument>)</argument_list></macro> <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><call><name>equa</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    cout&lt;&lt;f[0][0][n]&lt;&lt;'\n';</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>last</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>len</argument>,<argument><literal type="number">1</literal></argument>,<argument>(n+m)/<literal type="number">2</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>cur</name></expr></argument>,<argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>xa</argument>,<argument><literal type="number">1</literal></argument>,<argument>min(n,<literal type="number">1</literal>+len)</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>xb</argument>,<argument>max(n-len,<literal type="number">1</literal>)</argument>,<argument>n</argument>)</argument_list></macro><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>ya</name><init>=<expr><name>len</name><operator>-</operator><operator>(</operator><name>xa</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>yb</name><init>=<expr><name>m</name><operator>-</operator><operator>(</operator><name>len</name><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>xb</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>xa</name></expr></argument>,<argument><expr><name>ya</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>check</name><argument_list>(<argument><expr><name>xb</name></expr></argument>,<argument><expr><name>yb</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>equa</name><argument_list>(<argument><expr><name>xa</name></expr></argument>,<argument><expr><name>ya</name></expr></argument>,<argument><expr><name>xb</name></expr></argument>,<argument><expr><name>yb</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <macro><name>FOR</name><argument_list>(<argument>k1</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
                        <macro><name>FOR</name><argument_list>(<argument>k2</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><block>{
                            <decl_stmt><decl><type><name>int</name></type> <name>nxa</name><init>=<expr><name>xa</name><operator>-</operator><name><name>dx</name><index>[<expr><name>k1</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>nya</name><init>=<expr><name>ya</name><operator>-</operator><name><name>dy</name><index>[<expr><name>k1</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>nxb</name><init>=<expr><name>xb</name><operator>+</operator><name><name>dx</name><index>[<expr><name>k2</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>nyb</name><init>=<expr><name>yb</name><operator>+</operator><name><name>dy</name><index>[<expr><name>k2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                            <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>nxa</name></expr></argument>,<argument><expr><name>nya</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>check</name><argument_list>(<argument><expr><name>nxb</name></expr></argument>,<argument><expr><name>nyb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<comment type="line">//                                printf("-&gt;%d %d %d %d %d\n",nxa,nya,nxb,nyb,f[len-1][nxa][nxb]);</comment>
                                <expr_stmt><expr><name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>xa</name></expr>]</index><index>[<expr><name>xb</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>xa</name></expr>]</index><index>[<expr><name>xb</name></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>last</name></expr>]</index><index>[<expr><name>nxa</name></expr>]</index><index>[<expr><name>nxb</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block>
<comment type="line">//                    printf("%d %d %d %d %d %d\n",len,xa,ya,xb,yb,f[len][xa][xb]);</comment>
                    <if>if <condition>(<expr><name>len</name><operator>==</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><call><name>abs</name><argument_list>(<argument><expr><name>xb</name><operator>-</operator><name>xa</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>yb</name><operator>-</operator><name>ya</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>xa</name></expr>]</index><index>[<expr><name>xb</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></function>
</unit>
