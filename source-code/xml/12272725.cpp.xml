<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12272725.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fact</name><index>[<expr><literal type="number">200003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>invfact</name><index>[<expr><literal type="number">200003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>arr</name><index>[<expr><literal type="number">200004</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ways</name><index>[<expr><literal type="number">2500</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>temp</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>a</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>a</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>temp</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>mod</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>temp</name><operator>=</operator><name>temp</name><operator>*</operator><name>temp</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>temp</name><operator>&gt;</operator><name>mod</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>temp</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>factorial</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>invfact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">200000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>invfact</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name><operator>=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">199999</literal></expr>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>invfact</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>n</name><operator>-</operator><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>*</operator> <name><name>invfact</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <name><name>invfact</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
    <comment type="line">//cout&lt;&lt;n&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;ans&lt;&lt;endl;</comment>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>factorial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;"rishabh"&lt;&lt;endl;</comment>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>,<argument><expr><name>arr</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>ways</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>comp</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//for(i=0;i&lt;n;i++)</comment>
      <comment type="line">//  cout&lt;&lt;ways[i]&lt;&lt;endl;</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><call><name>comp</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>ans</name><operator>-=</operator> <operator>(</operator><name><name>ways</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><call><name>comp</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>w</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>ways</name><index>[<expr><name>j</name></expr>]</index></name><operator>-=</operator> <operator>(</operator><name><name>ways</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><call><name>comp</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>ways</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ways</name><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
