<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12606414.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>get_signed_int</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>neg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'-'</literal><operator>&amp;&amp;</operator><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>neg</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<do>do <block>{<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
	}</block>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	<return>return <expr><ternary><condition><expr><name>neg</name></expr>?</condition><then><expr><operator>-</operator><name>ret</name></expr></then><else>:<expr><name>ret</name></expr></else></ternary></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>get_signed_int</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><call><name>get_signed_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></name></type> <name>son</name></decl>, <decl><type ref="prev"/><name>per</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>get_signed_int</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>%</operator> <name>k</name><operator>)</operator></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>per</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tmp</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>itSon</name> <init>= <expr><call><name><name>son</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tmp</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>per</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>it</name> <operator>-&gt;</operator> <name>second</name></name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>itSon</name> <operator>!=</operator> <call><name><name>son</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>itPerTmp</name> <init>= <expr><call><name><name>per</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>itPerTmp</name> <operator>!=</operator> <call><name><name>per</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>itPerTmp</name> <operator>-&gt;</operator> <name>second</name></name> <operator>+=</operator> <name><name>itSon</name> <operator>-&gt;</operator> <name>second</name></name></expr>;</expr_stmt>
                    }</block></then><else>else <block>{
                        <expr_stmt><expr><call><name><name>per</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name> <operator>::</operator> <name>make_pair</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>itSon</name> <operator>-&gt;</operator> <name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></then><else>else<block>{
                <if>if<condition>(<expr><name>itSon</name> <operator>!=</operator> <call><name><name>son</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>itPerTmp</name> <init>= <expr><call><name><name>per</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>itPerTmp</name> <operator>!=</operator> <call><name><name>per</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>itPerTmp</name> <operator>-&gt;</operator> <name>second</name></name> <operator>+=</operator> <name><name>itSon</name> <operator>-&gt;</operator> <name>second</name></name></expr>;</expr_stmt>
                    }</block></then><else>else <block>{
                        <expr_stmt><expr><call><name><name>per</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name> <operator>::</operator> <name>make_pair</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>itSon</name> <operator>-&gt;</operator> <name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></else></if>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>std</name> <operator>::</operator> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>itSonTmp</name> <init>= <expr><call><name><name>son</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>itSonTmp</name> <operator>!=</operator> <call><name><name>son</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name><name>itSonTmp</name> <operator>-&gt;</operator> <name>second</name></name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>son</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>std</name> <operator>::</operator> <name>make_pair</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
