<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12613871.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">505</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>a</name> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <name>d</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>pre</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>&gt;</operator> <name>step</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>dk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dk</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>dk</name></expr></incr>)</control> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>dk</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ty</name> <init>= <expr><name>y</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>dk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>tx</name></expr>]</index><index>[<expr><name>ty</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>tx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>tx</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
                    }</block></for>
                }</block></for>
            }</block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>pre</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>dk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dk</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>dk</name></expr></incr>)</control> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>dk</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ty</name> <init>= <expr><name>y</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>dk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>tx</name></expr></argument>, <argument><expr><name>ty</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>tx</name></expr>]</index><index>[<expr><name>ty</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>tx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>pre</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>tx</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
                    }</block></for>
                }</block></for>
            }</block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>==</operator> <name>step</name></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>result</name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>pre</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
