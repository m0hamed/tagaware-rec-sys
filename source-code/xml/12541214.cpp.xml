<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12541214.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>DP</name><index>[ <expr><literal type="number">2</literal></expr> ]</index><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">4</literal></expr> ]</index><index>[ <expr><name>N</name> <operator>+</operator> <literal type="number">4</literal></expr> ]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block></for>
    
    <for>for <control>( <init><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>r1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>r1</name><operator>--</operator></expr></incr> )</control><block>{
        <for>for <control>( <init><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>c1</name><operator>--</operator></expr></incr> )</control><block>{
            <for>for <control>( <init><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>r2</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>r2</name><operator>++</operator></expr></incr> )</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>r1</name> <operator>-</operator> <name>c1</name> <operator>-</operator> <name>r2</name></expr></init></decl>;</decl_stmt>  
                <decl_stmt><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>dev</name> <init>= <expr><name><name>DP</name><index>[ <expr><name>r1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index><index>[ <expr><name>r2</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>( <expr><operator>(</operator><name>r1</name> <operator>==</operator> <name>r2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>c2</name><operator>)</operator></expr> )</condition><then><block>{ 
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><index>[ <expr><name>r1</name></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index></name> <operator>==</operator> <name><name>s</name><index>[ <expr><name>r2</name></expr> ]</index><index>[ <expr><name>c2</name></expr> ]</index></name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> 
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>( <expr><operator>(</operator><name>r1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <name>c2</name><operator>)</operator></expr> )</condition><then><block>{ 
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><index>[ <expr><name>r1</name></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index></name> <operator>==</operator> <name><name>s</name><index>[ <expr><name>r2</name></expr> ]</index><index>[ <expr><name>c2</name></expr> ]</index></name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>( <expr><operator>(</operator><name>r1</name> <operator>==</operator> <name>r2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>==</operator> <name>c2</name><operator>)</operator></expr> )</condition><then><block>{ 
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if> 
                <if>if<condition>( <expr><name>r1</name> <operator>&gt;</operator> <name>r2</name> <operator>||</operator> <name>c1</name> <operator>&gt;</operator> <name>c2</name></expr> )</condition><then><block>{ 
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>( <expr><name><name>s</name><index>[ <expr><name>r1</name></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index></name> <operator>==</operator> <name><name>s</name><index>[ <expr><name>r2</name></expr> ]</index><index>[ <expr><name>c2</name></expr> ]</index></name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>dev</name> <operator>+</operator><name><name>DP</name><index>[ <expr><name>r1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[ <expr><name>r2</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name>  <operator>)</operator> <operator>%</operator><name>MOD</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>dev</name> <operator>+</operator> <name><name>DP</name><index>[ <expr><operator>(</operator><name>r1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index><index>[ <expr><name>r2</name> <operator>-</operator><literal type="number">1</literal></expr> ]</index></name> <operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>dev</name> <operator>+</operator> <name><name>DP</name><index>[ <expr><name>r1</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><name>r2</name></expr> ]</index></name> <operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dev</name> <operator>=</operator> <operator>(</operator><name>dev</name> <operator>+</operator> <name><name>DP</name><index>[ <expr><operator>(</operator><name>r1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr> ]</index><index>[ <expr><name>c1</name></expr> ]</index><index>[ <expr><name>r2</name></expr> ]</index></name> <operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
                }</block></then></if>       
            }</block></for>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>DP</name><index>[ <expr><literal type="number">0</literal> <operator>&amp;</operator> <literal type="number">1</literal></expr> ]</index><index>[ <expr><literal type="number">0</literal></expr> ]</index><index>[ <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>  
}</block></function>
</unit>
