<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12459409.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>stoi</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name></decl>;</decl_stmt><expr_stmt><expr><name>ss</name><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt><expr_stmt><expr><name>ss</name><operator>&gt;&gt;</operator><name>tmp</name></expr>;</expr_stmt><return>return <expr><name>tmp</name></expr>;</return>}</block></function>
<function><type><name>string</name></type> <name>itos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name></decl>;</decl_stmt><expr_stmt><expr><name>ss</name><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt><return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(int)n.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; " (L" &lt;&lt; __LINE__ &lt;&lt; ")" &lt;&lt; " " &lt;&lt; __FILE__ &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">1300000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>is</name><index>[<expr><name>INF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>prime</name><index>[<expr><name>INF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>pan</name>  <index>[<expr><name>INF</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ts</name></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>tmp</name></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>is</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>is</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name><name>is</name><index>[<expr><name>i</name><operator>*</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></for>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>is</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>
            <expr_stmt><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>sum</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>itos</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ts</name><operator>=</operator><call><name><name>tmp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>ts</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>tmp</name><index>[<expr><name>ts</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
            <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block>{<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>
            <expr_stmt><expr><name><name>pan</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>sum</name></expr>;</expr_stmt>
        }</block></for>
        
        
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>,<decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <comment type="line">//c1=0,c2=0;</comment>
            <comment type="line">//for(int j=1;j&lt;=i;j++)if(prime[j])c1++;</comment>
            <comment type="line">//for(int j=1;j&lt;=i;j++)if(pan[j])c2++;</comment>
            <comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;prime[i]&lt;&lt;" "&lt;&lt;pan[i]&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator><operator>(</operator><operator>(</operator><name>p</name><operator>/</operator><name>q</name><operator>)</operator><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pan</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt>}</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>ans</name><operator>==</operator><name>INF</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Palindromic tree is better than splay tree"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
        <else>else    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
