<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12168499.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive>  <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x;i&gt;n;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SIZE</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> 
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    
    <if>if<condition>( 
        <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>
        <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>
      )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
