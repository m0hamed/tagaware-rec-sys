<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12526221.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//author: WHW</comment>
<comment type="line">//First Edit Time:	2015-08-14 10:44</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e+4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXM</name><init>=<expr><literal type="number">1e+5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>LL_INF</name><init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l,m,rt&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>m+1,r,rt&lt;&lt;1|1</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dep</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>has</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>chu</name></decl>,<decl><type ref="prev"/><name>ru</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>f</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dfsxu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>shu</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><literal type="number">500010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>deep</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>dep</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>deep</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>chu</name><operator>=</operator><name>dfsxu</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>chu</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>deep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>ru</name><operator>=</operator><name>dfsxu</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>dep</name><index>[<expr><name><name>vis</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>==</operator><name><name>dep</name><index>[<expr><name><name>vis</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name><operator>&lt;</operator><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>dep</name><index>[<expr><name><name>vis</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>&lt;</operator><name><name>dep</name><index>[<expr><name><name>vis</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><literal type="number">500010</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sum</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>sum</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>Pushup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>rt</name></expr>]</index></name><operator>=</operator><operator>(</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>rt</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>^</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>rt</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>Build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>sum</name><index>[<expr><name>rt</name></expr>]</index></name><operator>^=</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>str</name><index>[<expr><name><name>vis</name><index>[<expr><name><name>shu</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <comment type="line">//printf("%d:%c %d %d %d\n",l,str[vis[shu[l-1]]],vis[shu[l-1]],shu[l-1],sum[rt]);</comment>
        <return>return ;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>m</name><operator>&gt;=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>Pushup</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//printf("%d %d %d\n",l,r,sum[rt]);</comment>
}</block></function>
<function><type><name>int</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//printf("%d %d %d\n",l,r,sum[rt]);</comment>
    <if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><name>L</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>R</name></expr>)</condition><then>
    <block>{
        <return>return <expr><name><name>sum</name><index>[<expr><name>rt</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>su</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>m</name><operator>&gt;=</operator><name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>su</name><operator>^=</operator><call><name>Query</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>su</name><operator>^=</operator><call><name>Query</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>su</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dfsxu</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>shu</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>shu</name></expr></argument>,<argument><expr><name>shu</name><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>has</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>has</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>yingshe</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>has</name><index>[<expr><name>yingshe</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>dep</name><index>[<expr><name><name>vis</name><index>[<expr><name><name>shu</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>==</operator><name>yingshe</name></expr>)</condition><then>
            <block>{
                <empty_stmt>;</empty_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>yingshe</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>has</name><index>[<expr><name>yingshe</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <comment type="line">//printf("%d %d\n",yingshe,i);</comment>
            }</block></else></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>yingshe</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>has</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>n</name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//for(int i=0;i&lt;n;i++)</comment>
            <comment type="line">//printf("%d ",shu[i]);</comment>
        <comment type="line">//puts("");</comment>
        <comment type="line">//for(int i=1;i&lt;=n;i++)</comment>
            <comment type="line">//printf("%d ",has[i]);</comment>
        <comment type="line">//puts("");</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>vi</name></decl>,<decl><type ref="prev"/><name>hi</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>vi</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>dep</name><index>[<expr><name>vi</name></expr>]</index></name><operator>&gt;=</operator><name>hi</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>ai</name></decl>,<decl><type ref="prev"/><name>bi</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>ai</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>shu</name><operator>+</operator><name><name>has</name><index>[<expr><name>hi</name></expr>]</index></name></expr></argument>,<argument><expr><name>shu</name><operator>+</operator><name><name>has</name><index>[<expr><name>hi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>vi</name></expr>]</index></name><operator>.</operator><name>chu</name></expr></argument>)</argument_list></call><operator>-</operator><name>shu</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bi</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>shu</name><operator>+</operator><name><name>has</name><index>[<expr><name>hi</name></expr>]</index></name></expr></argument>,<argument><expr><name>shu</name><operator>+</operator><name><name>has</name><index>[<expr><name>hi</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>vi</name></expr>]</index></name><operator>.</operator><name>ru</name></expr></argument>)</argument_list></call><operator>-</operator><name>shu</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bi</name><operator>--</operator></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>pan</name><init>=<expr><call><name>Query</name><argument_list>(<argument><expr><name>ai</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>bi</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">//printf("%d %d %d %d %d %d %d\n",has[hi],has[hi+1]-1,f[vi].chu,f[vi].ru,ai,bi,pan);</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>biao</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><operator>(</operator><name>pan</name><operator>&gt;&gt;</operator><name>j</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>biao</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>biao</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></else></if>
        }</block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
