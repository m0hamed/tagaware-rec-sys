<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12094093.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>u&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(l+r)&gt;&gt;1</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>Node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lazy_tag</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<class>class <name>STree</name>
<block>{<private type="default">
</private><public>public:
	<enum>enum <name>MAXN</name> <block>{<decl><name>maxn</name><init>=<expr><literal type="number">400020</literal></expr></init></decl>}</block>;</enum>
	<comment type="line">//enum MAXN { maxn = 1000 };</comment>
	<decl_stmt><decl><type><name>Node</name></type> <name><name>nodes</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

	<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>MID</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><call><name>MID</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>pushDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{
		<if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>left</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <operator>(</operator><name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>left</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></function>

	<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{
		<if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
			<if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>lazy_tag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>

			<return>return;</return>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name>pushDown</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><call><name>MID</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<else>else<block>{
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>+</operator> <name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>

	<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{
		<if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
			<return>return <expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name></expr>;</return>
		}</block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><call><name>MID</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pushDown</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>query</name><argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></else></if>

		<expr_stmt><expr><name><name>nodes</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name> <operator>+</operator> <name><name>nodes</name><index>[<expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
		<return>return <expr><name>ans</name></expr>;</return>
	}</block></function>
</public>}</block>;</class>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>STree</name></type> <name><name>trees</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; n &gt;&gt; q;</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cin &gt;&gt; str;</comment>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>trees</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>trees</name><index>[<expr><name><name>str</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<comment type="line">//cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</comment>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>trees</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>trees</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><name>r</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>trees</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

				<expr_stmt><expr><name>r</name> <operator>=</operator> <name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>trees</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>q</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>q</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><name><name>trees</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>str</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
	}</block></for>
<comment type="line">//	cout &lt;&lt; str &lt;&lt; endl;</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
