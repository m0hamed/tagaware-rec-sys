<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12178728.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a1</name> <operator>&gt;&gt;</operator> <name>b1</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a1</name> <operator>&gt;</operator> <name>b1</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>a2</name> <operator>*</operator> <name>b2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a2</name> <operator>&gt;&gt;</operator> <name>b2</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a2</name> <operator>&gt;</operator> <name>b2</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>s2</name> <operator>=</operator> <name>a2</name> <operator>*</operator> <name>b2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>a3</name> <operator>&gt;&gt;</operator> <name>b3</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a3</name> <operator>&gt;</operator> <name>b3</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>s3</name> <operator>=</operator> <name>a3</name> <operator>*</operator> <name>b3</name></expr>;</expr_stmt>
<comment type="block">/*    
    std::cout &lt;&lt; a1 &lt;&lt; " " &lt;&lt; b1 &lt;&lt; " " &lt;&lt; s1 &lt;&lt; std::endl;
    std::cout &lt;&lt; a2 &lt;&lt; " " &lt;&lt; b2 &lt;&lt; " " &lt;&lt; s2 &lt;&lt; std::endl;
    std::cout &lt;&lt; a3 &lt;&lt; " " &lt;&lt; b3 &lt;&lt; " " &lt;&lt; s3 &lt;&lt; std::endl;
*/</comment>

<comment type="block">/*
    if (s1 &lt; s2 + s3) {
        std::cout &lt;&lt; "NON" &lt;&lt; std::endl;
        return 0;
    }
*/</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>one_fit</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>index</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>b2</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a4</name></decl>, <decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a5</name></decl>, <decl><type ref="prev"/><name>b5</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a6</name></decl>, <decl><type ref="prev"/><name>b6</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a7</name></decl>, <decl><type ref="prev"/><name>b7</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a8</name></decl>, <decl><type ref="prev"/><name>b8</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>a4</name> <operator>=</operator> <name>a2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b4</name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b2</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>a5</name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b5</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>a6</name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b6</name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b2</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>a7</name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>a2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b7</name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>a8</name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b8</name> <operator>=</operator> <name>b1</name> <operator>-</operator> <name>b2</name></expr>;</expr_stmt>

<comment type="block">/*
            std::cout &lt;&lt; a4 &lt;&lt; " " &lt;&lt; b4 &lt;&lt; std::endl;
            std::cout &lt;&lt; a5 &lt;&lt; " " &lt;&lt; b5 &lt;&lt; std::endl;
            std::cout &lt;&lt; a6 &lt;&lt; " " &lt;&lt; b6 &lt;&lt; std::endl;
            std::cout &lt;&lt; a7 &lt;&lt; " " &lt;&lt; b7 &lt;&lt; std::endl;
            std::cout &lt;&lt; a8 &lt;&lt; " " &lt;&lt; b8 &lt;&lt; std::endl;
*/</comment>            

            <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

            <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>a4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b4</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a4</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>b4</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>(</operator><name>a4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b4</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>a5</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b5</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a5</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>b5</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>(</operator><name>a5</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b5</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>a6</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b6</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a6</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>b6</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>(</operator><name>a6</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b6</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>a7</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b7</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a7</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>b7</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>(</operator><name>a7</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b7</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>a8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b8</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a8</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>&lt;=</operator> <name>b8</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><operator>(</operator><name>a8</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b8</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>one_fit</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if <condition>(<expr><name>one_fit</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr><name>one_fit</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="line">// std::cout &lt;&lt; calculateShift(sequence) &lt;&lt; std::endl;</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
