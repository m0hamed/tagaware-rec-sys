<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12107085.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lli</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>scanf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name></cpp:macro> <cpp:value>printf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_b</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fin</name></cpp:macro> <cpp:value>freopen( "input.txt", "r", stdin );</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fout</name></cpp:macro> <cpp:value>freopen( "output.txt", "w", stdout );</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dist</name><parameter_list>( <parameter><type><name>x</name></type></parameter>, <parameter><type><name>xx</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>yy</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>sqrt( (x - y) * (x - y) + (xx - yy) * (xx - yy) )</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>s</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>, <decl><type ref="prev"/><name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>g1</name></decl>, <decl><type ref="prev"/><name>g2</name></decl>, <decl><type ref="prev"/><name>inf</name> <init>= <expr><literal type="number">100011</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>sc</name><argument_list>( <argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sc</name><argument_list>( <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>c</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>inf</name></expr>, <expr><name>inf</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name>inf</name></expr>, <expr><operator>-</operator><name>inf</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <expr_stmt><expr><call><name>sc</name><argument_list>( <argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>k</name></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>g</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt></block></else></if>
        <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block>{
            <decl_stmt><decl><type><name>bool</name></type> <name>b1</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>g1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <while>while<condition>( <expr><name>b1</name></expr> )</condition><block>{
                <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><block>{<expr><name>l</name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>&gt;</operator> <name>r</name></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
                <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name><name>se</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr></argument> &gt;</argument_list></name></name> <name>r</name></expr> )</condition><then><block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>&lt;=</operator> <name>r</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name>g1</name> <operator>+=</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name><name>fi</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr></argument> &gt;</argument_list></name></name> <name>r</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr>, <expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g1</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <elseif>else <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>&lt;=</operator> <name>r</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g1</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <elseif>else <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>&lt;=</operator> <name>r</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr>, <expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g1</name> <operator>+=</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>-</operator> <name>l</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></else></if>
            }</block></while>
            <if>if<condition>( <expr><name>g1</name></expr> )</condition><then><block>{
                <if>if<condition>( <expr><name>k</name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>g</name></expr>, <expr><name>g</name> <operator>+</operator> <name>g1</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g</name> <operator>+=</operator> <name>g1</name></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{<expr><name>g</name> <operator>-</operator> <name>g1</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>g</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>g</name> <operator>-=</operator> <name>g1</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>it</name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr> )</condition><block>{
            <for>for<control>( <init><expr><name>j</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>char</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
    }</block></for>
    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><expr_stmt><expr><call><name>pr</name><argument_list>( <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
