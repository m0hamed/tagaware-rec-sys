<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12190533.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function_decl><type><name>bool</name></type> <name>isEquivalent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>equal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf2</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s\n%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>isEquivalent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>equal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf2</name></decl></parameter>)</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><name>sf1</name> <operator>-</operator> <name>inc1</name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>s1</name><index>[<expr><name>inc1</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s2</name><index>[<expr><name>inc2</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>

	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isEquivalent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>inc1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inc2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf2</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><call><name>equal</name><argument_list>(<argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>inc2</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
	<else>else <block>{
		<if>if <condition>(<expr><operator>(</operator><name>sf1</name> <operator>-</operator> <name>inc1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><operator>(</operator><name>sf1</name> <operator>+</operator> <name>inc1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><operator>(</operator><name>sf2</name> <operator>+</operator> <name>inc2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>isEquivalent</name><argument_list>(<argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>m1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inc2</name></expr></argument>, <argument><expr><name>m2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isEquivalent</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isEquivalent</name><argument_list>(<argument><expr><name>inc1</name></expr></argument>, <argument><expr><name>m1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isEquivalent</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>inc2</name></expr></argument>, <argument><expr><name>m2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
		<else>else
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
	}</block></else></if>
}</block></function>
</unit>
