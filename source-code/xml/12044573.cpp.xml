<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12044573.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; (n); i++)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">140</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>dotN</name></decl>, <decl><type ref="prev"/><name>dotP</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>dotP</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><block>{<expr><name>x</name></expr>, <expr><name>a</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>dotN</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><block>{<expr><operator>-</operator><name>x</name></expr>, <expr><name>a</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>dotP</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dotP</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>dotN</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>dotN</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">// por derecha</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>cnd</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>cnd</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>p</name> <operator>==</operator> <call><name><name>dotP</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>dotP</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if<condition>(<expr><name>q</name> <operator>==</operator> <call><name><name>dotN</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>dotN</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>cnd</name> <operator>=</operator> <operator>!</operator><name>cnd</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnd</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name> <operator>=</operator> <name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>cnd</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>p</name> <operator>==</operator> <call><name><name>dotP</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>dotP</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <if>if<condition>(<expr><name>q</name> <operator>==</operator> <call><name><name>dotN</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>dotN</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>cnd</name> <operator>=</operator> <operator>!</operator><name>cnd</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
