<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12199362.cpp"><comment type="line">//Language: GNU C++</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESP</name></cpp:macro> <cpp:value>1e-11</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>kai</name><argument_list>(<argument><expr><literal type="number">200005</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>inv</name><argument_list>(<argument><expr><literal type="number">200005</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>res</name> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name><name>kai</name><index>[<expr><name>a</name><operator>+</operator><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>inv</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>kai</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>kai</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>kai</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>kai</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>kai</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>kai</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>kai</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>kai</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>black</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>black</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>black</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>black</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>black</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><call><name><name>black</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>black</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>comb</name><argument_list>(<argument><expr><name><name>black</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>black</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>temp</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name>temp</name><operator>--</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>black</name><index>[<expr><name>temp</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;=</operator><name><name>black</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>minus</name> <init>= <expr><name><name>dp</name><index>[<expr><name>temp</name></expr>]</index></name><operator>*</operator><call><name>comb</name><argument_list>(<argument><expr><name><name>black</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>black</name><index>[<expr><name>temp</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>black</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>black</name><index>[<expr><name>temp</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>minus</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>minus</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><call><name><name>black</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
