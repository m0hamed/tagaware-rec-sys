<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12105031.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>begin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e</name></cpp:macro> <cpp:value>end</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt><decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>q</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
	<block>{
	    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>ss</name><init>=<expr><call><name>lb</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>e</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>ff</name><init>=<expr><call><name>ub</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>e</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>ss</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>ff</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">26</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>ss</name><init>=<expr><call><name>lb</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>e</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>ff</name><init>=<expr><call><name>ub</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>e</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>b</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>ss</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ff</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
				<block>{
					<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block></then></if></elseif></if>
	}</block></while>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">27</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>=</operator><call><name>char</name><argument_list>(<argument><expr><literal type="char">'a'</literal><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>s</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
