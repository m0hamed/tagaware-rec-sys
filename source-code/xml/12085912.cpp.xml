<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12085912.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUG</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debug.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXPECT</name><parameter_list>(<parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_IO_TIE</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function type="operator"><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>istream</name> <modifier>&amp;</modifier></type>
<name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type> <name>fin</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>pr</name></decl></parameter> )</parameter_list>
<block>{ <expr_stmt><expr><name>fin</name> <operator>&gt;&gt;</operator> <name><name>pr</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>pr</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>fin</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>istream</name> <modifier>&amp;</modifier></type>
<name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type> <name>fin</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt; <argument><expr><name>T0</name></expr></argument>, <argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>t</name></decl></parameter> )</parameter_list>
<block>{ <expr_stmt><expr><name>fin</name> <operator>&gt;&gt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>fin</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>istream</name> <modifier>&amp;</modifier></type>
<name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type> <name>fin</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter> )</parameter_list> <block>{
<for>for<control>( <init><expr><name>auto</name> <operator>&amp;</operator> <name>u</name><operator>:</operator> <name>a</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>fin</name> <operator>&gt;&gt;</operator> <name>u</name></expr>;</expr_stmt></block></for> <return>return <expr><name>fin</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>n</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>istream</name> <modifier>&amp;</modifier></type>
<name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type> <name>fin</name></decl></parameter>, <parameter><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>n</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter> )</parameter_list> <block>{
<for>for<control>( <init><expr><name>auto</name> <operator>&amp;</operator> <name>u</name><operator>:</operator> <name>a</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>fin</name> <operator>&gt;&gt;</operator> <name>u</name></expr>;</expr_stmt></block></for> <return>return <expr><name>fin</name></expr>;</return> }</block></function>
<comment type="block">/* @@@ ----------------------------------- */</comment>

<function><type><name>string</name></type> <name>probE</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>

    <comment type="block">/* pad to ease life */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>pad</name> <init>= <expr><literal type="char">'+'</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>pad</name> <operator>+</operator> <name>str</name> <operator>+</operator> <name>pad</name></expr>;</expr_stmt>

    <comment type="block">/* mark end of contigous intervals of same letter */</comment>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>loc</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>str</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>loc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for>

    <expr_stmt><expr><name><name>loc</name><index>[<expr><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>size_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>op</name></expr>;</expr_stmt>

        <comment type="block">/* find the char at l - 1 and insert the loc */</comment>
        <decl_stmt><decl><type><name>auto</name></type> <name>first</name> <init>= <expr><call><name><name>loc</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <call><name><name>loc</name><operator>.</operator><name>emplace_hint</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name><name>first</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator> <name>first</name></expr>;</expr_stmt>

        <comment type="block">/* populate the count between left &amp; right */</comment>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>size_t</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>last</name> <init>= <expr><call><name><name>loc</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>++</operator> <name>last</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><name>first</name></expr></init></decl>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><operator>++</operator> <name>iter</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>iter</name><operator>-&gt;</operator><name>second</name></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>first</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>j</name></expr><operator>,</operator>
                <expr><name>j</name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt></block></for>

        <while>while<condition>(<expr><name>r</name> <operator>&lt;</operator> <name><name>last</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><operator>--</operator> <name>last</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><operator>++</operator> <name>last</name></expr>;</expr_stmt>

        <comment type="block">/* remove [first, last) */</comment>
        <decl_stmt><decl><type><name>auto</name></type> <name>iter</name> <init>= <expr><call><name><name>loc</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// auto iter = loc.upper_bound(l);</comment>

        <if>if<condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <comment type="block">/* increasing */</comment>
        <block>{
            <for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator> <name>j</name></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>loc</name><operator>.</operator><name>emplace_hint</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator> <name>iter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if></block></for>
        }</block></then>
        <else>else
            <block type="pseudo"><for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>--</operator> <name>j</name></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>loc</name><operator>.</operator><name>emplace_hint</name></name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator> <name>iter</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if></block></for></block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name>size_t</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>pr</name><range>: <expr><name>loc</name></expr></range></decl></init>)</control>
        <block type="pseudo"><for>for<control>(<init>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name><name>pr</name><operator>.</operator><name>first</name></name></expr>;</condition> <incr><expr><operator>++</operator> <name>l</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>pr</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></for></block></for>

    <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>str</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>str</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type> <name><name>argv</name> <index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>NO_IO_TIE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>probE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
