<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12510640.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>S</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">19</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>tree</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>tab</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>S</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>p</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>S</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>k</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>S</name></expr>]</index></name></decl>;</decl_stmt>
	
	<function><type><name>int</name></type> <name>query</name><parameter_list>()</parameter_list>
	<block>{
		<return>return <expr><name><name>tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return> 
	}</block></function>
	
	<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>kropka</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name>pos</name><operator>+=</operator><name>S</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tab</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>kropka</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>k</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>kropka</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name><name>tab</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>tab</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>k</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>k</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>k</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>pos</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>tab</name><index>[<expr><name>pos</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>pos</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		}</block></while>
		
	}</block></function>
	
	
</public>}</block>;</struct>

<decl_stmt><decl><type><name>tree</name></type> <name>t</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>a</name> <operator>==</operator> <literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>==</operator><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>query</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	for (int i = 0; i &lt; S; i++)</comment>
	<comment type="line">//		printf("%d ", t.p[i+S]);</comment>
		
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
