<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12060653.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>(t &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>(t &lt;&lt; 1) | 1</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Shit</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name>Shit</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function type="operator"><type><name>Shit</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><name>Shit</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>I</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<decl_stmt><decl><type><name>Shit</name></type> <name>ret</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ret</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>I</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<return>return <expr><name>ret</name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>Shit</name></expr></argument>, <argument><expr><name>Shit</name></expr></argument>&gt;</argument_list></name></type> <name>PSS</name>;</typedef>

<struct>struct <name>SegTree</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>state</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>lazy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Shit</name></type> <name>p</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>T</name><index>[<expr><name>maxn</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>PSS</name></type> <name>Distribute</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>Shit</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>Shit</name></type> <name>q</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>q</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>
		}</block></for>
	}</block></then> <else>else <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>q</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if>
	<return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>PushUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>+</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="line">//ä¹±åº</comment>
}</block></function>

<function><type><name>void</name></type> <name>PushDown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>PSS</name></type> <name>U</name> <init>= <expr><call><name>Distribute</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>U</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>U</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>Build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PushUp</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>Shit</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>p</name></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>r</name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition><then> <block>{
		<return>return <expr><call><name>Query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>left</name></expr>)</condition><then> <block>{
		<return>return <expr><call><name>Query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then></if></elseif> <else>else <block>{
		<return>return <expr><call><name>Query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Query</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>Update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>Shit</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
	<comment type="line">//k = 0 ä¹±åº, k = 1ååº, k = 2éåº</comment>
	<if>if<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>left</name> <operator>==</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>r</name> <operator>&lt;=</operator> <name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>left</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif> <else>else <block>{
		<decl_stmt><decl><type><name>PSS</name></type> <name>U</name> <init>= <expr><call><name>Distribute</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>T</name><index>[<expr><name>ls</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>, <argument><expr><name>ls</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>U</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name>rs</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rs</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>U</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><call><name>PushUp</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Output</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>PushDown</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Output</name><argument_list>(<argument><expr><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Output</name><argument_list>(<argument><expr><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<while>while<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		}</block></for>
	}</block></then></if></elseif> <else>else <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
			<while>while<condition>(<expr><name><name>T</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>p</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'a'</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
		}</block></for>
	}</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>k</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>Query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>Output</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
