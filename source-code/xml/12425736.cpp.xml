<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12425736.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">1000007</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="char">'+'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>sss</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>sss</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
 
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
 
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name>sum</name><operator>=</operator><ternary><condition><expr><name>sum</name><operator>&gt;=</operator><name>sss</name></expr>?</condition><then><expr><name>sum</name></expr></then><else>:<expr><name>sss</name></expr></else></ternary></expr>;</expr_stmt>
 
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function></unit>
