<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12062190.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fillchar</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a), (s), sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto it = (v).begin(); it != (v).end(); it++)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>num</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="line">//pair(char, cnt)</comment>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>	<comment type="line">//pair(start of range, char)</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<if>if <condition>(<expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</init> <condition><expr><name>Q</name><operator>--</operator></expr>;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<comment type="line">//ok now work on clearing between</comment>
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>jt</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>b</name> <operator>!=</operator> <name>N</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>jt</name> <operator>=</operator> <call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>jt</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>jt</name> <operator>=</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<while>while <condition>(<expr><name>it</name> <operator>!=</operator> <name>jt</name></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>cur</name> <init>= <expr><name>it</name><operator>++</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>num</name><index>[<expr><name><name>cur</name><operator>-&gt;</operator><name>second</name></name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <operator>(</operator><name>rt</name> <operator>-</operator> <name><name>cur</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>num</name> <operator>+</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="line">//insert them now</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>a</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>ct</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>ct</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>auto</name></type> <name>jt</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name>jt</name><operator>++</operator></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>jt</name> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><name><name>jt</name><operator>-&gt;</operator><name>first</name></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><name>rt</name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>diff</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><name>jt</name> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>jt</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
