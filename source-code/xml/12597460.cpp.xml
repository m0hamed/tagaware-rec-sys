<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12597460.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EP</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">// T : ë¸ëì ì ì²´ ê¸¸ì´</comment>
	<comment type="line">// S : ì²ì ë¤ì´ë¡ë ë°ë ê¸¸ì´</comment>
	<comment type="line">// q : qì´ ê²½ê³¼íë©´ q-1ì´ ë§í¼ ë¤ì´ë¡ë ë°ì</comment>
	<comment type="line">// count : ë°ë³µ ì¬ì íì</comment>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name> <operator>&gt;&gt;</operator> <name>S</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><name>S</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>double</name><argument_list>(<argument><expr><name>q</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name>q</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>reach</name> <init>= <expr><name>a</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name>floor</name><argument_list>(<argument><expr><name>reach</name> <operator>+</operator> <name>EP</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>T</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>reach</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>reach</name> <operator>=</operator> <name>a</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>count</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
