<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12334659.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>check_possible</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>X</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>Y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name>x1</name><operator>+</operator><name>x2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><name>y1</name><operator>+</operator><name>y2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name>x1</name><operator>+</operator><name>y2</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><name>x2</name><operator>+</operator><name>y1</name></expr></init></decl>;</decl_stmt>

    <comment type="line">//return ((a&lt;=X &amp;&amp; b&lt;=Y)||(c&lt;=X &amp;&amp; d&lt;=Y)||(d&lt;=X &amp;&amp; c&lt;=Y)||(b&lt;=X &amp;&amp; a&lt;=Y));</comment>
    <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x1</name><operator>+</operator><name>x2</name><operator>&lt;=</operator><name>X</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>Y</name><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><name>y1</name><operator>+</operator><name>y2</name><operator>)</operator><operator>&lt;=</operator><name>X</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>Y</name><operator>)</operator><operator>||</operator><operator>(</operator><name>x1</name><operator>+</operator><name>y2</name><operator>&lt;=</operator><name>X</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>Y</name><operator>)</operator><operator>||</operator><operator>(</operator><name>y1</name><operator>+</operator><name>x2</name><operator>&lt;=</operator><name>X</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>Y</name><operator>)</operator><operator>)</operator>
       <operator>||</operator>
       <operator>(</operator><operator>(</operator><name>x1</name><operator>+</operator><name>x2</name><operator>&lt;=</operator><name>Y</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>X</name><operator>)</operator><operator>||</operator><operator>(</operator><operator>(</operator><name>y1</name><operator>+</operator><name>y2</name><operator>)</operator><operator>&lt;=</operator><name>Y</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>X</name><operator>)</operator><operator>||</operator><operator>(</operator><name>x1</name><operator>+</operator><name>y2</name><operator>&lt;=</operator><name>Y</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>X</name><operator>)</operator><operator>||</operator><operator>(</operator><name>y1</name><operator>+</operator><name>x2</name><operator>&lt;=</operator><name>Y</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>X</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>X</name></decl>,<decl><type ref="prev"/><name>Y</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>,<decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>X</name><operator>&gt;&gt;</operator><name>Y</name><operator>&gt;&gt;</operator><name>x1</name><operator>&gt;&gt;</operator><name>y1</name><operator>&gt;&gt;</operator><name>x2</name><operator>&gt;&gt;</operator><name>y2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>check_possible</name><argument_list>(<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
