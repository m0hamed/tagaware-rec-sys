<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12490354.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type>  <name>M</name> <init>= <expr><literal type="number">200009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000000LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>prime</name> <init>= <expr><literal type="number">1044556773</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>V</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
<struct>struct <name>edges</name><block>{<public type="default"><decl_stmt><decl><type><name>LL</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt></public>}</block>;</struct>
<struct>struct <name>edge</name><block>{<public type="default"><decl_stmt><decl><type><name>LL</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt></public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr>struct <name>edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>G1</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>G2</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edges</name></expr></argument> &gt;</argument_list></name></type> <name>g</name></decl>;</decl_stmt>
<struct>struct <name>dot</name><block>{<public type="default"><decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>ways</name></decl>;</decl_stmt></public>}</block><decl><name><name>d1</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d2</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</struct>

<function><type><name>void</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>E</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>E</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>z</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>, <expr><name>z</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>dijkstra1</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <name>V</name> <operator>+</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>INF</name></expr><operator>,</operator> <expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>d1</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d1</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>P</name></type> <name>p</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>v</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>G1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>edge</name></type> <name>ed</name> <init>= <expr><name><name>G1</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr> )</condition><then> <block>{
                <expr_stmt><expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <operator>(</operator><name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>%</operator> <name>prime</name> <operator>+</operator> <name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>%</operator> <name>prime</name><operator>)</operator> <operator>%</operator> <name>prime</name></expr>;</expr_stmt>
            }</block></then> <elseif>else
            <if>if <condition>(<expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ways</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name><name>d1</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>dijkstra2</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><name>V</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</init> <condition><expr><name>i</name>  <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>INF</name></expr><operator>,</operator> <expr><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>d2</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d2</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>P</name></type> <name>p</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>v</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>G2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>edge</name></type> <name>ed</name> <init>= <expr><name><name>G2</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <operator>(</operator><name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>%</operator> <name>prime</name> <operator>+</operator> <name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>%</operator> <name>prime</name><operator>)</operator> <operator>%</operator> <name>prime</name></expr>;</expr_stmt>
            }</block></then> <elseif>else
            <if>if <condition>(<expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>ed</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>=</operator> <name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ways</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name><name>d2</name><index>[<expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>ed</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>qian</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<for>for <control>(<init><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"over"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//for (LL i = 1 ; i &lt; V + 1; i++) {cout &lt;&lt; "ï¿½ã£º" &lt;&lt; i &lt;&lt; "ï¿½ï¿½ï¿½ï¿½Ì¾ï¿½ï¿½ï¿½:" &lt;&lt; d1[i].x &lt;&lt; " ï¿½ï¿½ï¿½Â·ï¿½ï¿½: " &lt;&lt; d1[i].ways  &lt;&lt; endl; }</comment>

    <expr_stmt><expr><call><name>dijkstra2</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>sx</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>, <decl><type ref="prev"/><name>ex</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>d1</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>+</operator> <name><name>d2</name><index>[<expr><name>ex</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name>y</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>d1</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><name>ways</name><operator>%</operator><name>prime</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>d2</name><index>[<expr><name>ex</name></expr>]</index></name><operator>.</operator><name>ways</name><operator>%</operator><name>prime</name><operator>)</operator><operator>)</operator><operator>%</operator><name>prime</name> <operator>==</operator> <name><name>d1</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>ways</name> <operator>%</operator> <name>prime</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>z</name> <init>= <expr><name><name>d1</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>d1</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>d2</name><index>[<expr><name>ex</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>z</name> <operator>-</operator> <literal type="number">1</literal><operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name>z</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

  		  	 		 				 		 	   	 		  		</unit>
