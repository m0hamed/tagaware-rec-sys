<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12456057.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lch</name></cpp:macro> <cpp:value>(k &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rch</name></cpp:macro> <cpp:value>(k &lt;&lt; 1 | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mid</name></cpp:macro> <cpp:value>((l+r) &gt;&gt; 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>segment_tree</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>data</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>maxn</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lazy</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>maxn</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>push_up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>lch</name></expr>]</index></name><operator>+</operator><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>rch</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>push_down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>lch</name></expr>]</index></name><operator>=</operator><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>rch</name></expr>]</index></name><operator>=</operator><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>lch</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>w</name><operator>-</operator><operator>(</operator><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>*</operator><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>rch</name></expr>]</index></name><operator>=</operator>   <operator>(</operator><name>w</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>v</name></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>lch</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rch</name></expr></argument>, <argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>push_up</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>query</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>lch</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>query</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>rch</name></expr></argument>, <argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>res</name></expr>;</return> 
	}</block></function>
</public>}</block><decl><name>solver</name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>solver</name><operator>.</operator><name>lazy</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</init> <condition><expr><name>q</name><operator>--</operator> <operator>&amp;&amp;</operator> <call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control> <block>{
		<expr_stmt><expr><name>cur</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>z</name></expr>)</condition><then> <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>num</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>num</name><operator>=</operator><call><name><name>solver</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				<expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>num</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>num</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>num</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>num</name><operator>=</operator><call><name><name>solver</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				
				<expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>								
				<if>if<condition>(<expr><name>num</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>cur</name><operator>+</operator><name>num</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name><name>solver</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if></block></for></block></for>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
		 		 		 	   	    				  	 			</unit>
