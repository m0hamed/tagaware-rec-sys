<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12411298.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/*
*Sourav Sen Tonmoy
*University of Dhaka
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=0; i&lt;n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=1; i&lt;=n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((n).begin())i =(n).begin();i!=(n).end();i++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,y,sizeof(x));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uu</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d", &amp;x, &amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdiii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d %d", &amp;x, &amp;y, &amp;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d %I64d", &amp;x, &amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdlll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%I64d %I64d %I64d", &amp;x, &amp;y, &amp;z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sds</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d\n", x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfiii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d %d\n", x, y, z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%I64d\n", x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pfll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%I64d %I64d\n", x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pflll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%I64d %I64d %I64d\n", x, y, z)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro> <cpp:value>printf("ok\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>setBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>N</name><operator>=</operator><name>N</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>resetBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>N</name><operator>=</operator> <name>N</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>checkBit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call>(<name>bool</name>)<argument_list>(<argument><expr><name>N</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<comment type="line">//int kx[] = {+2, +1, -1, -2, -2, -1, +1, +2};</comment>
<comment type="line">//int ky[] = {+1, +2, +2, +1, -1, -2, -2, -1}; //Knight Direction</comment>
<comment type="line">//int fx[] = {+0, +0, +1, -1, -1, +1, -1, +1};</comment>
<comment type="line">//int fy[] = {-1, +1, +0, +0, +1, +1, -1, -1}; //Four &amp; Eight Direction</comment>


<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>kk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name><name>mapp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//    freopen("in.txt","r",stdin);</comment>
<comment type="line">//    freopen("out.txt","w",stdout);</comment>

    <decl_stmt><decl><type><name>LL</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0ll</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sdll</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>kk</name> <operator>=</operator> <name>k</name><operator>*</operator><name>k</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>sdl</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>temp</name><operator>%</operator><name>kk</name> <operator>==</operator> <literal type="number">0ll</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>temp</name><operator>/</operator><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>temp</name><operator>/</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name><name>mapp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mapp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>temp</name><operator>%</operator><name>k</name> <operator>==</operator> <literal type="number">0ll</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>temp</name><operator>/</operator><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>temp</name><operator>/</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt></block></else></if>
        }</block></then></if>

        <if>if<condition>(<expr><name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>mapp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>temp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block>
    <expr_stmt><expr><call><name>pfl</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
