<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12152475.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//Author : Utkarsh $axena</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fre</name></cpp:macro> 	<cpp:value>freopen("0.in","r",stdin),freopen("0.out","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;0?(x):-(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lld</name></cpp:macro> <cpp:value>signed long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpa</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scan</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scanll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",x)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>tree</name><index>[<expr><literal type="number">28</literal></expr>]</index><index>[<expr><literal type="number">100000</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lazy</name><index>[<expr><literal type="number">28</literal></expr>]</index><index>[<expr><literal type="number">100000</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>lld</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>si</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sj</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>qi</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>qj</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>si</name><operator>==</operator><name>qi</name> <operator>and</operator> <name>sj</name><operator>==</operator><name>qj</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>si</name><operator>+</operator><name>sj</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><ternary><condition><expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>qj</name><operator>-</operator><name>qi</name><operator>+</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>qj</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>qj</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>qi</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sj</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>qj</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>lld</name></type> <name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>t1</name><operator>=</operator><call><name>query</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t2</name><operator>=</operator><call><name>query</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sj</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>qj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>t1</name><operator>+</operator><name>t2</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</return>
	}</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>si</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>sj</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>qi</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>qj</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>laz</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>qi</name><operator>&gt;</operator><name>qj</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<comment type="line">//cerr&lt;&lt;t&lt;&lt;' '&lt;&lt;i&lt;&lt;' '&lt;&lt;si&lt;&lt;' '&lt;&lt;sj&lt;&lt;'\t'&lt;&lt;qi&lt;&lt;' '&lt;&lt;qj&lt;&lt;"\t\t"&lt;&lt;q&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><name>qi</name><operator>==</operator><literal type="number">0</literal> <operator>and</operator> <name>qj</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<comment type="line">//just update</comment>
		<if>if<condition>(<expr><name>laz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>laz</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>sj</name><operator>-</operator><name>si</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>si</name><operator>==</operator><name>qi</name> <operator>and</operator> <name>sj</name><operator>==</operator><name>qj</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>q</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>sj</name><operator>-</operator><name>si</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>si</name><operator>+</operator><name>sj</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>qj</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>laz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>laz</name><operator>=</operator><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>qj</name></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sj</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>qi</name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>laz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>laz</name><operator>=</operator><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sj</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>qj</name></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else
	<block>{
		<if>if<condition>(<expr><name>laz</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>laz</name><operator>=</operator><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>si</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>qi</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sj</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>qj</name></expr></argument>,<argument><expr><name>laz</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><comment type="line">//broken lazy[t]</comment>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>+</operator><name><name>tree</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//fre;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name><operator>&gt;&gt;</operator><name>Q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>S</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<comment type="block">/*for(int i=1;i&lt;=N;++i)
	{
		for(int j=1;j&lt;=26;++j)
		{
			if(query(j,1,1,N,i,i))
			{
				cout&lt;&lt;(char)('a'+j-1);
				break;
			}
		}
	}*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>Q</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scan</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//cerr&lt;&lt;"\n\n\n\n\n\n\n";</comment>
		<comment type="line">//cerr&lt;&lt;L&lt;&lt;' '&lt;&lt;R&lt;&lt;' '&lt;&lt;K&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>K</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>L</name><operator>+</operator><name>done</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>done</name> <operator>+=</operator> <call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="line">//cerr&lt;&lt;"\n\n\n\n\n\n\n";</comment>
				<comment type="line">//cerr&lt;&lt;start&lt;&lt;' '&lt;&lt;L+done-1&lt;&lt;endl;</comment>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>L</name><operator>+</operator><name>done</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>R</name><operator>-</operator><name>done</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>done</name> <operator>+=</operator> <call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>R</name><operator>-</operator><name>done</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>end</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'a'</literal><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
	}</block></for>
}</block></function>











</unit>
