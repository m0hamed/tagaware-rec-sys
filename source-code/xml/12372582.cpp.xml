<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12372582.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>high</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mark</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cut</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e12</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>S</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>y</name> <range>: <expr><name><name>v</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>y</name><operator>.</operator><name>S</name></name> <operator>&lt;</operator> <name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>y</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></block></for>
	}</block></while>
}</block></function>

<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>mark</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>high</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>F</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>high</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>==</operator> <name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>cut</name><index>[<expr><name><name>x</name><operator>.</operator><name>S</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>high</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>high</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>high</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>S</name></name> <operator>!=</operator> <name>in</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>high</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>high</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if></block></for>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>s</name><operator>--</operator></expr><operator>,</operator> <expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>--</operator></expr><operator>,</operator> <expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><block>{<expr><name>y</name></expr>, <expr><name>w</name></expr>}</block></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>w</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><operator>::</operator><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name><operator>::</operator><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr><operator>,</operator> <expr><name><operator>::</operator><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><block>{<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>g</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><block>{<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>cut</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
