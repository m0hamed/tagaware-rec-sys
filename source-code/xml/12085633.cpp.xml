<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12085633.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name></cpp:macro> <cpp:value>100009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>Max</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lazy</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>Max</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>Max</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>build</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>( <expr><name>l</name> <operator>==</operator> <name>r</name></expr> )</condition><then><block>{
		<if>if<condition>( <expr><name><name>s</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <call><name>char</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator> <name>l</name> <operator>+</operator> <name>r</name> <operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>shift</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>mid</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	
	<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator>	<name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator>	<name>c</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>mid</name><operator>)</operator> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>upd</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter> ,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list><block>{
	
	<if>if<condition>( <expr><name>ll</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>rr</name></expr> )</condition><then><block>{
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name>z</name></expr>;</expr_stmt>
		<return>return;</return>	
	}</block></then></if>
	<if>if<condition>( <expr><name>l</name> <operator>&gt;</operator> <name>rr</name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <name>ll</name></expr> )</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>node</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name> <operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>l</name></expr></argument> , <argument><expr><name>mid</name></expr></argument> ,<argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name></expr></argument> ,<argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>	
}</block></function>
<function><type><name>int</name></type> <name>find</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	
	<if>if<condition>( <expr><name>ll</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>rr</name></expr>  )</condition><then><block>{
		<return>return <expr><name><name>arr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>;</return>	
	}</block></then></if>
	<if>if<condition>( <expr><name>l</name> <operator>&gt;</operator> <name>rr</name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <name>ll</name></expr> )</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		
	<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>node</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator> <name>l</name> <operator>+</operator> <name>r</name> <operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	
	<return>return <expr><operator>(</operator> <call><name>find</name><argument_list>( <argument><expr><name>l</name></expr></argument> , <argument><expr><name>mid</name></expr></argument> , <argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal></expr></argument> , <argument><expr><name>ll</name></expr></argument> , <argument><expr><name>rr</name></expr></argument> , <argument><expr><name>v</name></expr></argument> )</argument_list></call> <operator>+</operator>  <call><name>find</name><argument_list>( <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name></expr></argument> , <argument><expr><name>node</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>ll</name></expr></argument> , <argument><expr><name>rr</name></expr></argument> , <argument><expr><name>v</name></expr></argument> )</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument> ,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>lazy</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lazy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		
		<if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then><block>{
			
			<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>( <expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>	
			}</block></for>
			
		}</block></then>
		<else>else<block>{
			<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{
				<if>if<condition>( <expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
					<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>	
		}</block></else></if>
	}</block></for>
	
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%c"</literal></expr></argument> ,<argument><expr><call><name>char</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></for>	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
