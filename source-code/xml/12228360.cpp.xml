<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12228360.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>57</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>400007</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>sum</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>two</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name> <parameter_list>( )</parameter_list>
<block>{
    <expr_stmt><expr><name><name>two</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name><name>two</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>two</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>two</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>

<decl_stmt><decl><type><name>PII</name></type> <name><name>p</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>( )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>( <expr><call><name>~<name>scanf</name></name> <argument_list>( <argument><expr><literal type="string">"%d%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>q</name></expr></argument> )</argument_list></call></expr> )</condition>
    <block>{
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while <condition>( <expr><name>q</name><operator>--</operator></expr> )</condition>
        <block>{
           <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>l</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>r</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><name>l</name> <operator>-=</operator> <name><name>sum</name><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
           <expr_stmt><expr><name>r</name> <operator>-=</operator> <name><name>sum</name><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
           <while>while <condition>( <expr><name>temp</name> <operator>&lt;</operator> <name>h</name></expr> )</condition>
           <block>{
               <expr_stmt><expr><name>l</name> <operator>=</operator> <name>l</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
               <expr_stmt><expr><name>temp</name><operator>++</operator></expr>;</expr_stmt>
           }</block></while>
           <if>if <condition>( <expr><name>f</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name> <argument_list>( <argument><expr><name>l</name></expr></argument> , <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
           <else>else
           <block>{
               <if>if <condition>( <expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
               <if>if <condition>( <expr><name>r</name> <operator>&lt;</operator> <name><name>two</name><index>[<expr><name>h</name></expr>]</index></name></expr> )</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name> <argument_list>( <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name><name>two</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
           }</block></else></if>
        }</block></while>
        <expr_stmt><expr><call><name>sort</name> <argument_list>( <argument><expr><name>p</name></expr></argument> , <argument><expr><name>p</name><operator>+</operator><name>cnt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; p[0].first &lt;&lt; " " &lt;&lt; p[0].second &lt;&lt; endl;</comment>
        <decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>loc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block>{
            <if>if <condition>( <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>loc</name></expr> )</condition><then>
            <block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name>loc</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>loc</name> <operator>=</operator> <call><name>max</name> <argument_list>( <argument><expr><name>loc</name></expr></argument> , <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>( <expr><name><name>two</name><index>[<expr><name>h</name></expr>]</index></name> <operator>&gt;=</operator> <name>loc</name></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>loc</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>two</name><index>[<expr><name>h</name></expr>]</index></name> <operator>-</operator> <name>loc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="line">//cout &lt;&lt; "YES : " &lt;&lt; t &lt;&lt; endl;</comment>

        <if>if <condition>( <expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>( <expr><name>t</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"%I64d\n"</literal></expr></argument> , <argument><expr><name>ans</name> <operator>+</operator> <name><name>sum</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function>
</unit>
