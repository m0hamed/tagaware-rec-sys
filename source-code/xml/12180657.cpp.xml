<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12180657.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<function><type><name>double</name></type> <name>cosine</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{
    <return>return <expr><call><name>sqrt</name><argument_list>( <argument><expr><name>a</name> <operator>*</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>a</name> <operator>*</operator> <name>b</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>double</name></type> <name>heron</name> <parameter_list>( <parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter> )</parameter_list><block>{
    <decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator> <name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>c</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sqrt</name> <argument_list>( <argument><expr><name>p</name> <operator>*</operator> <operator>(</operator> <name>p</name> <operator>-</operator> <name>a</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>p</name> <operator>-</operator> <name>b</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>p</name> <operator>-</operator> <name>c</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>s3</name></decl>, <decl><type ref="prev"/><name>s4</name></decl>, <decl><type ref="prev"/><name>s5</name></decl>, <decl><type ref="prev"/><name>s6</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s4</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s5</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>,<decl><type ref="prev"/><name>C</name></decl>,<decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>cosine</name><argument_list>( <argument><expr><name>s2</name></expr></argument>,<argument><expr><name>s3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>cosine</name><argument_list>( <argument><expr><name>s4</name></expr></argument>,<argument><expr><name>s5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>cosine</name><argument_list>( <argument><expr><name>s6</name></expr></argument>,<argument><expr><name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>S</name> <operator>=</operator> <call><name>heron</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>,<argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator> <name>s2</name> <operator>*</operator> <name>s3</name> <operator>+</operator> <name>s4</name> <operator>*</operator> <name>s5</name> <operator>+</operator> <name>s6</name> <operator>*</operator> <name>s1</name> <operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>ans</name> <init>= <expr><call><name>long</name><argument_list>( <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>S</name> <operator>/</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I32d"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
