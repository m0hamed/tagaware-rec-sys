<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12444428.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf%lf%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>v1</name> <init>= <expr><operator>(</operator><name>q</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>q</name></expr></init></decl>, <decl><type ref="prev"/><name>v2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name> <operator>-</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">0.000001</literal></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>T</name> <init>= <expr><name>s</name> <operator>/</operator> <operator>(</operator><name>v2</name> <operator>-</operator> <name>v1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
<comment type="line">//        printf("%f\n", T);</comment>
        <if>if<condition>(<expr><name>t</name> <operator>-</operator> <name>T</name> <operator>*</operator> <name>v2</name> <operator>&gt;</operator> <literal type="number">0.000001</literal></expr>)</condition><then>
        <block>{
<comment type="line">//            printf("!%f\n", t - T * v2);</comment>
            <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>v1</name> <operator>*</operator> <name>T</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <break>break;</break>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return  <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
