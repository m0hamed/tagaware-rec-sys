<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12174068.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FORN</name><parameter_list>( <parameter><type><name>a</name></type></parameter> , <parameter><type><name>b</name></type></parameter> , <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for ( int a = b ; a &lt;= c ; ++ a )</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FORNBACK</name><parameter_list>( <parameter><type><name>a</name></type></parameter> , <parameter><type><name>b</name></type></parameter> , <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for ( int a = b ; a &gt;= c ; -- a )</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>uz</name> <index>[ <expr><literal type="number">7</literal></expr> ]</index></name></decl> ;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>b1</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a2</name></decl>,<decl><type ref="prev"/><name>b2</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a3</name></decl>,<decl><type ref="prev"/><name>b3</name></decl> ;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>back</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> )</parameter_list>
<block>{
    <if>if <condition>( <expr><name>k</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><then><block>{
        <if>if <condition>( <expr><name>a1</name> <operator>&gt;=</operator> <name>a2</name> <operator>+</operator> <name>a3</name></expr> )</condition><then><block>{
            <if>if <condition>( <expr><name>b1</name> <operator>&gt;=</operator> <name>b2</name> <operator>and</operator> <name>b1</name> <operator>&gt;=</operator> <name>b3</name></expr> )</condition><then>
            <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>( <expr><name>a1</name> <operator>&gt;=</operator> <name>a2</name> <operator>and</operator> <name>a1</name> <operator>&gt;=</operator> <name>a3</name></expr> )</condition><then><block>{
            <if>if <condition>( <expr><name>b1</name> <operator>&gt;=</operator> <name>b1</name> <operator>+</operator> <name>b3</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name> <argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <return>return ;</return>
    }</block></then></if>
    <macro><name>FORN</name> <argument_list>( <argument>i</argument> , <argument><literal type="number">1</literal></argument> , <argument><literal type="number">3</literal></argument> )</argument_list></macro>
    <block>{
        <if>if <condition>( <expr><name><name>uz</name> <index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
        <expr_stmt><expr><name><name>uz</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a1</name></expr></argument> , <argument><expr><name>b1</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a2</name></expr></argument> , <argument><expr><name>b2</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a3</name></expr></argument> , <argument><expr><name>b3</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>back</name> <argument_list>( <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

        <expr_stmt><expr><name><name>uz</name> <index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
        <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a1</name></expr></argument> , <argument><expr><name>b1</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a2</name></expr></argument> , <argument><expr><name>b2</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a3</name></expr></argument> , <argument><expr><name>b3</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name>back</name> <argument_list>( <argument><expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name> <operator>::</operator> <name>sync_with_stdio</name></name> <argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

    <comment type="line">//freopen( "input" , "r" , stdin ) ;</comment>
    <comment type="line">//freopen( "output" , "w" , stdout ) ;</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a1</name> <operator>&gt;&gt;</operator> <name>b1</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a2</name> <operator>&gt;&gt;</operator> <name>b2</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a3</name> <operator>&gt;&gt;</operator> <name>b3</name></expr> ;</expr_stmt>
    <if>if <condition>( <expr><name>a1</name> <operator>*</operator> <name>b1</name> <operator>&lt;</operator> <name>a2</name> <operator>*</operator> <name>b2</name> <operator>+</operator> <name>a3</name> <operator>*</operator> <name>b3</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr> ;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr> ;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>back</name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>  ;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
