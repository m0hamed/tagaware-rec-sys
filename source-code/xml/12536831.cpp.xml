<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12536831.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//Defines</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIRST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOVE_FIRST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).erase((a).begin())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REMOVE_LAST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).erase(--(a).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LAST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(--(a).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(typeof((a).begin()) it = (a).begin(); it != (a).end(); it++ ) printf("%d ", *it);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>t.begin(),t.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (typeof(t.begin()) i=t.begin(); i!=t.end(); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(a);(i)&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(a); (i)&gt;=(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=0;(i)&lt;(n);++(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=1;(i)&lt;=(n);++(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=n; (i)&gt;=0; --(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #var &lt;&lt; " = " &lt;&lt; var &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pint</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vint</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UI</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen( (name), "r", stdin);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;(n)&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIT</name><parameter_list>(<parameter><type><name>message</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cout&lt;&lt;(message); exit(0);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0)</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>scan</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><while>while <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition> <block>{<expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></while>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>scan</name><parameter_list>(<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>n</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><while>while <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">32</literal></expr>)</condition> <block>{<expr_stmt><expr><name>n</name><operator>=</operator><name>n</name><operator>*</operator><literal type="number">10LL</literal> <operator>+</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getc</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></while>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>10000000000000000LL</cpp:value></cpp:define>
<comment type="line">//Code starts here</comment>


<function><type><name>void</name></type> <name>shortest_path</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>dist</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>G</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>cmp</name> <init>= 
        <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LL</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LL</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
        <block>{
            <if>if<condition>(<expr><name><name>dist</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name><name>dist</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>;</return></block></then></if>
            <return>return <expr><name><name>dist</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return>
        }</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>dist</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FORI</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><decltype>decltype<argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name></type> <name>Q</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>FORI</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>*</operator><call><name><name>Q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>Q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>e</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>e</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name>w</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dist</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>d</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pre</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>par</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>counter</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs_low</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>G</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pre</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <comment type="line">//cout &lt;&lt; v &lt;&lt; endl;</comment>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>h</name> <range>: <expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>h</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>h</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pre</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><call><name>dfs_low</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
	<comment type="line">//TEST("in.txt");</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>c</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator>  <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>G</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>Gt</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>input</name></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro>
	<block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Gt</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>

	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>src</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>dest</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>shortest_path</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name>G</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>shortest_path</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>dest</name></expr></argument>,<argument><expr><name>Gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//for(unsigned i = 1; i &lt; src.size(); i++)</comment>
    <comment type="line">//    cout &lt;&lt; i &lt;&lt; " : " &lt;&lt; src[i] &lt;&lt; endl;</comment>
    <comment type="line">//cout &lt;&lt; endl;</comment>
    <comment type="line">//for(unsigned i = 1; i &lt; dest.size(); i++)</comment>
    <comment type="line">//    cout &lt;&lt; i &lt;&lt; " : " &lt;&lt; dest[i] &lt;&lt; endl;</comment>
    <comment type="line">//cout &lt;&lt; endl;</comment>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>Gsp</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro>
	<block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>w</name> <init>= <expr><name><name>src</name><index>[<expr><name>a</name></expr>]</index></name><operator>+</operator><name><name>dest</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>w</name><operator>+</operator><name>c</name><operator>==</operator><name><name>src</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>Gsp</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Gsp</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
	}</block>
    <expr_stmt><expr><call><name><name>pre</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>low</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>par</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>counter</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dfs_low</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>Gsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//FORI(i,n)</comment>
    <comment type="line">//{</comment>
    <comment type="line">//    cout &lt;&lt; "i : " &lt;&lt; i &lt;&lt; ' ' &lt;&lt; low[i] &lt;&lt; ' ' &lt;&lt; pre[i] &lt;&lt; endl;</comment>
    <comment type="line">//}</comment>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>pint</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bridges</name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>w</name> <init>= <expr><name><name>src</name><index>[<expr><name>a</name></expr>]</index></name><operator>+</operator><name><name>dest</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">//cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name>w</name><operator>+</operator><name>c</name><operator>==</operator><name><name>src</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
        <block>{
           <if>if<condition>(<expr><name><name>low</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <name><name>pre</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>par</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <name>a</name></expr>)</condition><then>
               <block type="pseudo"><expr_stmt><expr><name><name>bridges</name><index>[<expr><call><name>MP</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
    }</block>

    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>w</name> <init>= <expr><name><name>src</name><index>[<expr><name>a</name></expr>]</index></name><operator>+</operator><name><name>dest</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">//cout &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name>w</name><operator>+</operator><name>c</name><operator>==</operator><name><name>src</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>bridges</name><index>[<expr><call><name>MP</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>newC</name> <init>= <expr><operator>(</operator><name><name>src</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><name>w</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>newC</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name>c</name><operator>-</operator><name>newC</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block>
	
}</block></function>

</unit>
