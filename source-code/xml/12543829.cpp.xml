<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12543829.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">500005</literal></expr></init></decl>;</decl_stmt>

 
 <decl_stmt><decl><type><name>int</name></type> <name><name>tm</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>char</name></type> <name><name>vv</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>q</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>depth</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>  <name><name>in</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>out</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>knum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>cal</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
 

<function><type><name>int</name></type> <name>dfs1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>cal</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name><name>vv</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>++</operator><name>knum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>in</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>knum</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>q</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{ 
		<expr_stmt><expr><name><name>depth</name><index>[<expr><name><name>q</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>cur</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>cur</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for> 
	<expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>knum</name></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>tm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name><name>tm</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>tm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>vv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//prepared for [depth,charactor];</comment>

 
	<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	if (depth[t1]&gt;=t2)</comment>
	<comment type="line">//	printf("Yes\n");</comment>
	<comment type="line">//	else</comment>
		<block>{
		 
		 
			<decl_stmt><decl><type><name>int</name></type> <name>line</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
	 
			 <decl_stmt><decl><type><name>int</name></type> <name>tf1</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>in</name><index>[<expr><name>t1</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator> <name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			 <decl_stmt><decl><type><name>int</name></type> <name>tf2</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>out</name><index>[<expr><name>t1</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator> <name><name>cal</name><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			 <if>if <condition>(<expr><operator>(</operator><name>tf2</name><operator>-</operator><name>tf1</name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
			 <block>{
				 <if>if <condition>(<expr><name>line</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
				 <block>{<expr_stmt><expr><name>line</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
				 <if>if <condition>(<expr><name>line</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				 <block>{<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if>
			 }</block></then></if>
				

			}</block></for>
			<if>if <condition>(<expr><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
			<block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>
		}</block>


	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
	
	
}</block></function>  </unit>
