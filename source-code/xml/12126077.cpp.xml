<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12126077.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>line</name><block>{<public type="default">
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>L</name><index>[<expr><name>M</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>line</name></name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name><name>struct</name> <name>line</name></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>l</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>l</name></name></expr>;</return>
}</block></function>

<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name><name>c1</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name><name>c1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <while>while <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition>
    <block>{
        <for>for <control>(<init><expr><name>cnt</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>f</name></expr>)</condition><then><block>{
                <if>if <condition>(<expr><name>l</name><operator>&gt;</operator><name><name>c1</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>L</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name>r</name><operator>&lt;</operator><name><name>c1</name><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><name>k</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>L</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><name><name>c1</name><index>[<expr><name>h</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>L</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>l</name><operator>=</operator><name>l</name><operator>*</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>L</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>r</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L</name><operator>+</operator><name>cnt</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>l</name><operator>&gt;</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <expr_stmt><expr><name>r</name><operator>=</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name><operator>=</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>l</name><operator>&gt;</operator><name><name>c1</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>cnt</name><operator>&amp;&amp;</operator><name>t</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>&lt;=</operator><name>r</name><operator>||</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>-</operator><literal type="number">1</literal><operator>==</operator><name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>-</operator><name>r</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
                <block>{<expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>++</operator></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <if>if <condition>(<expr><name><name>c1</name><index>[<expr><name>h</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>&gt;</operator><name>r</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>t</name><operator>+=</operator><name><name>c1</name><index>[<expr><name>h</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>r</name></expr><operator>,</operator><expr><name>ans</name><operator>=</operator><name><name>c1</name><index>[<expr><name>h</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>t</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
