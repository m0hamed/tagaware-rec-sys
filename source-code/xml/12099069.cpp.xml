<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12099069.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line" format="doxygen">/// PELE SAID I'M THE BEST IN THE WORLD</comment>
<comment type="line" format="doxygen">/// I SAY I'M THE BEST IN THE WORLD</comment>
<comment type="line" format="doxygen">/// THAT'S HOW YOU SHOULD DO IT.</comment>
<comment type="line" format="doxygen">/// NEVER LOOK AT AN OPPONENT WITH INFERIORITY!</comment>
<comment type="line" format="doxygen">/// John Best, Balon d'Or</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Nmax</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAL</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(1LL&lt;&lt;62)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>0.000000000001</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>put</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>st</name></decl>,<decl><type ref="prev"/><name>dr</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<struct>struct <name>inter</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st</name></decl>,<decl><type ref="prev"/><name>dr</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>inter</name></type> <name>A</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>st</name><operator>&lt;</operator><name><name>A</name><operator>.</operator><name>st</name></name></expr>;</return>
    }</block></function>
</public>}</block> <decl><name><name>bad</name><index>[<expr><name>Nmax</name></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>rasp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>niv</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>kkt</name></decl>;</decl_stmt>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
        <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"date.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"date.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>put</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>h</name><operator>+</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>put</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name><name>put</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></for>
    <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>niv</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name><operator>&gt;&gt;</operator><name>rasp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>niv</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>=</operator><name>y</name><operator>-</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>*=</operator><name><name>put</name><index>[<expr><name>h</name><operator>-</operator><name>niv</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name>l</name><operator>*</operator><name><name>put</name><index>[<expr><name>h</name><operator>-</operator><name>niv</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>rasp</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>st</name><operator>=</operator><name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name>dr</name><operator>=</operator><name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>dr</name> <operator>||</operator> <name>y</name><operator>&lt;</operator><name>st</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Game cheated!"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><name>st</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>dr</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>dr</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>st</name><operator>=</operator><name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>dr</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>st</name><operator>=</operator><name><name>put</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>dr</name><operator>=</operator><name><name>put</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>st</name><operator>&gt;</operator><name>dr</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Game cheated!"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>st</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>dr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>st</name><operator>=</operator><name><name>put</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>bad</name><index>[<expr><name>len</name></expr>]</index></name><operator>.</operator><name>dr</name><operator>=</operator><name><name>put</name><index>[<expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>bad</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>bad</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//for(i=1;i&lt;=len;++i) cout&lt;&lt;bad[i].st&lt;&lt;" "&lt;&lt;bad[i].dr&lt;&lt;"\n";</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>len</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>capat</name><init>=<expr><name><name>bad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>dr</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>bad</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name><operator>&gt;</operator><name>capat</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>st1</name><init>=<expr><name>capat</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>dr1</name><init>=<expr><name><name>bad</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>dr1</name><argument_list type="generic">&lt;<argument><expr><name>st</name> <operator>||</operator> <name>st1</name></expr></argument>&gt;</argument_list></name><name>dr</name><operator>)</operator></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>st1</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>st1</name></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>dr1</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>dr1</name></expr></argument>,<argument><expr><name>dr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//cout&lt;&lt;st1&lt;&lt;" "&lt;&lt;dr1&lt;&lt;"\n";</comment>
                    <if>if<condition>(<expr><name>st1</name><operator>&lt;=</operator><name>dr1</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>kkt</name><operator>=</operator><name>st1</name></expr>;</expr_stmt> <expr_stmt><expr><name>cnt</name><operator>+=</operator><name>dr1</name><operator>-</operator><name>st1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>capat</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>capat</name></expr></argument>,<argument><expr><name><name>bad</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>
    <if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Data not sufficient!"</literal></expr>;</expr_stmt></block></then>
    <elseif>else
        <if>if<condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>kkt</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Game cheated!"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
