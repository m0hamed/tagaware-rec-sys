<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12516138.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>warning</name> <name>(</name><name>disable</name> <name>:</name> <name>4996</name><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">501</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>o</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>o</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name><name>f</name><index>[<expr><name>o</name></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name><operator>&amp;&amp;</operator><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then>
                <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i</name><operator>&amp;&amp;</operator><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>k</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name>i</name> <operator>-</operator> <name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>k</name></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>+</operator> <name>k</name></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then>
                        <block>{
                            <if>if <condition>(<expr><name>x1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
                            <block>{
                                <if>if <condition>(<expr><name>x2</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><operator>!</operator><name>o</name></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x2</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
                                <if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><operator>!</operator><name>o</name></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
                            }</block></then></if>
                            <if>if <condition>(<expr><name>y1</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
                            <block>{
                                <if>if <condition>(<expr><name>x2</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><operator>!</operator><name>o</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x2</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
                                <if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><operator>!</operator><name>o</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
                            }</block></then></if>
                        }</block></then></if>
                    }</block></then></if></block></for></block></then></if></block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>o</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name><operator>&amp;&amp;</operator><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name>i</name> <operator>-</operator> <name>j</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>x1</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x1</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name>y1</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>n</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if></block></for>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>o</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name><operator>&amp;&amp;</operator><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if></block></for>
    }</block></else></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
