<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12513526.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>p</name></decl>,<name>ans</name>;</decl_stmt><comment type="line">//previous &amp; ans</comment>
</public>}</block></struct></type><name>node</name>;</typedef>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name> <name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name> <name>int</name></expr></argument>,<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>node</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><operator>(</operator><name>i</name><operator>-</operator><name>p</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>--</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>--</operator></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block type="pseudo"><expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
	<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	<comment type="line">//~ cout&lt;&lt;ans&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <comment type="line">//m queries</comment>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>index</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>--</operator></expr>;</expr_stmt><comment type="line">//converting to 0-based</comment>
		<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>=</operator><name><name>mp</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>=</operator><name><name>r</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>=</operator><name><name>mp</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><operator>(</operator><operator>*</operator><name>it</name><operator>-</operator><name>p</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>--</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else
		<block>{
			<expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>=</operator><name><name>mp</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name><operator>=</operator><name><name>r</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><name>index</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><operator>(</operator><operator>*</operator><name>it</name><operator>-</operator><name>index</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>--</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><operator>*</operator><name>it</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>p</name></name><operator>=</operator><name>p</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><operator>(</operator><name>index</name><operator>-</operator><name>p</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>--</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>r</name><operator>.</operator><name>ans</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>ans</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><name>index</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call><operator>=</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
