<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12545501.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>out</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>n</name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>&gt;=</operator> <name>m</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>N</name> <init>= <expr><operator>(</operator><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>||</operator> <name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><operator>(</operator><name>m</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <else>else <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>out</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>out</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>!</operator><call><name>out</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>out</name><argument_list>(<argument><expr><name>N</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>N</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>N</name></expr></init></decl>;</init> <condition><expr><name>k</name></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name> <operator>||</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name> <operator>||</operator> <name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y0</name> <init>= <expr><name>k</name> <operator>-</operator> <name>x0</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x0</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y0</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>x0</name><operator>--</operator></expr><operator>,</operator> <expr><name>y0</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <name>k</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>x1</name> <init>= <expr><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>y1</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y1</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>x1</name><operator>--</operator></expr><operator>,</operator> <expr><name>y1</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>y0</name></expr>]</index></name> <operator>^</operator> <name><name>a</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>_x0</name> <init>= <expr><name>x0</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>_y0</name> <init>= <expr><name>y0</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>_x1</name> <init>= <expr><name>x1</name> <operator>+</operator> <name><name>dx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>_y1</name> <init>= <expr><name>y1</name> <operator>+</operator> <name><name>dy</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>out</name><argument_list>(<argument><expr><name>_x0</name></expr></argument>, <argument><expr><name>_y0</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>out</name><argument_list>(<argument><expr><name>_x1</name></expr></argument>, <argument><expr><name>_y1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>y0</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>+=</operator> <name><name>g</name><index>[<expr><name>_y0</name></expr>]</index><index>[<expr><name>_y1</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>y0</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>%=</operator> <name>p</name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name> <operator>||</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name> <operator>||</operator> <name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
</unit>
