<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12239271.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100000</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>answer</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<function><type><name>LL</name></type> <name>bigmax</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>y</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>bigmin</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>cmpans</name><parameter_list>(<parameter><decl><type><name>answer</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>answer</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>x</name><operator>.</operator><name>h</name></name> <operator>!=</operator> <name><name>y</name><operator>.</operator><name>h</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>x</name><operator>.</operator><name>h</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>h</name></name></expr> </then><else>: <expr><name><name>x</name><operator>.</operator><name>a</name></name> <operator>&gt;</operator> <name><name>y</name><operator>.</operator><name>a</name></name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cross</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type><name>x</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>X</name></name> <operator>&gt;</operator> <name><name>y</name><operator>.</operator><name>Y</name></name> <operator>||</operator> <name><name>x</name><operator>.</operator><name>Y</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>X</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>common</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>x</name><operator>.</operator><name>X</name></name> <operator>=</operator> <call><name>bigmax</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>X</name></name></expr></argument>,<argument><expr><name><name>y</name><operator>.</operator><name>X</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>x</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <call><name>bigmin</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>Y</name></name></expr></argument>,<argument><expr><name><name>y</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>cover</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>x</name><operator>.</operator><name>Y</name></name> <operator>&gt;=</operator> <name><name>y</name><operator>.</operator><name>Y</name></name> <operator>&amp;&amp;</operator> <name><name>x</name><operator>.</operator><name>X</name></name> <operator>&lt;=</operator> <name><name>y</name><operator>.</operator><name>X</name></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>X</name></name> <operator>&gt;=</operator> <name><name>y</name><operator>.</operator><name>X</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>x</name><operator>.</operator><name>X</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>Y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name><name>x</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type><name><name>av</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>no</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>walk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cav</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>ans</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>ans</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>m</name></expr></argument>,<argument><expr><name>cmpans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>av</name><index>[<expr><name>cav</name> <operator>=</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>q</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>h</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>h</name> <operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name>q</name> <operator>&gt;</operator> <name>m</name> <operator>||</operator> <name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;</operator> <name>h</name></expr>)</condition><then><block>{
			<if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cav</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
			<continue>continue;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type><name>A</name> <init>= <expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init>;</init><condition><expr><name>q</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>q</name> <operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>cross</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
			<expr_stmt><expr><call><name>common</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cav</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><operator>!</operator><call><name>cross</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator> <name>cb</name></expr>]</index></name> <operator>=</operator> <name>A</name></expr><operator>,</operator><expr><call><name>common</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>cb</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><operator>!</operator><name>cb</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name>cav</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cb</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>cno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init>;</init><condition><expr><name>q</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>==</operator> <name>h</name> <operator>&amp;&amp;</operator> <name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><name>q</name> <operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>no</name><index>[<expr><operator>++</operator> <name>cno</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><operator>!</operator><name>cno</name></expr>)</condition><then><block>{
			<if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cav</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>no</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>no</name> <operator>+</operator> <name>cno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cno</name></expr>;</condition><incr><expr><name>i</name> <operator>=</operator> <name>j</name></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>cut</name> <init>= <expr><name><name>no</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>cno</name> <operator>&amp;&amp;</operator> <name><name>no</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;=</operator> <name><name>cut</name><operator>.</operator><name>Y</name></name></expr>;</condition><incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>cut</name><operator>.</operator><name>Y</name></name> <operator>=</operator> <call><name>bigmax</name><argument_list>(<argument><expr><name><name>cut</name><operator>.</operator><name>Y</name></name></expr></argument>,<argument><expr><name><name>no</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<for>for <control>(<init>;</init><condition><expr><name>r</name> <operator>&lt;=</operator> <name>cav</name> <operator>&amp;&amp;</operator> <name><name>av</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>&lt;</operator> <name><name>cut</name><operator>.</operator><name>X</name></name></expr>;</condition><incr><expr><name>r</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator> <name>cb</name></expr>]</index></name> <operator>=</operator> <name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
			<for>for <control>(<init>;</init><condition><expr><name>r</name> <operator>&lt;=</operator> <name>cav</name> <operator>&amp;&amp;</operator> <name><name>av</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>&lt;=</operator> <name><name>cut</name><operator>.</operator><name>Y</name></name></expr>;</condition><incr><expr><name>r</name> <operator>++</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><operator>!</operator><call><name>cover</name><argument_list>(<argument><expr><name>cut</name></expr></argument>,<argument><expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator> <name>cb</name></expr>]</index></name> <operator>=</operator> <name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr><operator>,</operator><expr><call><name>remove</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>cb</name></expr>]</index></name></expr></argument>,<argument><expr><name>cut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>cav</name> <operator>&amp;&amp;</operator> <call><name>cross</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>,<argument><expr><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<if>if <condition>(<expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;</operator> <name><name>cut</name><operator>.</operator><name>X</name></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator> <name>cb</name></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>X</name></expr></argument>,<argument><expr><name><name>cut</name><operator>.</operator><name>X</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>=</operator> <name><name>cut</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name>remove</name><argument_list>(<argument><expr><name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>,<argument><expr><name>cut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<for>for <control>(<init>;</init><condition><expr><name>r</name> <operator>&lt;=</operator> <name>cav</name></expr>;</condition><incr><expr><name>r</name> <operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator> <name>cb</name></expr>]</index></name> <operator>=</operator> <name><name>av</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><operator>!</operator><name>cb</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><name>cav</name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cb</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>cav</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>=</operator> <name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<if>if <condition>(<expr><name>cav</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>Y</name> <operator>-</operator> <name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>X</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><name><name>av</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>X</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name> <operator>&gt;&gt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&gt;&gt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&gt;&gt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>LL</name></type> <name>ck</name> <init>= <expr><call><name>walk</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>ck</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Game cheated!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>ck</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>ck</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ck</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
