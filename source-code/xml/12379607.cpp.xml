<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12379607.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>problem</name></cpp:macro> <cpp:value>"314E"</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxM</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>oo</name> <init>= <expr><literal type="number">1e12</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>ll</name></type> <name><name>l_N</name><index>[<expr><name>maxN</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name><name>i_N</name><index>[<expr><name>maxN</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name>int</name></type> <name><name>i_M</name><index>[<expr><name>maxM</name></expr>]</index></name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>li</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>U</name></decl>, <decl><type ref="prev"/><name>V</name></decl>;</decl_stmt>
<namespace>namespace <name>graph</name><block>{
    <struct>struct <name>EDGE</name><block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>W</name></decl>, <decl><type ref="prev"/><name>id</name></decl>, <decl><type ref="prev"/><name>type_edge</name></decl>;</decl_stmt>
        <constructor><name>EDGE</name><parameter_list>()</parameter_list><block>{}</block></constructor>
        <constructor><name>EDGE</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_W</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_type_edge</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>u</name><argument_list>(<argument><expr><name>_u</name></expr></argument>)</argument_list></call>, <call><name>v</name><argument_list>(<argument><expr><name>_v</name></expr></argument>)</argument_list></call>, <call><name>W</name><argument_list>(<argument><expr><name>_W</name></expr></argument>)</argument_list></call>, <call><name>id</name><argument_list>(<argument><expr><name>_id</name></expr></argument>)</argument_list></call>, <call><name>type_edge</name><argument_list>(<argument><expr><name>_type_edge</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    </public>}</block> <decl><name><name>edge</name><index>[<expr><name>maxM</name></expr>]</index></name></decl>;</struct>

    <decl_stmt><decl><type><name>int</name></type> <name>Cnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>l_N</name></type> <name>Lu</name></decl>, <decl><type ref="prev"/><name>Lv</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>low</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>visit</name></decl>, <decl><type ref="prev"/><name>pre_edge</name></decl>, <decl><type ref="prev"/><name>bridge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i_M</name></type> <name>mark</name></decl>, <decl><type ref="prev"/><name>on_dijkstra</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>EDGE</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>li</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>li</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>li</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>heap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>DFS_node</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>link</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EDGE</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>int</name></type> <name>get_adj_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>EDGE</name> <modifier>&amp;</modifier></type><name>E</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><ternary><condition><expr><operator>(</operator><name>u</name> <operator>!=</operator> <name><name>E</name><operator>.</operator><name>u</name></name><operator>)</operator></expr>?</condition><then> <expr><name><name>E</name><operator>.</operator><name>u</name></name></expr> </then><else>: <expr><name><name>E</name><operator>.</operator><name>v</name></name></expr></else></ternary></expr>;</return>
    }</block></function>
}</block></namespace>

<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>L</name></decl></parameter>)</parameter_list><block>{
    <using>using <namespace>namespace <name>graph</name>;</namespace></using>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>L</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>li</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>U</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>heap</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>li</name></type> <name>top_node</name> <init>= <expr><call><name><name>heap</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>top_node</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>leng</name> <init>= <expr><name><name>top_node</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>leng</name> <operator>!=</operator> <name><name>L</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>EDGE</name></type> <name>E</name> <init>= <expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>E</name><operator>.</operator><name>type_edge</name></name> <operator>!=</operator> <name>type</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_adj_node</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>L</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>L</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name>leng</name> <operator>+</operator> <name><name>E</name><operator>.</operator><name>W</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>L</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>leng</name> <operator>+</operator> <name><name>E</name><operator>.</operator><name>W</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>heap</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>li</name><argument_list>(<argument><expr><name><name>L</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
    <using>using <namespace>namespace <name>graph</name>;</namespace></using>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>P</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DFS_node</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>DFS_node</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>DFS_node</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>visit</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>num</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>Cnum</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>EDGE</name></type> <name>E</name> <init>= <expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>visit</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_adj_node</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name><name>E</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>++</operator> <operator>||</operator> <operator>!</operator><name><name>on_dijkstra</name><index>[<expr><name><name>E</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><operator>!</operator><name><name>P</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>pre_edge</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><operator>.</operator><name>id</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>P</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>DFS_node</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>num</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name><name>DFS_node</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>parent</name> <init>= <expr><name><name>P</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>parent</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>low</name><index>[<expr><name>parent</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>parent</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name><name>num</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>bridge</name><index>[<expr><name><name>pre_edge</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></else></if>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>U</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>W</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>W</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><operator>::</operator><name>edge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>graph</name><operator>::</operator><name>EDGE</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graph</name><operator>::</operator><name>link</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><call><name><name>graph</name><operator>::</operator><name>EDGE</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graph</name><operator>::</operator><name>link</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name><name>graph</name><operator>::</operator><name>EDGE</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>U</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>::</operator><name>Lu</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>graph</name><operator>::</operator><name>Lv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <using>using <namespace>namespace <name>graph</name>;</namespace></using>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>, <decl><type ref="prev"/><name>W</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>W</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>Lu</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>Lv</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>W</name> <operator>==</operator> <name><name>Lu</name><index>[<expr><name>V</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>on_dijkstra</name><index>[<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{
        <using>using <namespace>namespace <name>graph</name>;</namespace></using>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>, <decl><type ref="prev"/><name>W</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>W</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>Lu</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>Lv</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>(<expr><name><name>bridge</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></then></if>
                <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>Lu</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>Lv</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>W</name> <operator>-</operator> <name><name>Lu</name><index>[<expr><name>V</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>W</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></for>
    }</block>
}</block></function>
</unit>
