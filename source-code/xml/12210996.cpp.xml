<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12210996.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">200010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">2010</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>mul</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<comment type="line">//</comment>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>p</name><operator>%</operator><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>k</name> <init>=  <expr><name>p</name><operator>/</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><operator>(</operator><operator>-</operator><name>k</name><operator>*</operator><call><name>inverse</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ret</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><name>p</name></expr>;</expr_stmt></block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
     <expr_stmt><expr><name><name>mul</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>mul</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>mul</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>mul</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name>i</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>ll</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><name><name>mul</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><call><name>inverse</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>mul</name><index>[<expr><name>m</name></expr>]</index></name><operator>*</operator><name><name>mul</name><index>[<expr><name>n</name><operator>-</operator><name>m</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>node</name></type> <name><name>rect</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
     <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
     <elseif>else <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>x</name></name><operator>&amp;&amp;</operator><name><name>a</name><operator>.</operator><name>y</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></elseif></if>
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rect</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rect</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>rect</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rect</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>rect</name></expr></argument>,<argument><expr><name>rect</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>rect</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>comb</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>rect</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>rect</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>rect</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>rect</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>r</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><call><name>comb</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>y</name><operator>-</operator><name>r</name><operator>-</operator><name>c</name></expr></argument>,<argument><expr><name>x</name><operator>-</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>comb</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></while>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
