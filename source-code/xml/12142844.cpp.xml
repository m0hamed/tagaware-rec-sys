<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12142844.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>fuck</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>s</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</struct>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>fuck</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>fuck</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>x</name><operator>.</operator><name>a</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>a</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>)</condition>
	<block>{

		<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;&gt;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name>ans1</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr><operator>,</operator><expr><name>ans1</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><name>ans2</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>ans2</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr><operator>,</operator><expr><name>ans2</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>ans1</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>q</name></expr></argument>,<argument><expr><name>q</name><operator>+</operator><name>ans2</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>ans1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ans2</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>q</name><index>[<expr><name>ans2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>ans2</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ans1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
		<else>else
		<block>{
			<if>if<condition>(<expr><name>ans1</name> <operator>&gt;</operator> <name>ans2</name></expr>)</condition><then>
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>ans2</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt></block></for>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>ans2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt></block></for>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name>ans1</name> <operator>&lt;</operator> <name>ans2</name></expr>)</condition><then>
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>ans1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt></block></for>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>ans2</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&gt;=</operator> <name>ans2</name> <operator>-</operator> <name>ans1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt></block></for>
			}</block></then></if></elseif>
			<else>else
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>ans1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>;</expr_stmt></block></for>
			}</block></else></if>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
