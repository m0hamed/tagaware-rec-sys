<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12458596.cpp"><comment type="line">//Language: GNU C++11</comment>


  <comment type="line" format="doxygen">////////////////////////////////////////////////////////////////</comment>
 <comment type="line">//~~~~~~~~~~~~~~~ Sa1378 Platform Vesion 1.3.2 ~~~~~~~~~~~~~~~//</comment>
<comment type="line" format="doxygen">////////////////////////////////////////////////////////////////</comment>


<comment type="line">// Don't push me</comment>
	<comment type="line">// Cause I'm close to the edge</comment>
		<comment type="line">// I'm trying not to lose my head</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Sa1378</name></cpp:macro> <cpp:value>main()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chie</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " is " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(5001*1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;fixed&lt;&lt;setprecision((b))&lt;&lt;(a)&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sin(a*PI/180)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cos</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cos(a*PI/180)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IB</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>((ld)2*asin(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>((ll)1e9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>((ll)1e9+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIG_HSH</name></cpp:macro> <cpp:value>((ll)9999999900000001)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SML_HSH</name></cpp:macro> <cpp:value>((ll)100030001)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>sqr5</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>p_</name><init>=<expr><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>sqr5</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>tavan</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><call><name>tavan</name><argument_list>(<argument><expr><operator>(</operator><name>a</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>b</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>?</condition><then><expr><operator>(</operator><name>a</name><operator>)</operator></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>tavan</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>}</block></then></if> <expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>p</name> <operator>%</operator> <name>mod</name></expr>;</return>}</block></function>
<function><type><name>ld</name></type> <name>fib</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><call><name>tavan</name><argument_list>(<argument><expr><name>p_</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>tavan</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>-</operator><name>p_</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><operator>(</operator><name>sqr5</name><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>a</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>b</name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>a</name><operator>)</operator></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>a</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>b</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>b</name><operator>)</operator></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>a</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>b</name><operator>)</operator></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><operator>(</operator><name>x</name><operator>)</operator></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>%</operator><operator>(</operator><name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>chckmd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>%</operator><operator>(</operator><name>mod</name><operator>)</operator><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>  <specifier>inline</specifier> <type><name>void</name></type> <name>smx</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>  <specifier>inline</specifier> <type><name>void</name></type> <name>smn</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<comment type="line">//bool sortt(ll x,ll y){ return a[x] &lt; a[y]; }</comment>
<decl_stmt><decl><type><name>ifstream</name></type> <name>fin</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ofstream</name></type> <name>fout</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>prime</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pali</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mark</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>palind</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>tmp</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>tmp</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>v</name><index>[<expr><name>tmp</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>		
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>Sa1378</name>
<argument_list>{ 
    <argument><expr><name>IB</name>
    <name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr></argument>;
    for<argument><expr><operator>(</operator><name>int</name> <name>i</name><operator>=</operator><literal type="number">2</literal>;<name>i</name><operator>&lt;</operator><name>N</name>;<name>i</name><operator>++</operator><operator>)</operator>
    <block>{
    	<if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    	<expr_stmt><expr><block>{
    		<for>for<control>(<init><decl><type><name>int</name> <name>j</name>=<name>i</name><modifier>*</modifier>2</type></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
    			<block type="pseudo"><expr_stmt><expr><name><name>mark</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    		<name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></block></expr>;</expr_stmt></then></if>	
    	}</block>
    	<name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>prime</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>;	
    }</argument_list>
    for<argument_list>(<argument><expr><name>int</name> <name>i</name><operator>=</operator><literal type="number">1</literal></expr></argument>;<argument><expr><name>i</name><operator>&lt;</operator><name>N</name></expr></argument>;<argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list>
		<name><name>pali</name><index>[<expr><name>i</name></expr>]</index></name><init>=<expr><name><name>pali</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><call><name>palind</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>	
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>ld</name><operator>)</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>q</name><operator>&lt;=</operator><name>p</name><operator>*</operator><operator>(</operator><name>ld</name><operator>)</operator><name><name>pali</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>		
	
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Palindromic tree is better than splay tree"</literal></expr>;</expr_stmt>	
	<comment type="line">//cout&lt;&lt;pali[172]&lt;&lt;" "&lt;&lt;prime[172]&lt;&lt;endl;		</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</unit>
