<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12373255.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block" format="doxygen">/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro>         <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro>         <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>         <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>         <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>         <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>        <cpp:value>INT_MAX/3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>        <cpp:value>1000000007ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>         <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linf</name></cpp:macro>       <cpp:value>(1ll&lt;&lt;60)-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int I = (A); I &lt; (B); ++I)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>FOR(I,0,N)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((A).begin(), (A).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set0</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>memset(ar,0,sizeof ar)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsort</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setinf</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(ar,126,sizeof ar)</cpp:value></cpp:define>

<comment type="line">//cout &lt;&lt; fixed &lt;&lt; setprecision(20) &lt;&lt; p &lt;&lt; endl;</comment>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init> <condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>
    }</block></for> <return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>ret</name></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>modinverse</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">71</literal></expr>]</index><index>[<expr><literal type="number">71</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>vc</name><index>[<expr><literal type="number">71</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block>
        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        }</block>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>


    <comment type="line">// both left;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>l</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l+<literal type="number">1</literal>][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l+<literal type="number">1</literal>][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>l</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l+<literal type="number">1</literal>][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <if>if<condition>(<expr><name>fl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>go</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="line">// left right</comment>
    <expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[l][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <if>if<condition>(<expr><name>fl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>go</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="line">// both right</comment>
    <expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r-<literal type="number">1</literal>][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r-<literal type="number">1</literal>][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>r</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r-<literal type="number">1</literal>][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">0</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>r</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">2</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>r</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[r][<literal type="number">4</literal>].size()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>vc</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block>
    <if>if<condition>(<expr><name>fl</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>go</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>k</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>s</name> <operator>==</operator> <literal type="string">"&gt;"</literal> <operator>||</operator> <name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"="</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vc</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block>


    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>go</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
<comment type="block">/*
332211
*/</comment>
</unit>
