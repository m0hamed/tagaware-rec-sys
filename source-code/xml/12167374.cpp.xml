<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12167374.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits\stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(register int i = a, endi = b; i &lt;= endi; i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(register int j = a, endj = b; j &lt;= endj; j ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPk</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(register int k = a, endk = b; k &lt;= endk; k ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uREPi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = a, endi = b; i &gt;= endi; i --)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uREPj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int j = a, endj = b; j &gt;= endj; j --)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uREPk</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int k = a, endk = b; k &gt;= endk; k --)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pqueue</name></cpp:macro>      <cpp:value>priority_queue &lt;int, vector &lt;int&gt;, greater&lt;int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEW</name><parameter_list>(<parameter><type><name>Node</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(Node *) malloc (sizeof(Node))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>fprintf(stderr, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((a) &lt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>memset(a, b, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AA</name></cpp:macro>          <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BB</name></cpp:macro>          <cpp:value>second</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>in</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>out</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Read</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>k</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>QAQ</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>QAQ</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>QAQ</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
	<expr_stmt><expr><name>k</name> <operator>=</operator> <name>QAQ</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<if>if<condition>(<expr><operator>(</operator><name>QAQ</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name>QAQ</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if> <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>k</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>QAQ</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>}</block></while>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>Read</name><argument_list>(<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Read</name><argument_list>(<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Read</name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Read</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Read</name><argument_list>(<argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Read</name><argument_list>(<argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Pre</name><parameter_list>()</parameter_list><block>{
	
}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>ans</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list><block>{
	<if>if<condition>(<expr><name>a1</name> <operator>*</operator> <name>b1</name> <operator>&lt;</operator> <name>a2</name> <operator>*</operator> <name>b2</name> <operator>+</operator> <name>a3</name> <operator>*</operator> <name>b3</name></expr>)</condition><then> <block type="pseudo"><return>return ;</return></block></then></if>
	<if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	
	<if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Print</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name>ans</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>in</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Pre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Print</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>out</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
