<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12388584.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">200002</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MAX</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>before</name></decl>, <decl><type ref="prev"/><name>after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>K</name></decl>, <decl><type ref="prev"/><name><name>arr</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>overflow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>MAX</name> <operator>/</operator> <name>b</name> <operator>&lt;</operator> <name>a</name></expr> )</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>after</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>after</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>cur</name><operator>%</operator><name>K</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>before</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>cur</name><operator>/</operator><name>K</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>after</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>cur</name><operator>*</operator><name>K</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>before</name><index>[<expr><name>cur</name> <operator>/</operator> <name>K</name></expr>]</index></name> <operator>*</operator> <name><name>after</name><index>[<expr><name>cur</name> <operator>*</operator> <name>K</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>before</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
