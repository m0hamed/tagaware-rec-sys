<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12226660.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>art</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>(</operator><name>x1</name><operator>-</operator><name>y1</name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>x2</name><operator>-</operator><name>y2</name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>x1</name><operator>-</operator><name>y2</name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>x2</name><operator>-</operator><name>y1</name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr> ;</return></block></then></if>
   <return>return <expr><literal type="boolean">false</literal></expr> ;</return>	
}</block></function>
<function><type><name>string</name></type> <name>Gerald</name><parameter_list>()</parameter_list><block>{
	
	<if>if<condition>(<expr><operator>(</operator><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"NO"</literal></expr> ;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>||</operator><operator>(</operator><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"NO"</literal></expr> ;</return></block></then></if>
	 <decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl> , <decl><type ref="prev"/><name>r2</name><init>=<expr><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	 <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>art</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl> , <decl><type ref="prev"/><name>c2</name> <init>= <expr><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>art</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
	 <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>||</operator><call><name>check</name><argument_list>(<argument><expr><name>r2</name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>||</operator><call><name>check</name><argument_list>(<argument><expr><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>||</operator><call><name>check</name><argument_list>(<argument><expr><name><name>art</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>art</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"YES"</literal></expr> ;</return></block></then></if>
	 <return>return <expr><literal type="string">"NO"</literal></expr>;</return>
	  
	
	}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>art</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>Gerald</name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	
	
	
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
