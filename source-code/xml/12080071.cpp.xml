<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12080071.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:102400000,102400000"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strstream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>400005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>(2&lt;&lt;18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>((479LL &lt;&lt; 21) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>G</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>  <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFL</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID</name></cpp:macro> <cpp:value>((l + r)/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lx</name></cpp:macro> <cpp:value>(x&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rx</name></cpp:macro> <cpp:value>((x&lt;&lt;1)|1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>base2</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>base2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">22</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>base2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>base2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>_i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>_i</name><operator>&lt;=</operator><literal type="number">400000</literal></expr>;</condition><incr><expr><name>_i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>_i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>i</name></expr>)</condition><block>{
            <expr_stmt><expr><name>i</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>h</name><index>[<expr><name>_i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
    }</block></for>
}</block></function>
<function><type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tmp</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">20</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>tmp</name> <operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen("in.txt","r",stdin);</comment>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name><name>h</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><name><name>h</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>_t</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/</operator><name><name>base2</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>r</name><operator>&lt;=</operator><name>mx</name><operator>-</operator><name><name>h</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>_t</name> <operator>*</operator> <name><name>base2</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><name>l</name> <operator>+</operator> <name>r</name></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>other</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>gap</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>other</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>h</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name>l</name> <operator>+</operator> <name>r</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name><name>h</name><index>[<expr><name>other</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>h</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator> <name>l</name> <operator>+</operator> <name>r</name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>other</name> <operator>/=</operator> <name><name>base2</name><index>[<expr><name>gap</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>other</name> <operator>*=</operator> <name><name>base2</name><index>[<expr><name>gap</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></else></if>
                    <if>if<condition>(<expr><name>other</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
                        <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then>
                    <else>else <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>lowbit</name> <init>= <expr><name>t</name><operator>&amp;</operator><operator>(</operator><operator>-</operator><name>t</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                        <if>if<condition>(<expr><name>other</name><operator>/</operator><name>lowbit</name> <operator>!=</operator> <name>t</name><operator>/</operator><name>lowbit</name></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></else></if>
                    <expr_stmt><expr><name>other</name> <operator>=</operator> <name>other</name> <operator>-</operator> <name>t</name></expr>;</expr_stmt>
                    <if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                        <if>if<condition>(<expr><name>other</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>step</name> <operator>+=</operator> <operator>(</operator><name><name>h</name><index>[<expr><name>other</name></expr>]</index></name> <operator>-</operator> <name>gap</name><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>gap</name></expr>;</expr_stmt>  
                        }</block></then>
                        <else>else<block>{
                            <expr_stmt><expr><name>step</name> <operator>+=</operator> <name>gap</name></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>step</name> <operator>+=</operator> <literal type="number">2</literal><operator>*</operator><name><name>h</name><index>[<expr><name>other</name></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>step</name> <operator>+=</operator> <name>gap</name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
                <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
