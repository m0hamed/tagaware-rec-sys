<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12462289.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(ll)1e7</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>primes</name><index>[<expr><name>INF</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl> ,<decl><type ref="prev"/><name><name>palin</name><index>[<expr><name>INF</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>np</name><index>[<expr><name>INF</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl> ;</decl_stmt>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>pw</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>pw</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name>num</name></expr>;</return></block></then></if>

    <if>if<condition>(<expr><name>pw</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr> ;</return></block></then></if>

    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name>pw</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name><operator>*</operator><name>tmp</name></expr> ;</expr_stmt>
    <if>if<condition>(<expr><name>pw</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name>tmp</name></expr> ;</return></block></then>
    <else>else
    <block type="pseudo"><return>return <expr><name>tmp</name> <operator>*</operator> <name>num</name></expr> ;</return></block></else></if>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>x</name></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>palin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <while>while<condition>(<expr><name>tmp</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>palin</name> <operator>*=</operator><literal type="number">10</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>palin</name> <operator>+=</operator> <name>tmp</name><operator>%</operator><literal type="number">10</literal></expr> ;</expr_stmt>
        <expr_stmt><expr><name>tmp</name><operator>/=</operator><literal type="number">10</literal></expr> ;</expr_stmt>
    }</block></while>
 <return>return <expr><operator>(</operator><name>x</name><operator>==</operator><name>palin</name><operator>)</operator></expr> ;</return>
}</block></function>


<function><type><name>void</name></type> <name>sieve</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>np</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>np</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>palin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> <operator>,</operator><expr><name><name>palin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>INF</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>np</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
          <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl> ;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>INF</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
          <block>{
             <expr_stmt><expr><name><name>np</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
          }</block></for>
        <expr_stmt><expr><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>primes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
        }</block></then><else>else
        <block type="pseudo"><expr_stmt><expr><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>primes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt></block></else></if>

        <expr_stmt><expr><name><name>palin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>palin</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <return>return ;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>sieve</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr> ;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>INF</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>q</name><operator>*</operator><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>p</name><operator>*</operator><name><name>palin</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr> ;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
       <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
