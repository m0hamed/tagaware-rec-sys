<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12370566.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
<comment type="line">//	int a[n];</comment>
<comment type="line">//	bool b[n];</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>current_ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>max_ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>initial</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>reg_id</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>reg_id</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>c</name><operator>==</operator><operator>*</operator><literal type="string">"-"</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><call><name><name>S</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>reg_id</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>reg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>current_ans</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>max_ans</name><operator>++</operator></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>reg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>current_ans</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
		
		<if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>current_ans</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>max_ans</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>max_ans</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>current_ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>max_ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
