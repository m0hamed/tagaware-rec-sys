<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12352957.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//#pragma comment(linker, "/STACK:100000000")</comment>
<comment type="line">//#define _CRT_DISABLE_PERFCRIT_LOCKS</comment>
<comment type="line">//#define _CRT_SECURE_NO_WARNINGS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="block">/*MACROS*/</comment>
<comment type="line">//FUNCTIONS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in_range</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = l; i &lt; r; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repeat</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int I = 0; I &lt; n; I++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(v), end(v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.rbegin(), v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, 0, sizeof x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>present</name><parameter_list>(<parameter><type><name>element</name></type></parameter>, <parameter><type><name>container</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((container).find(element) != end(container))</cpp:value></cpp:define>
<comment type="line">//traverse throught container</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>container</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = begin(container); it != end(container); it++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rtr</name><parameter_list>(<parameter><type><name>container</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = container.rbegin(); it != container.rend(); it++)</cpp:value></cpp:define>

<comment type="line">//ABBREVIATIONS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int(c.size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<comment type="line">//CONSTANTS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>(double)1e-8</cpp:value></cpp:define>

<comment type="block">/*TYPES*/</comment>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<comment type="block">/*TEMPLATE ALGORITHMS*/</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>x_</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> <return>return <expr><name>x_</name><operator>*</operator><name>x_</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>qbr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>x_</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> <return>return <expr><name>x_</name><operator>*</operator><name>x_</name><operator>*</operator><name>x_</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>int</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>x_</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> <return>return <expr><operator>(</operator><operator>(</operator><name>x_</name><operator>&gt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-</operator><operator>(</operator><name>x_</name><operator>&lt;</operator><call><name>T</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>x_</name> <init>= <expr><operator>(</operator><name>x</name><operator>)</operator></expr></init></decl>;</decl_stmt> <return>return <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><name>x_</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>x_</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>m</name><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x_</name><operator>)</operator> <operator>%</operator> <operator>(</operator><name>m</name><operator>)</operator><operator>)</operator><operator>+</operator><operator>(</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><operator>(</operator><name>m</name><operator>)</operator><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<while>while<condition>(<expr><name>b</name></expr>)</condition><block>{<expr_stmt><expr><name>b</name> <operator>^=</operator> <name>a</name> <operator>^=</operator> <name>b</name> <operator>^=</operator> <name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd_ex</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></then></if><decl_stmt><decl><type><name>T</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name>d</name><init>=<expr><call><name>gcd_ex</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x1</name><operator>-</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>y1</name></expr>;</expr_stmt><return>return <expr><name>d</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><operator>(</operator><name>b</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>deg</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>res</name><init>=<expr><operator>(</operator><name>T</name><operator>)</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init>;</init><condition><expr><name>deg</name></expr>;</condition><incr><expr><name>x</name><operator>*=</operator><name>x</name></expr><operator>,</operator><expr><name>deg</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>deg</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block></then></if></block></for><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>deg</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>deg</name><operator>&gt;=</operator><operator>(</operator><name>T</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>T</name></type> <name>res</name><init>=<expr><call>(<name>T</name>)<argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <for>for<control>(<init>;</init><condition><expr><name>deg</name></expr>;</condition><incr><expr><name>x</name><operator>=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr><operator>,</operator><expr><name>deg</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>deg</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>res</name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if></block></for><return>return <expr><name>res</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>is_between</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>POSITION</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>LEFT</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>RIGHT</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>LEFT</name> <operator>&lt;</operator> <name>POSITION</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>POSITION</name> <operator>&lt;</operator> <name>RIGHT</name><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>is_inside</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>POSITION</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>LEFT</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>RIGHT</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>LEFT</name> <operator>&lt;=</operator> <name>POSITION</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>POSITION</name> <operator>&lt;=</operator> <name>RIGHT</name><operator>)</operator></expr>;</return>}</block></function>

<comment type="block">/*Ð¡OMBINATORS*/</comment>
<template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>, <parameter><type><name>typename</name></type> <name>UnaryOperation</name></parameter>&gt;</parameter_list> <macro><name>void</name></macro> <foreach>foreach<control>(<init><decl><type><name>Collection</name> <modifier>&amp;</modifier></type><name>col</name>,<range> <expr><name>UnaryOperation</name> <name>op</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><call><name>for_each</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></foreach></template>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>, <parameter><type><name>typename</name></type> <name>UnaryOperation</name></parameter>&gt;</parameter_list></template> <type><name>Collection</name></type> <name>fmap</name><parameter_list>(<parameter><decl><type><name>Collection</name> <modifier>&amp;</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>UnaryOperation</name></type> <name>op</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>col</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>col</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>, <parameter><type><name>typename</name></type> <name>binop</name></parameter>&gt;</parameter_list></template> <type><name>Collection</name></type> <name>zip</name><parameter_list>(<parameter><decl><type><name>Collection</name><modifier>&amp;</modifier></type> <name>fc</name></decl></parameter>, <parameter><decl><type><name>Collection</name><modifier>&amp;</modifier></type> <name>sc</name></decl></parameter>,<parameter><decl><type><name>binop</name></type> <name>op</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>transform</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>fc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>fc</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>, <parameter><type><name>typename</name></type> <name>Condition</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>exists</name><parameter_list>(<parameter><decl><type><name>Collection</name><modifier>&amp;</modifier></type> <name>col</name></decl></parameter>,<parameter><decl><type><name>Condition</name></type> <name>con</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>auto</name></type> <name>exist</name> <init>= <expr><call><name>find_if</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><name>exist</name> <operator>!=</operator> <call><name><name>col</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>,<parameter><type><name>typename</name></type> <name>Predicate</name></parameter>&gt;</parameter_list></template> <type><name>Collection</name></type> <name>filterNot</name><parameter_list>(<parameter><decl><type><name>Collection</name><modifier>&amp;</modifier></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>Predicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>auto</name></type> <name>returnIterator</name> <init>= <expr><call><name>remove_if</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>predicate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>returnIterator</name></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>col</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Collection</name></parameter>,<parameter><type><name>typename</name></type> <name>Predicate</name></parameter>&gt;</parameter_list></template><type><name>Collection</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>Collection</name><modifier>&amp;</modifier></type> <name>col</name></decl></parameter>,<parameter><decl><type><name>Predicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>auto</name></type> <name>fnCol</name> <init>= <expr><call><name>filterNot</name><argument_list>(<argument><expr><name>col</name></expr></argument>, <argument><expr><lambda><capture>[<argument><name>predicate</name></argument>]</capture><parameter_list>(<parameter><decl><type><name><typename>typename</typename> <name>Collection</name><operator>::</operator><name>value_type</name></name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><call><name>predicate</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>}</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><name>fnCol</name></expr>;</return>}</block></function>

<comment type="line">//STL INPUT</comment>
<comment type="line">//template&lt;class T, template&lt;class, class...&gt; class Collection&gt; istream&amp; operator &gt;&gt;(istream&amp; in, Collection&lt;T&gt;&amp; Col){for(auto &amp;el : Col) in &gt;&gt; el; return in;}</comment>

<comment type="line">//STL OUTPUT</comment>
<comment type="line">//template&lt;class T1, class T2&gt; ostream&amp; operator &lt;&lt;(ostream&amp; os, const pair&lt;T1, T2&gt;&amp; p){os &lt;&lt; "(" &lt;&lt; p.fst &lt;&lt; ", " &lt;&lt; p.scd &lt;&lt; ")"; return os;}</comment>
<comment type="line">//template&lt;class T, template&lt;class, class...&gt; class Collection&gt; ostream&amp; operator &lt;&lt;(ostream&amp; os, const Collection&lt;T&gt;&amp; Col){for(auto &amp;el : Col) os &lt;&lt; el &lt;&lt; " "; return os;}</comment>
<comment type="line">//template&lt;class T&gt; ostream&amp; operator &lt;&lt;(ostream&amp; os, const vector&lt;vector&lt;T&gt;&gt;&amp; v){for(auto &amp;row : v){ for(auto &amp;el : row) cout &lt;&lt; el &lt;&lt; " "; cout &lt;&lt; endl;} return os;}</comment>

<comment type="line">//Synthax Sugar</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><template>template<parameter_list>&lt;<parameter><type><name>class</name></type></parameter>, <parameter><type><name>class</name></type><parameter><type><modifier>...</modifier></type></parameter></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>Collection</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>Col</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>accumulate</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>T</name><block>{}</block></expr></argument>, <argument><expr><call><name><name>plus</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><template>template<parameter_list>&lt;<parameter><type><name>class</name></type></parameter>, <parameter><type><name>class</name></type><parameter><type><modifier>...</modifier></type></parameter></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>Collection</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>product</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>Col</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>accumulate</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Col</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>T</name><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>, <argument><expr><call><name><name>multiplies</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAX</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inv</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>b</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gcd_ex</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>mod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>n</name><operator>&lt;</operator><name>r</name> <operator>||</operator> <name>n</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>r</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>r</name></expr>]</index></name><operator>%</operator><name>M</name><operator>*</operator><name><name>inv</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name><operator>%</operator><name>M</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>Cat</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>y</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>C</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>inv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><call><name>inverse</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//    ios::sync_with_stdio(false);</comment>
<comment type="line">//    freopen("in", "r", stdin);</comment>
<comment type="line">//    freopen("out", "w", stdout);</comment>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>b</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <block>{<expr><name>h</name></expr>, <expr><name>w</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>yi</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fst</name></expr></init></decl>, <decl><type ref="prev"/><name>xi</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>scd</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>to_substract</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>yj</name> <init>= <expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fst</name></expr></init></decl>, <decl><type ref="prev"/><name>xj</name> <init>= <expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>scd</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>to_substract</name> <operator>+=</operator> <operator>(</operator><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><call><name>Cat</name><argument_list>(<argument><expr><name>yi</name><operator>-</operator><name>yj</name></expr></argument>, <argument><expr><name>xi</name><operator>-</operator><name>xj</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr><operator>,</operator> <expr><name>to_substract</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        }</block></for>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mod</name><argument_list>(<argument><expr><call><name>C</name><argument_list>(<argument><expr><name>xi</name><operator>+</operator><name>yi</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>yi</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>to_substract</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><literal type="boolean">true</literal> <operator>&amp;&amp;</operator> <operator>!</operator><literal type="boolean">false</literal></expr>;</return>
}</block></function>
</unit>
