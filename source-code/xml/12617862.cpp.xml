<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12617862.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// 3 primes numbers, probability says it's unlikely 2 different numbers will be different after modding 3 times</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD_A</name> <init>= <expr><literal type="number">1000000207</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD_B</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD_C</name> <init>= <expr><literal type="number">999999733</literal></expr></init></decl>;</decl_stmt>

<namespace>namespace <name>phillypham</name> <block>{
  <class>class <name>priority_queue</name> <block>{<private type="default">
  </private><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>keysSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>keys</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>values</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>keyToIdx</name></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>left</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>right</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>idx</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>heap_swap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>keyToIdx</name><index>[<expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>keyToIdx</name><index>[<expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
    <function><type><name>void</name></type> <name>max_heapify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>lIdx</name> <init>= <expr><call><name>left</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rIdx</name> <init>= <expr><call><name>right</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>smallestIdx</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>lIdx</name> <operator>&lt;</operator> <name>keysSize</name> <operator>&amp;&amp;</operator> <name><name>values</name><index>[<expr><name>lIdx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>values</name><index>[<expr><name>smallestIdx</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>smallestIdx</name> <operator>=</operator> <name>lIdx</name></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name>rIdx</name> <operator>&lt;</operator> <name>keysSize</name> <operator>&amp;&amp;</operator> <name><name>values</name><index>[<expr><name>rIdx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>values</name><index>[<expr><name>smallestIdx</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>smallestIdx</name> <operator>=</operator> <name>rIdx</name></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name>smallestIdx</name> <operator>!=</operator> <name>idx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>heap_swap</name><argument_list>(<argument><expr><name>smallestIdx</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>max_heapify</name><argument_list>(<argument><expr><name>smallestIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if> 
    }</block></function>
    
    <function><type><name>void</name></type> <name>min_heapify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>  <block>{
      <while>while <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>values</name><index>[<expr><call><name>parent</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;</operator> <name><name>values</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>heap_swap</name><argument_list>(<argument><expr><call><name>parent</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></function>
    
  </private><public>public:
    <constructor><name>priority_queue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>keysSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>keyToIdx</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>keyToIdx</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    
    <function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// if (keyToIdx.count(key)) throw logic_error("key " + ::to_string(key) + " already exists");</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>keysSize</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>++</operator><name>keysSize</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>keysSize</name> <operator>&gt;</operator> <call><name><name>keys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>keys</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      }</block></else></if>   
      <expr_stmt><expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>min_heapify</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
    }</block></function>

    <function><type><name>void</name></type> <name>increase_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// if (!keyToIdx.count(key)) throw logic_error("key " + ::to_string(key) + " does not exist");</comment>
      <comment type="line">// if (values[keyToIdx[key]] &gt; value) throw logic_error("value " + ::to_string(value) + " is not an increase");</comment>
      <expr_stmt><expr><name><name>values</name><index>[<expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>max_heapify</name><argument_list>(<argument><expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>decrease_key</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// if (!keyToIdx.count(key)) throw logic_error("key " + ::to_string(key) + " does not exist");</comment>
      <comment type="line">// if (values[keyToIdx[key]] &lt; value) throw logic_error("value " + ::to_string(value) + " is not a decrease");</comment>
      <expr_stmt><expr><name><name>values</name><index>[<expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>min_heapify</name><argument_list>(<argument><expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
    }</block></function>

    <function><type><name>void</name></type> <name>pop</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>keysSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>heap_swap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>--</operator><name>keysSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>keyToIdx</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>keys</name><index>[<expr><name>keysSize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
        <if>if <condition>(<expr><name>keysSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>max_heapify</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></then> <else>else <block>{
        <throw>throw <expr><call><name>logic_error</name><argument_list>(<argument><expr><literal type="string">"priority queue is empty"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></else></if>
    }</block></function>
    
    <function><type><name>int</name></type> <name>top</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>keysSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>keys</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <throw>throw <expr><call><name>logic_error</name><argument_list>(<argument><expr><literal type="string">"priority queue is empty"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></else></if>
    }</block></function>    

    <function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>keysSize</name></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>keysSize</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>at</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name><name>values</name><index>[<expr><name><name>keyToIdx</name><index>[<expr><name>key</name></expr>]</index></name></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>keyToIdx</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>string</name></type> <name>to_string</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>ostringstream</name></type> <name>out</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>keys</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>keysSize</name></expr></argument>, <argument><expr><call><name><name>ostream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>values</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>values</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>keysSize</name></expr></argument>, <argument><expr><call><name><name>ostream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>      
      <return>return <expr><call><name><name>out</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>    
  </public>}</block>;</class>
}</block></namespace>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>computeShortestPath</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>edgeList</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>edgeList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>distance</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>LLONG_MAX</name><operator>/</operator><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>phillypham</name><operator>::</operator><name>priority_queue</name></name></type> <name>pq</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>distance</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{  
    <decl_stmt><decl><type><name>int</name></type> <name>currentVertex</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>currentDistance</name> <init>= <expr><name><name>distance</name><index>[<expr><name>currentVertex</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// relax step</comment>
    <for>for <control>(<init><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>entry</name> <range>: <expr><name><name>edgeList</name><index>[<expr><name>currentVertex</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>nextVertex</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><name><name>entry</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>newDistance</name> <init>= <expr><name>currentDistance</name> <operator>+</operator> <name>length</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>newDistance</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>newDistance</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><call><name><name>second</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><call><name><name>second</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>currentVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nextVertex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>decrease_key</name></name><argument_list>(<argument><expr><name>nextVertex</name></expr></argument>, <argument><expr><name>newDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>nextVertex</name></expr></argument>, <argument><expr><name>newDistance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then> <elseif>else <if>if <condition>(<expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>newDistance</name></expr>)</condition><then> <block>{        
        <expr_stmt><expr><name><name>distance</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><call><name><name>second</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>currentVertex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>
  }</block></while>
  <return>return <expr><name>distance</name></expr>;</return>
}</block></function>

<function><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>addPathTuples</name><parameter_list>(<parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_A</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_B</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_C</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>multiplyPathTuples</name><parameter_list>(<parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a0</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a1</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a2</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><operator>(</operator><name>a0</name><operator>*</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_A</name></expr></argument>, <argument><expr><operator>(</operator><name>a1</name><operator>*</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_B</name></expr></argument>, <argument><expr><operator>(</operator><name>a2</name><operator>*</operator><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD_C</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>countPaths</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, 
                                        <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>distances</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>children</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">// assume only edges that make shortest paths are included</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><call><name><name>children</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pathCounts</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt> <comment type="line">// store as tuple, basically modular hash function</comment>
  <expr_stmt><expr><name><name>pathCounts</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <call><name>make_tuple</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>phillypham</name><operator>::</operator><name>priority_queue</name></name></type> <name>pq</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>currentVertex</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  
    <for>for <control>(<init><decl><type><name>int</name></type> <name>nextVertex</name> <range>: <expr><name><name>children</name><index>[<expr><name>currentVertex</name></expr>]</index></name><operator>.</operator><name>second</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name><name>pathCounts</name><index>[<expr><name>nextVertex</name></expr>]</index></name> <operator>=</operator> <call><name>addPathTuples</name><argument_list>(<argument><expr><name><name>pathCounts</name><index>[<expr><name>currentVertex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pathCounts</name><index>[<expr><name>nextVertex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>nextVertex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>nextVertex</name></expr></argument>, <argument><expr><name><name>distances</name><index>[<expr><name>nextVertex</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>    
  }</block></while>
  <return>return <expr><name>pathCounts</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <comment type="line">// number of nodes, edges, source, and target</comment>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>M</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>                     <comment type="line">// 0 indexing</comment>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edgeList</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>reverseEdgeList</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{ <comment type="line">// read in edges</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><name><name>edgeList</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>count</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>edgeList</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>edgeList</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>reverseEdgeList</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>edgeList</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>++</operator><name><name>edgeList</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name><name>reverseEdgeList</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></for> 
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>distanceFromSource</name> <init>= <expr><call><name>computeShortestPath</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>edgeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>distanceFromTarget</name> <init>= <expr><call><name>computeShortestPath</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>reverseEdgeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pathCounts</name> <init>= <expr><call><name>countPaths</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>distanceFromSource</name></expr></argument>, <argument><expr><name>distanceFromTarget</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>backPathCounts</name> <init>= <expr><call><name>countPaths</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>distanceFromTarget</name></expr></argument>, <argument><expr><name>distanceFromSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pathCounts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>multiplyPathTuples</name><argument_list>(<argument><expr><name><name>pathCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>backPathCounts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>shortestDistance</name> <init>= <expr><name><name>distanceFromSource</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>shortestPaths</name> <init>= <expr><name><name>pathCounts</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>edge</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>pathDistance</name> <init>= <expr><name><name>distanceFromSource</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>distanceFromTarget</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>pathDistance</name> <operator>==</operator> <name>shortestDistance</name> <operator>&amp;&amp;</operator> <comment type="line">// path is shortest</comment>
        <name><name>pathCounts</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name>shortestPaths</name> <operator>&amp;&amp;</operator> <comment type="line">// every path goes through from node</comment>
        <name><name>pathCounts</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>==</operator> <name>shortestPaths</name> <operator>&amp;&amp;</operator> <comment type="line">// every path goes through to node</comment>
        <name><name>distanceFromSource</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name><name>second</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <comment type="line">// only paths come from the from node</comment>
        <name><name>edgeList</name><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>second</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>pathDistance</name> <operator>-</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>shortestDistance</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN"</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>pathDistance</name> <operator>-</operator> <name>shortestDistance</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <comment type="line">// which will happen if the city is unconnected since the edge won't be big enough to overcome the big distance</comment>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>flush</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
