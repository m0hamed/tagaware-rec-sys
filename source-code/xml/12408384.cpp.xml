<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12408384.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">200010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name><init>=<expr><literal type="number">1010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>,<decl><type ref="prev"/><name>S</name></decl>,<decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>Edge</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>dist</name></decl>;</decl_stmt>
    <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_id</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>from</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>,<call><name>to</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>,<call><name>dist</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call>,<call><name>id</name><argument_list>(<argument><expr><name>_id</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>Edge</name></type> <name><name>edge</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>HeapNode</name><comment type="line">//ä¼åéåèç¹</comment>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>d</name></decl>;</decl_stmt>
    <constructor><name>HeapNode</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>_d</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_u</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>d</name><argument_list>(<argument><expr><name>_d</name></expr></argument>)</argument_list></call>,<call><name>u</name><argument_list>(<argument><expr><name>_u</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HeapNode</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list><specifier>const</specifier>
    <block>{
        <return>return <expr><name>d</name><operator>&gt;</operator><name><name>rhs</name><operator>.</operator><name>d</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>
<struct>struct <name>Dijkstra</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>               <comment type="line">//ç¹æ°åè¾¹æ°</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>    <comment type="line">//è¾¹åè¡¨</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line">//æ¯ä¸ªèç¹åºåçè¾¹ç¼å·(ç¼å·ä»0å¼å§)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>done</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>       <comment type="line">//æ¯å¦å·²æ°¸ä¹æ å·</comment>
    <decl_stmt><decl><type><name>LL</name></type> <name><name>d</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>           <comment type="line">//så°åä¸ªç¹çè·ç¦»</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>p</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>           <comment type="line">//æç­è·¯ä¸­çä¸ä¸æ¡è¾¹</comment>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>n</name></name><operator>=</operator><name>n</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>AddEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>dist</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>from</name></expr></argument>,<argument><expr><name>to</name></expr></argument>,<argument><expr><name>dist</name></expr></argument>,<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name><operator>=</operator><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>HeapNode</name></expr></argument>&gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>INF</name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>done</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>done</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>HeapNode</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <decl_stmt><decl><type><name>HeapNode</name></type> <name>x</name><init>=<expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>x</name><operator>.</operator><name>u</name></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>done</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>done</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>Edge</name> <modifier>&amp;</modifier></type><name>e</name><init>=<expr><name><name>edges</name><index>[<expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>&gt;</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>dist</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>dist</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>HeapNode</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>==</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>dist</name></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>HeapNode</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></for>
        }</block></while>
    }</block></function>

</public>}</block><decl><name>dij1</name></decl>,<decl><type ref="prev"/><name>dij2</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>dfs_clock</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dfn</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>lowu</name><init>=<expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>dfs_clock</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>child</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>Edge</name></type> <name>e</name><init>=<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>child</name><operator>++</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lowv</name><init>=<expr><call><name>tarjan</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>lowu</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>lowv</name></expr></argument>,<argument><expr><name>lowu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>lowv</name><operator>&gt;</operator><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>e</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                <comment type="line">//cout&lt;&lt;e.from&lt;&lt;" "&lt;&lt;e.to&lt;&lt;endl;</comment>
            }</block></then></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name><operator>&lt;</operator><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>e</name><operator>.</operator><name>id</name></name><operator>!=</operator><name>fa</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>lowu</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>lowu</name></expr></argument>,<argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>
    <expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>lowu</name></expr>;</expr_stmt>
    <return>return <expr><name>lowu</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>u</name><operator>==</operator><name>S</name></expr>)</condition><then><block type="pseudo"><return>return ;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>Edge</name></type> <name>e</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name><name>dij1</name><operator>.</operator><name>p</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>dist</name></name><operator>==</operator><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name><name>e</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>from</name></name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>dist</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>from</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>dist</name></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;e.from&lt;&lt;" "&lt;&lt;e.to&lt;&lt;" "&lt;&lt;u&lt;&lt;endl;</comment>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>e</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>from</name></name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name>w</name><operator>==</operator><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>dij2</name><operator>.</operator><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>w</name><operator>==</operator><name><name>dij2</name><operator>.</operator><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>w</name></expr></argument>,<argument><expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>dij1</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dij2</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dij1</name><operator>.</operator><name>AddEdge</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dij2</name><operator>.</operator><name>AddEdge</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>dij1</name><operator>.</operator><name>dijkstra</name></name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dij2</name><operator>.</operator><name>dijkstra</name></name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>T</name></expr>]</index></name><operator>==</operator><name>INF</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dfs_clock</name><operator>=</operator><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dfn</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dfn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//dfs(T,-1);</comment>
    <expr_stmt><expr><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>Edge</name></type> <name>e</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>dij2</name><operator>.</operator><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>e</name><operator>.</operator><name>dist</name></name><operator>-</operator><name><name>dij1</name><operator>.</operator><name>d</name><index>[<expr><name>T</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>tmp</name><operator>&gt;=</operator><name><name>e</name><operator>.</operator><name>dist</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
