<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12373254.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/hash_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/hash_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/priority_queue.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_cxx</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XINF</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3F3F3F3F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(X,Y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=0;X&lt;N;X++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP2</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>L</name></type></parameter>,<parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=L;X&lt;=R;X++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>R</name></type></parameter>,<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=R;X&gt;=L;X--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(A,X,sizeof(A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro> <cpp:value>iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIT</name></cpp:macro> <cpp:value>reverse_iterator</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>VII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument> &gt;</argument_list></name></type> <name>rb_tree</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X).begin(),(X).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQ</name></cpp:macro> <cpp:value>std::priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEAP</name></cpp:macro> <cpp:value>__gnu_pbds::priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X)&lt;&lt;1|1)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>G</name><index>[<expr><literal type="number">70</literal></expr>]</index><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ull</name></type> <name><name>dp</name><index>[<expr><literal type="number">70</literal></expr>]</index><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ull</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
		<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>ull</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>REP2</name><argument_list>(<argument>i</argument>,<argument>l+<literal type="number">2</literal></argument>,<argument>r</argument>)</argument_list></macro> <block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then></if>
	
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>REP2</name><argument_list>(<argument>i</argument>,<argument>l+<literal type="number">1</literal></argument>,<argument>r-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then></if>
	
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>REP2</name><argument_list>(<argument>i</argument>,<argument>l</argument>,<argument>r-<literal type="number">2</literal></argument>)</argument_list></macro> <block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>G</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	   <comment type="line">//freopen("x.in","r",stdin);</comment>
	   <comment type="line">//freopen("x.out","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>CLR</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n*<literal type="number">2</literal></argument>)</argument_list></macro>
	<macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>n*<literal type="number">2</literal></argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>i</name><operator>==</operator><name>j</name></expr>?</condition><then><expr><literal type="number">2</literal></expr></then><else>:<expr><literal type="number">7</literal></expr></else></ternary></expr>;</expr_stmt>
	}</block>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>k</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>G</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
