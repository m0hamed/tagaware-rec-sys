<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12559184.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inp_s</name></cpp:macro>     <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRT</name><parameter_list>()</parameter_list></cpp:macro>     <cpp:value>int test_case;cin&gt;&gt;test_case;while(test_case--)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VI</name></cpp:macro>        <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VS</name></cpp:macro>        <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLL</name></cpp:macro>       <cpp:value>vector&lt;LL&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PII</name></cpp:macro>       <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>c.begin(),c.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(int)c.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>c.clear()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>        <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>        <cpp:value>make_pair</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>for(int i=(int)(a);i&lt;(int)(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>for(int i=(int)(b)-1;i&gt;=(int)(a);i--)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>       <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro>       <cpp:value>1E-10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>  <cpp:value>acos(-1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>cout &lt;&lt; "Case #" &lt;&lt; x &lt;&lt; ": ";</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>poss</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>r1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r1</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>r2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r2</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c2</name> <operator>&lt;</operator> <name>m</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name>r2</name> <operator>-</operator> <name>r1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name>c2</name> <operator>-</operator> <name>c1</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>dx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">510</literal></expr>]</index><index>[<expr><literal type="number">510</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>inp_s</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">510</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">510</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>moves</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><literal type="number">2</literal><operator>*</operator><name>moves</name> <operator>&lt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>moves</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r1</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>r1</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r2</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>r2</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name>moves</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>r1</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>moves</name> <operator>-</operator> <name>r2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><operator>!</operator><call><name>poss</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <decl_stmt><decl><type><name>int</name></type> <name>ways</name> <init>= <expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <if>if<condition>(<expr><call><name>poss</name><argument_list>(<argument><expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ways</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><call><name>poss</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>ways</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>

                <if>if<condition>(<expr><call><name>poss</name><argument_list>(<argument><expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>r2</name></expr>]</index><index>[<expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>+</operator> <name>ways</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><call><name>poss</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>,<argument><expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>c1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>r2</name></expr>]</index><index>[<expr><name>c2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>+</operator> <name>ways</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>

            }</block></for>
        }</block></for>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
