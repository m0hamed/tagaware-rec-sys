<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12366966.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>   <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>  <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>, <decl><type ref="prev"/><name>rem</name></decl>, <decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>shot</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter> )</parameter_list>
<block>{
    <for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>      <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>id</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>    <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[ <expr><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><name>rem</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>last</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block>{
        <if>if<condition>( <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>( <expr><name>last</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <name>a</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>( <expr><name>i</name><operator>-</operator><name>last</name> <operator>&gt;=</operator> <name>a</name></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></for>

    <return>return <expr><name>rem</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d %d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>r</name><operator>-</operator><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
    <block>{
        <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator> <name>l</name><operator>+</operator><name>r</name> <operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if<condition>( <expr><call><name>check</name><argument_list>( <argument><expr><name>mid</name></expr></argument> )</argument_list></call></expr> )</condition><then>  <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
        <else>else                <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <if>if<condition>( <expr><call><name>check</name><argument_list>( <argument><expr><name>l</name></expr></argument> )</argument_list></call></expr> )</condition><then>        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>( <expr><call><name>check</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr> )</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else                    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
