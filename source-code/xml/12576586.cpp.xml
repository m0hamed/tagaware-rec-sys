<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12576586.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">// 21:49</comment>
<comment type="line">// 22:08 - </comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(a); i&lt;=int(b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>irep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(a); i&gt;=int(b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rep(i, 0, (n)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>irepn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>irep(i, (n)-1, 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fillchar</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, x, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ fprintf(stderr, args); fflush(stderr); }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>PDD</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>VL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>VPI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>setmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>_b</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><name>_b</name><operator>&gt;</operator><name>_a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>_a</name><operator>=</operator><name>_b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>setmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>_a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>_b</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><name>_b</name><operator>&lt;</operator><name>_a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>_a</name><operator>=</operator><name>_b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>_a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>_b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>_b</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>_a</name></expr></then><else>:<expr><call><name>gcd</name><argument_list>(<argument><expr><name>_b</name></expr></argument>,<argument><expr><name>_a</name><operator>%</operator><name>_b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>eq</name><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>VI</name></type> <name><name>le</name><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ge</name><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lt</name><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gt</name><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">//printf("check %d %d %d %d\n",l,r,i,j);</comment>
    <if>if<condition>(<expr><name><name>eq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name><name>eq</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><range>: <expr><name><name>ge</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;=</operator><name>r</name> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><range>: <expr><name><name>gt</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <comment type="line">//printf("   --- ok\n");</comment>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>memo</name><index>[<expr><literal type="number">77</literal></expr>]</index><index>[<expr><literal type="number">77</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>ans</name><init>=<expr><name><name>memo</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>ans</name><operator>=</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <return>return <expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//printf("%d %d (%d)\n",l,r,r-l+1);</comment>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">//printf("  += %d %d\n",l+2,r);</comment>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>cal</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">//printf("  += %d %d\n",l+1,r-1);</comment>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>cal</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="line">//printf("  += %d %d\n",l,r-2);</comment>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>cal</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//printf("%d %d (%d)-&gt; %lld\n",l,r,r-l+1,ans);</comment>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>LL</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n*<literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>le</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>ge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>lt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name><name>gt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fillchar</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>repn</name><argument_list>(<argument>ki</argument>, <argument>k</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>b</name><index>[<expr><literal type="number">99</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>eq</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>eq</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
            <if>if<condition>(<expr><name><name>eq</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>eq</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name><name>eq</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator> <expr><name><name>eq</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name><name>gt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>lt</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
            <expr_stmt><expr><name><name>lt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>gt</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>ge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>le</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>le</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>ge</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>

    <expr_stmt><expr><call><name>fillchar</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><call><name>cal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><call><name>solve</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
