<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12404077.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">// There is nothing in a caterpillar that tells you its going to be a butterfly ----------------------</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>10000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;pi,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>freopen("input-3.txt","r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name></cpp:macro> <cpp:value>freopen("output-3.txt","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>g</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ge</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>eq</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">80</literal></expr>]</index><index>[<expr><literal type="number">80</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">80</literal></expr>]</index><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check_oppo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>check_left</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name><operator>+</operator><literal type="number">2</literal> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name><operator>+</operator><literal type="number">2</literal> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>check_right</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>g</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>ge</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>i</name> <operator>or</operator> <name>x</name><operator>&gt;=</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>eq</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">1</literal> <operator>or</operator> <name>x</name><operator>==</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{

		}</block></then>
		<else>else<block>{
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{

	<if>if<condition>(<expr><name>j</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><call><name>check_oppo</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// case 1. two cur on opposite stacks</comment>
	<if>if<condition>(<expr><call><name>check_oppo</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>rec</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></then></if>
	<if>if<condition>(<expr><call><name>check_left</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>rec</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></then></if>
	<if>if<condition>(<expr><call><name>check_right</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>rec</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></then></if>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>k</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="string">"="</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>eq</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>eq</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="string">"&gt;="</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>ge</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="string">"&lt;="</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>ge</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="string">"&gt;"</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>s</name><operator>==</operator><literal type="string">"&lt;"</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>rec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
