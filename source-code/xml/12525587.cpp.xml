<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12525587.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">400000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oo</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>sum</name><operator>+=</operator><name>a</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
        <if>if<condition>(<expr><name>a</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>+=</operator><name>a</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>

        <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>ch</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
            <block>{
             <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>ch</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>

            <expr_stmt><expr><name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>ch</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ch</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></else></if>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

			 	 					      	 	 				 		  	</unit>
