<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12506513.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"a"</literal> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>pii</name></type> <name>p</name> <init>= <expr><call><name>pii</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>se</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></else></if>
                }</block></then> <else>else <block>{
                        <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>fi</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>fi</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                                <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>pii</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                }</block></else></if>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                                <continue>continue;</continue>
                        }</block></then></if>
                        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif> <elseif>else  <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                }</block></then> <else>else <block>{
                        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                                <continue>continue;</continue>
                        }</block></then></if>
                        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif> <elseif>else  <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>sum</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                }</block></else></if>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
