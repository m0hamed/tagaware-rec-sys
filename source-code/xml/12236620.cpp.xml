<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12236620.cpp"><comment type="line">//Language: MS C++</comment>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name> <name>(</name><name>linker</name><name>,</name><cpp:literal>"/stack:102400000,102400000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>(root &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>(root &lt;&lt; 1 | 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l, mid, ls</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>mid + 1, r, rs</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID</name></cpp:macro> <cpp:value>mid = ((l + r) &gt;&gt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * (x))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>lowbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <operator>-</operator><name>x</name><operator>)</operator></expr>;</return>}</block></function>
<comment type="line">//int sgn(double x) {return (x &gt; eps) - (x &lt; -eps);}</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>T_</name></type> <name>f_abs</name><parameter_list>(<parameter><decl><type><name>T_</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>T_</name></type> <name>f_max</name><parameter_list>(<parameter><decl><type><name>T_</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>T_</name></type> <name>f_min</name><parameter_list>(<parameter><decl><type><name>T_</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>T_</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>T_</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>T_</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T_</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<while>while<condition>(<decl><type><name>T_</name></type> <name>t</name> <init>= <expr><name>a</name> <operator>%</operator> <name>b</name></expr></init></decl>)</condition> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt></block></while> <return>return <expr><name>b</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T_</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>f_swap</name><parameter_list>(<parameter><decl><type><name>T_</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T_</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>T_</name></type> <name>t</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt><comment type="line">//UDLR</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100003</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tree</name><index>[<expr><name>N</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lazy</name><index>[<expr><name>N</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{}</block></function>

<function><type><name>void</name></type> <name>GetData</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<function><type><name>void</name></type> <name>push_up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>ls</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>rs</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name>push_down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>MID</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>ls</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>ls</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>rs</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>rs</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>ls</name></expr>]</index><index>[<expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>mid</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>rs</name></expr>]</index><index>[<expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>mid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>ls</name></expr>]</index></name> <operator>=</operator> <name><name>lazy</name><index>[<expr><name>rs</name></expr>]</index></name> <operator>=</operator> <name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if> <decl_stmt><decl><type><name>int</name></type> <name>MID</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>push_up</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if> <decl_stmt><decl><type><name>int</name></type> <name>MID</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>R</name> <operator>&gt;</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>push_up</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>Query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name>id</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>MID</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>L</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>Query</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>R</name> <operator>&gt;</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>Query</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>push_up</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if> <decl_stmt><decl><type><name>int</name></type> <name>MID</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Print</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Print</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></then>
		<else>else <block>{
			<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">25</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name>Update</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>Print</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GetData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
 	 	 		    		 	    	 	 	    	</unit>
