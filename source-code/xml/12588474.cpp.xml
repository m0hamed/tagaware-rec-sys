<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12588474.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>ushort</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INT</name></cpp:macro> <cpp:value>(int)0x7fffffff</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_INT</name></cpp:macro> <cpp:value>(int)0x80000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_UINT</name></cpp:macro> <cpp:value>(uint)0xffffffff</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TTi</name></cpp:macro> <cpp:value>template&lt;typename T&gt; inline</cpp:value></cpp:define>
<function><type><name>TTi</name> <name>T</name></type> <name>SQR</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONCAT3_NX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ## y ## z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONCAT3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONCAT3_NX(x, y, z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CONCAT3(__tmpvar__, name, __LINE__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TYPE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__typeof(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for (TYPE(n) i=(s),   VAR(end)=(n);  i &lt;  VAR(end);  i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (TYPE(n) i=(n)-1, VAR(end)=(s);  i &gt;= VAR(end);  i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>FOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFORN</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>RFOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto&amp; i: v)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHOLE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POPST</name><parameter_list>(<parameter><type><name>stack</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(stack).top();(stack).pop();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POPQ</name><parameter_list>(<parameter><type><name>queue</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(queue).front();(queue).pop();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTAINS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(find(WHOLE(v), (x)) != v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sort(WHOLE(v)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIMIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>lim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{if (x &gt; lim) x = lim;}</cpp:value></cpp:define>
<function><type><name>TTi</name> <name>T</name></type> <name>MIN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>TTi</name> <name>T</name></type> <name>MAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>TTi</name> <name>T</name></type> <name>ABS</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>-</operator><name>x</name></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>TTi</name> <name>void</name></type> <name>UPDATE_MIN</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>}</block></then></if>}</block></function>
<function><type><name>TTi</name> <name>void</name></type> <name>UPDATE_MAX</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>}</block></then></if>}</block></function>
<function><type><name>TTi</name> <name>int</name></type> <name>ARGMAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>cont</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>max_element</name><argument_list>(<argument><expr><call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
<function><type><name>TTi</name> <name>int</name></type> <name>ARGMIN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>cont</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>min_element</name><argument_list>(<argument><expr><call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>x</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><name>ss</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> <return>return <expr><call><name>move</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>string</name></type> <name>arrStr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>stringstream</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
    <macro><name>FORN</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">","</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>arr</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
    <return>return <expr><call><name><name>s</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPR</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>if (DEBUG) {fprintf(stderr, args);}</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EARR</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>if (DEBUG) {FORN(i, n) fprintf(stderr, "%d, ", arr[i]);}</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVEC</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>if (DEBUG) {FORN(i, arr.size()) fprintf(stderr, "%d, ", arr[i]);}</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVARS</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (DEBUG) { __evars_begin(__LINE__); __evars(split(#args, ',').begin(), args);}</cpp:value></cpp:define>

    <function><specifier>inline</specifier> <type><name>void</name></type> <name>__evars_begin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"#"</literal> <operator>&lt;&lt;</operator> <name>line</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal></expr>;</expr_stmt> }</block></function>
    <function><specifier>inline</specifier> <type><name>void</name></type> <name>__evars</name><parameter_list>(<parameter><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>

    <function><type><name>TTi</name> <name>void</name></type> <name>__evars_out_var</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name>arrStr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name><name>val</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>TTi</name> <name>void</name></type> <name>__evars_out_var</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>*</modifier></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name>arrStr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>TTi</name> <name>void</name></type> <name>__evars_out_var</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>val</name></expr>;</expr_stmt>
    }</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
    <specifier>inline</specifier> <type><name>void</name></type> <name>__evars</name><parameter_list>(<parameter><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name><name>it</name><operator>-&gt;</operator><name>substr</name></name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">' '</literal></expr></argument>, <argument><expr><call><name><name>it</name><operator>-&gt;</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"="</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__evars_out_var</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"; "</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>__evars</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPR</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EARR</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVEC</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVARS</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>string</name></type> <name>TOSTR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name></decl>;</decl_stmt> <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt> <return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIE</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{printf(args);exit(0);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (x) &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; fixed &lt;&lt; setprecision(10) &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>LL</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{ <if>if <condition>(<expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name><operator>*</operator><name>a</name><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>p</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>m</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>r</name></expr>;</return> }</block></function>

<struct>struct <name>pairhash</name> <block>{<public type="default">
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
    <type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>operator<name>()</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><call><call><name><name>std</name><operator>::</operator><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>^</operator> <call><call><name><name>std</name><operator>::</operator><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>V</name></type> <name>GetWithDef</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>unordered_map</name> <argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>,<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>K</name> <modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name> <modifier>&amp;</modifier></type> <name>defval</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>it</name> <operator>==</operator> <call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>defval</name></expr> </then><else>: <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></else></ternary></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>SetDef</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>unordered_map</name> <argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>,<argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type> <name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>K</name> <modifier>&amp;</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name> <modifier>&amp;</modifier></type> <name>defval</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name>key</name></expr>]</index></name> <operator>=</operator> <name>defval</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.1415926535897932384626433832795l</literal></expr></init></decl>;</decl_stmt>



<comment type="line">// -----------------------------------------------------------------</comment>
<comment type="line">// CODE</comment>
<comment type="line">// -----------------------------------------------------------------</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>505</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>XS</name></decl>, <decl><type ref="prev"/><name>YS</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt> <comment type="line">// x1, rx2</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>YS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>XS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FORN</name><argument_list>(<argument>i</argument>, <argument>YS</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// printf("%d: %s\n", i, s[i]);</comment>
    }</block>

    <if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>YS</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>XS</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>dpi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>dpi</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>, <parameter><type><name>x2</name></type></parameter>, <parameter><type><name>xx1</name></type></parameter>, <parameter><type><name>xx2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>add(dp[dpi ^ 1][xx1][xx2], dp[dpi][x1][x2]);</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IF</name><parameter_list>(<parameter><type><name>dx1</name></type></parameter>, <parameter><type><name>dy1</name></type></parameter>, <parameter><type><name>dx2</name></type></parameter>, <parameter><type><name>dy2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (s[y1 + dy1][x1 + dx1] == s[YS-1-y2-dy2][XS-1-x2-dx2])</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>dx1</name></type></parameter>, <parameter><type><name>dy1</name></type></parameter>, <parameter><type><name>dx2</name></type></parameter>, <parameter><type><name>dy2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IF(dx1, dy1, dx2, dy2) ADD(x1, x2, x1 + dx1, x2 + dx2)</cpp:value></cpp:define>

    <macro><name>FOR</name><argument_list>(<argument>curlen</argument>, <argument><literal type="number">1</literal></argument>, <argument>(XS + YS) / <literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <macro><name>FORN</name><argument_list>(<argument>x1</argument>, <argument>curlen</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><name>curlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x1</name></expr></init></decl>;</decl_stmt>
            <macro><name>FORN</name><argument_list>(<argument>x2</argument>, <argument>curlen</argument>)</argument_list></macro> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><name>curlen</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x2</name></expr></init></decl>;</decl_stmt>
                <comment type="line">// EVARS(curlen, x1, y1, x2, y2, s[y1][x1], s[YS-1-y2][XS-1-x2]);</comment>
                <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>dpi</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>y1</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>YS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>y2</name></expr>]</index><index>[<expr><name>XS</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block>
        }</block>
        <macro><name>FORN</name><argument_list>(<argument>x1</argument>, <argument>XS</argument>)</argument_list></macro> <macro><name>FORN</name><argument_list>(<argument>x2</argument>, <argument>XS</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>dpi</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>dpi</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><name>int</name></type> <name>maxdelta</name> <init>= <expr><operator>(</operator><name>XS</name> <operator>+</operator> <name>YS</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FORN</name><argument_list>(<argument>x1</argument>, <argument>(XS + YS) / <literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>dpi</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>XS</name><operator>-</operator><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>maxdelta</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>dpi</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>XS</name><operator>-</operator><name>x1</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
