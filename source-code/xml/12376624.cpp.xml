<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12376624.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>bool</name></type> <name><name>flag</name><index>[<expr><literal type="number">1000010</literal></expr>]</index></name></decl>;</decl_stmt>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>num</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>flag</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>s</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>num</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>flag</name><index>[<expr><name>num</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>capacity</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>flag</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
		<expr_stmt><expr><name>capacity</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>capacity</name></expr></argument>,<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>capacity</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
