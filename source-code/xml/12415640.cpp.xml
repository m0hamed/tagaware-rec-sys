<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12415640.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(2 * i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(2 * i + 1)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxl</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxo</name> <init>= <expr><literal type="number">50000</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>OP</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>ope</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>op</name><index>[<expr><name>maxo</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sta</name><index>[<expr><name>maxo</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</struct>

<struct>struct <name>T</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>lc</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list><block>{
		<if>if<condition>(<expr><name>lazy</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>rc</name> <operator>-</operator> <name>lc</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then>
		<else>else <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
	}</block></function>
	<decl_stmt><decl><type><name>int</name></type> <name>lazy</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>tree</name><index>[<expr><name>maxl</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index><index>[<expr><name>maxn</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>top</name></decl>, <decl><type ref="prev"/><name><name>tmp</name><index>[<expr><name>maxl</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>del</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<while>while<condition>(<expr><name>top</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sta</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&gt;=</operator> <name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>&amp;&amp;</operator> <name><name>sta</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&lt;=</operator> <name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator> <name>top</name></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>sta</name><index>[<expr><operator>++</operator> <name>top</name></expr>]</index></name> <operator>=</operator> <name><name>op</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>top</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>built</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lc</name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>==</operator> <name>alpha</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then></if>
		<return>return ;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>built</name><argument_list>(<argument><expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>built</name><argument_list>(<argument><expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lc</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then><block type="pseudo"><return>return ;</return></block></then></if>
	<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lc</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>alpha</name></expr>]</index></name> <operator>+=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then>
	<else>else <block>{
		<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lc</name> <operator>&gt;</operator> <name>r</name> <operator>||</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lc</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rc</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then>
	<else>else <block>{
		<if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>LCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>alpha</name></expr>]</index><index>[<expr><call><name>RCH</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>cnt</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>del</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxl</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>built</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>xlen</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxl</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>, <argument><expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>, <argument><expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>xlen</name> <operator>=</operator> <name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>op</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ope</name></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxl</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><operator>!</operator><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>xlen</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while<condition>(<expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>xlen</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
				}</block></while>
			}</block></for>
		}</block></then>
		<else>else<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>maxl</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>--</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><operator>!</operator><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>xlen</name></expr></argument>, <argument><expr><name>xlen</name> <operator>+</operator> <name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while<condition>(<expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>xlen</name> <operator>++</operator></expr>]</index></name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
				}</block></while>
			}</block></for>
		}</block></else></if>
		<comment type="line">//printf("%s", str + 1);</comment>
		<comment type="line">//puts("");</comment>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
