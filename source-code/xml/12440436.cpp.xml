<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12440436.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//include</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//typedef</comment>
<comment type="line">//------------------------------------------</comment>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VI</name></expr></argument>&gt;</argument_list></name></type> <name>VVI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>VL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VL</name></expr></argument>&gt;</argument_list></name></type> <name>VVL</name>;</typedef>

<comment type="line">//container util</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).rbegin(), (a).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((a).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIST</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s).find(e)!=(s).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort((c).begin(),(c).end())</cpp:value></cpp:define>

<comment type="line">//repetition</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>FOR(i,0,n)</cpp:value></cpp:define>

<comment type="line">//constant</comment>
<comment type="line">//--------------------------------------------</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name>  <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>powm</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>: <expr><call><name>powm</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>MOD</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><ternary><condition><expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>%</operator><name>MOD</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>LL</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><call><name>powm</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct>struct <name>Edge</name><block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>

  <constructor><name>Edge</name><parameter_list>()</parameter_list><block>{}</block></constructor>
  <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>from</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>, <call><name>to</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>, <call><name>cost</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>, <call><name>num</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>
  </member_init_list><block>{}</block></constructor>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
	<return>return <expr><name>cost</name> <operator>&gt;</operator> <name><name>rhs</name><operator>.</operator><name>cost</name></name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Graph</name>;</typedef>
<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>Graph</name><modifier>&amp;</modifier></type> <name>graph</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cost</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>cost</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Dijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Graph</name><modifier>&amp;</modifier></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>VL</name><modifier>&amp;</modifier></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>V</name> <init>= <expr><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>V</argument>)</argument_list></macro> <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
	<decl_stmt><decl><type><name>PLL</name></type> <name>pii</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>pii</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pii</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>edges</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
	  <decl_stmt><decl><type><specifier>const</specifier> <name>Edge</name><modifier>&amp;</modifier></type> <name>e</name> <init>= <expr><name><name>edges</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>LL</name></type> <name>nc</name> <init>= <expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr></init></decl>;</decl_stmt>
	  <if>if<condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>&gt;</operator> <name>nc</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name>nc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>nc</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></then></if>
	}</block></for>
  }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>Dijkstra_</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Graph</name><modifier>&amp;</modifier></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>VL</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>V</name> <init>= <expr><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>VL</name></type> <name>d</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>INF</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>V</argument>)</argument_list></macro> <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>x</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
	<decl_stmt><decl><type><name>PLL</name></type> <name>pii</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>pii</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pii</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>edges</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
	  <decl_stmt><decl><type><specifier>const</specifier> <name>Edge</name><modifier>&amp;</modifier></type> <name>e</name> <init>= <expr><name><name>edges</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>LL</name></type> <name>nc</name> <init>= <expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr></init></decl>;</decl_stmt>
	  <if>if<condition>(<expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>&gt;</operator> <name>nc</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>d</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name>nc</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>nc</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></then></if>
	  <expr_stmt><expr><name><name>x</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><name>v</name></expr>]</index></name><operator>*</operator><call><name>inv</name><argument_list>(<argument><expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
	}</block></for>
  }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>V</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>T</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>V</name> <operator>&gt;&gt;</operator> <name>E</name> <operator>&gt;&gt;</operator> <name>S</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>ve</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Graph</name></type> <name>G</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>rG</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><operator>--</operator><name>S</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>T</name></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>E</argument>)</argument_list></macro><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>l</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator> <expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>rG</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  }</block>

  <decl_stmt><decl><type><name>VL</name></type> <name>d</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>rd</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>rG</name></expr></argument>, <argument><expr><name>rd</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Graph</name></type> <name>G_</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>E</argument>)</argument_list></macro><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>c</name> <operator>+</operator> <name><name>rd</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name><name>d</name><index>[<expr><name>T</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>G_</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block>
  <decl_stmt><decl><type><name>VL</name></type> <name>x</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Dijkstra_</name><argument_list>(<argument><expr><name>G_</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>E</argument>)</argument_list></macro><block>{
  	<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>ve</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>G_</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name>c</name><operator>+</operator><name><name>rd</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name><name>d</name><index>[<expr><name>T</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
	  <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>rd</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>d</name><index>[<expr><name>T</name></expr>]</index></name></expr>)</condition><then>
	  <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
	<else>else
	  <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>rd</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name>c</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>T</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
  }</block>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
