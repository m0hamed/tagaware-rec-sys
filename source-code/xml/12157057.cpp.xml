<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12157057.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/*I have given up the treatment-_-||*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">200010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name><init>=<expr><literal type="number">2000010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod1</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod2</name><init>=<expr><literal type="number">123456701</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<struct>struct <name>Op</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>pp</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>
<struct>struct <name>Seg</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>ff</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>Seg</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>Seg</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>u</name><operator>.</operator><name>x</name></name><operator>!=</operator><name><name>v</name><operator>.</operator><name>x</name></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>u</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>v</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
    <return>return <expr><name><name>u</name><operator>.</operator><name>type</name></name><operator>&lt;</operator><name><name>v</name><operator>.</operator><name>type</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition><block>{
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>flagl</name><init>=<expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>flagr</name><init>=<expr><call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>gg</name><init>=<expr><name>n</name><operator>-</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>gg</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>gg</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>|=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>flagl</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>flagl</name></expr></argument>,<argument><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>flagr</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>flagr</name></expr></argument>,<argument><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>flagr</name><operator>&lt;</operator><name>flagl</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>gg</name><init>=<expr><name>n</name><operator>-</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>gg</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>gg</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>|=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>ff</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ff</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>type</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ff</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name><name>pp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ff</name><index>[<expr><name>num</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>type</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>ff</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ff</name><operator>+</operator><name>num</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>gg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>last</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>ll</name><init>=<expr><name>flagl</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>num</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>gg</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>gg</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>last</name><operator>=</operator><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>gg</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name>flagl</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;</operator><name>flagr</name><operator>+</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>flagr</name><operator>==</operator><name>flagl</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>flagl</name></expr>;</expr_stmt></block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></else></if>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name>gg</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name>flagl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><operator>!</operator><name>ans</name><operator>||</operator><name>ans</name><operator>==</operator><name>flagl</name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ans</name><operator>=</operator><name>flagl</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></else></if>
                }</block></then></if></elseif></if>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>gg</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>flagl</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>flagl</name></expr></argument>,<argument><expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>ff</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;=</operator><name>flagr</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>flagr</name><operator>=</operator><name>last</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></else></if>
        }</block></for>
        <if>if<condition>(<expr><name>flagr</name><operator>&gt;</operator><name>flagl</name><operator>||</operator><operator>(</operator><name>flagr</name><operator>==</operator><name>flagl</name><operator>&amp;&amp;</operator><name>ans</name><operator>!=</operator><name>flagl</name><operator>&amp;&amp;</operator><name>ans</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>flagr</name><operator>==</operator><name>flagl</name><operator>&amp;&amp;</operator><operator>!</operator><name>ans</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>flagl</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <if>if<condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><operator>!</operator><name>ans</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else<block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
