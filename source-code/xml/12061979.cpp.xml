<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12061979.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/*
10 5
abacdabcda
7 10 0
5 8 1
1 4 0
3 6 0
7 10 1

10 1
agjucbvdfk
1 10 1

*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<using>using <name>ii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>i64</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<comment type="line">// Max Value Segment Tree + Range Update with Lazy Propagation</comment>

<struct>struct <name>Node</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>       <comment type="line">// Interval covered by this node</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>son</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>     <comment type="line">// Children of this node</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>lazy</name></decl>;</decl_stmt>  <comment type="line">// Node info + Data to propagate</comment>
</public>}</block>;</struct>

<struct>struct <name>SegmentTree</name> <block>{<public type="default">
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></type> <name>T</name></decl>;</decl_stmt>

  <constructor><name>SegmentTree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>Node</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>s</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>n</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>val</name></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>n</name><operator>.</operator><name>lazy</name></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>reserve</name></name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>n</name> <init>= <expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>e</name></name> <operator>-</operator> <name><name>n</name><operator>.</operator><name>s</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name><name>n</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><index>[<expr><name><name>n</name><operator>.</operator><name>s</name></name></expr>]</index></name> <operator>==</operator> <name>ch</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name><name>n</name><operator>.</operator><name>s</name></name> <operator>+</operator> <name><name>n</name><operator>.</operator><name>e</name></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>Node</name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>c</name><operator>.</operator><name>e</name></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
      <else>else <block>{
        <expr_stmt><expr><name><name>c</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>T</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>val</name> <operator>+</operator> <name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>n</name> <init>= <expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>e</name></name> <operator>&lt;=</operator> <name>le</name> <operator>||</operator> <name><name>n</name><operator>.</operator><name>s</name></name> <operator>&gt;=</operator> <name>ri</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name>le</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>.</operator><name>e</name></name> <operator>==</operator> <name>ri</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>n</name><operator>.</operator><name>lazy</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>n</name><operator>.</operator><name>e</name></name> <operator>-</operator> <name><name>n</name><operator>.</operator><name>s</name></name><operator>)</operator> <operator>*</operator> <name>val</name></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>push_lazy</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>le</name> <operator>&lt;</operator> <name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>e</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>e</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ri</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>val</name></name> <operator>=</operator> <name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>val</name> <operator>+</operator> <name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>push_lazy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>n</name> <init>= <expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>lazy</name></name> <operator>==</operator> <name>inf</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>son</name> <init>= <expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>son</name><operator>.</operator><name>lazy</name></name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>lazy</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>son</name><operator>.</operator><name>val</name></name> <operator>=</operator> <operator>(</operator><name><name>son</name><operator>.</operator><name>e</name></name> <operator>-</operator> <name><name>son</name><operator>.</operator><name>s</name></name><operator>)</operator> <operator>*</operator> <name><name>n</name><operator>.</operator><name>lazy</name></name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>n</name><operator>.</operator><name>lazy</name></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Node</name> <modifier>&amp;</modifier></type><name>n</name> <init>= <expr><name><name>T</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>e</name></name> <operator>&lt;=</operator> <name>le</name> <operator>||</operator> <name><name>n</name><operator>.</operator><name>s</name></name> <operator>&gt;=</operator> <name>ri</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

    <if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>s</name></name> <operator>==</operator> <name>le</name> <operator>&amp;&amp;</operator> <name><name>n</name><operator>.</operator><name>e</name></name> <operator>==</operator> <name>ri</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>n</name><operator>.</operator><name>val</name></name></expr>;</return></block></then></if>

    <expr_stmt><expr><call><name>push_lazy</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>le</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>e</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>query</name><argument_list>(<argument><expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name><name>T</name><index>[<expr><name><name>n</name><operator>.</operator><name>son</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>kAlphasize</name> <init>= <expr><literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name><name>freq</name><index>[<expr><name>kAlphasize</name></expr>]</index></name></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>q</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SegmentTree</name></expr></argument>&gt;</argument_list></name></type> <name>stvec</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">'a'</literal></expr></init></decl>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <literal type="char">'z'</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ch</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>stvec</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <comment type="line">//cerr &lt;&lt; "Query #" &lt;&lt; (i + 1) &lt;&lt; endl;</comment>
      
      <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>b</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//cerr &lt;&lt; "\tBefore\n\t";</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>kAlphasize</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>freq</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>stvec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//cerr &lt;&lt; freq[j] &lt;&lt; " ";</comment>
        <expr_stmt><expr><name><name>stvec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>freq</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
      <comment type="line">//cerr &lt;&lt; endl;</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>sum</name> <operator>==</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/*
      cerr &lt;&lt; "\tMiddle\n\t";
      for (int i = 0; i &lt; kAlphasize; i++) {
        cerr &lt;&lt; stvec[i].query(0, a, b + 1) &lt;&lt; " ";
      }
      cerr &lt;&lt; endl;
      */</comment>
      
      <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>kAlphasize</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>next_end</name> <init>= <expr><name><name>freq</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>next</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>next_end</name></expr>)</condition><then> <block>{
            <comment type="line">//cerr &lt;&lt; "Letter: " &lt;&lt; char(c + 'a') &lt;&lt; ", " &lt;&lt; next &lt;&lt; ", " &lt;&lt; next_end &lt;&lt; endl;</comment>
            <expr_stmt><expr><name><name>stvec</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>next_end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name>next_end</name></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>next</name> <operator>==</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name>kAlphasize</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>next_end</name> <init>= <expr><name><name>freq</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <name>next</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>next</name> <operator>&lt;</operator> <name>next_end</name></expr>)</condition><then> <block>{
            <comment type="line">//cerr &lt;&lt; "Letter: " &lt;&lt; char(c + 'a') &lt;&lt; ",  " &lt;&lt; next &lt;&lt; ", " &lt;&lt; next_end &lt;&lt; endl;</comment>
            <expr_stmt><expr><name><name>stvec</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>next_end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name>next_end</name></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>next</name> <operator>==</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      
      <comment type="block">/*
      cerr &lt;&lt; "\tAfter\n\t";
      for (int i = 0; i &lt; kAlphasize; i++) {
        cerr &lt;&lt; stvec[i].query(0, a, b + 1) &lt;&lt; " ";
      }
      cerr &lt;&lt; endl;
      */</comment>
    }</block></for>
    
    <decl_stmt><decl><type><name>string</name></type> <name>result</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <comment type="line">// Find the letter in this position</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>kAlphasize</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>stvec</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>result</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  }</block></while>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
