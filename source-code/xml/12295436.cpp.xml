<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12295436.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>a3</name></decl>,<decl><type ref="prev"/><name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>a2</name><operator>+</operator><name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>b2</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>b3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<elseif>else <if>if <condition>(<expr><name>a2</name><operator>+</operator><name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>b2</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>b3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>b2</name><operator>+</operator><name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>a2</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>a3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>b2</name><operator>+</operator><name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>a2</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>a3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>a2</name><operator>+</operator><name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>b2</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>a3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>a2</name><operator>+</operator><name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>b2</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>a3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>b2</name><operator>+</operator><name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>a2</name> <operator>&amp;&amp;</operator> <name>b1</name><operator>&gt;=</operator><name>b3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>b2</name><operator>+</operator><name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>a2</name> <operator>&amp;&amp;</operator> <name>a1</name><operator>&gt;=</operator><name>b3</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
