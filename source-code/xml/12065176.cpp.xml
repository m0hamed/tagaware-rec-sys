<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12065176.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>level</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>L</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>R</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ON</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>level</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
    
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>num</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>level</name><index>[<expr><name>num</name></expr>]</index></name><operator>-</operator><name><name>level</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ON</name><index>[<expr><name>num</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        
        <while>while<condition>(<expr><name>num</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{
            <if>if<condition>(<expr><name>num</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>L</name><index>[<expr><name>num</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>R</name><index>[<expr><name>num</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>now</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>UP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Min</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
    
    <for>for<control>(<init><expr><name>now</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>now</name> <operator>=</operator> <name>next</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>Min</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>Min</name></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>now</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if<condition>(<expr><name><name>L</name><index>[<expr><name>now</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ON</name><index>[<expr><name>now</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>UP</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name>now</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>next</name> <operator>&gt;</operator> <name>N</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>next</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>now</name></expr>]</index></name> <operator>-</operator> <name><name>R</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>UP</name> <operator>+=</operator> <name><name>ON</name><index>[<expr><name>now</name></expr>]</index></name> <operator>+</operator> <name><name>R</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>next</name> <operator>=</operator> <name>now</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>next</name> <operator>&gt;</operator> <name>N</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>next</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>now</name></expr>]</index></name> <operator>+</operator> <name>UP</name> <operator>-</operator> <name><name>L</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
        
    }</block></for>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>Min</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
