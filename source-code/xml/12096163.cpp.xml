<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12096163.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>, <decl><type ref="prev"/><name>pr</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

    <constructor><name>node</name> <parameter_list>()</parameter_list> <block>{}</block></constructor><empty_stmt>;</empty_stmt>
    <constructor><name>node</name> <parameter_list>(<parameter><decl><type><name>LL</name></type> <name>data</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>data</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call>, <call><name>pr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>l</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>r</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>LL</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>MAXN</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node</name></type> <name><name>t</name><index>[<expr><literal type="number">15000000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>t_size</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>TBuild</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>MAXN</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt> <comment type="line" format="doxygen">//![)</comment>
}</block></function>

<function><type><name>void</name></type> <name>TPush</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>=</operator> <operator>++</operator><name>t_size</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <operator>++</operator><name>t_size</name></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name><name>t</name><index>[<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name></expr>]</index></name><operator>.</operator><name>pr</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name></expr>]</index></name><operator>.</operator><name>pr</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>TInc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>tl</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>tr</name></expr>)</condition><then><block>{
        <expr_stmt><expr><operator>++</operator><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>TPush</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TInc</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TInc</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>LL</name></type> <name>TGetAns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>tl</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>tr</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>||</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name><operator>)</operator></expr>)</condition><then><block>{
        <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>==</operator> <name>q</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>tl</name></expr>;</expr_stmt>
            <return>return <expr><name>tr</name> <operator>-</operator> <name>tl</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>tm</name> <init>= <expr><operator>(</operator><name>tl</name> <operator>+</operator> <name>tr</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>TGetAns</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>, <argument><expr><name>tl</name></expr></argument>, <argument><expr><name>tm</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>TGetAns</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>, <argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>tr</name></expr></argument>, <argument><expr><name>q</name> <operator>-</operator> <name><name>t</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//cin &gt;&gt; h &gt;&gt; q;</comment>
    <expr_stmt><expr><call><name>TBuild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d %I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//cin &gt;&gt; level &gt;&gt; l &gt;&gt; r &gt;&gt; ans;</comment>
        <decl_stmt><decl><type><name>LL</name></type> <name>ll</name> <init>= <expr><name>l</name> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>rr</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <name>level</name><operator>)</operator><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>TInc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXN</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>TInc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ll</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TInc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXN</name></expr></argument>, <argument><expr><name>rr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MAXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><call><name>TGetAns</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAXN</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
