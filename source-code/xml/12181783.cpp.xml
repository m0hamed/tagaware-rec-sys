<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12181783.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//Naveen Sangtani</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef  <type><name>long</name> <name>long</name> <name>int</name></type>          <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type>     <name>ULL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type>            <name>LD</name>;</typedef>
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                   <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro>                  <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                   <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>                   <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>                   <cpp:value>second</cpp:value></cpp:define>
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>                   <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro>                    <cpp:value>exp(1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro>                  <cpp:value>1e-9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sin</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                       <cpp:value>(sin((x*PI)/180.0))</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>count_1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>                   <cpp:value>__builtin_popcountll(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                        <cpp:value>63-__builtin_clzll(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIST</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AREA</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>,<parameter><type><name>x3</name></type></parameter>,<parameter><type><name>y3</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(abS((x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2))/2.0))</cpp:value></cpp:define>
 
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>for(int i=b;i&gt;=a;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foreach</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for( typeof((c).begin()) v = (c).begin();  v != (c).end(); ++v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>memset(A,false,sizeof(A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>for(int i=0;i&lt;n;++i) A[i]=val</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT</name><parameter_list>()</parameter_list></cpp:macro>                 <cpp:value>int tc;cin&gt;&gt;tc;while(tc--)</cpp:value></cpp:define>
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>cerr&lt;&lt;#a&lt;&lt;" = "&lt;&lt;a&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>cerr&lt;&lt;#a&lt;&lt;" = "&lt;&lt;a&lt;&lt;" :: "&lt;&lt;#b&lt;&lt;" = "&lt;&lt;b&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr&lt;&lt;#a&lt;&lt;" = "&lt;&lt;a&lt;&lt;" :: "&lt;&lt;#b&lt;&lt;" = "&lt;&lt;b&lt;&lt;" :: "&lt;&lt;#c&lt;&lt;" = "&lt;&lt;c&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>cerr&lt;&lt;#a&lt;&lt;" = "&lt;&lt;a&lt;&lt;" :: "&lt;&lt;#b&lt;&lt;" = "&lt;&lt;b&lt;&lt;" :: "&lt;&lt;#c&lt;&lt;" = "&lt;&lt;c&lt;&lt;" :: "&lt;&lt;#d&lt;&lt;" = "&lt;&lt;d&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgA</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>cerr&lt;&lt;endl;fr(i,0,n-1) cerr&lt;&lt;i&lt;&lt;" == &gt; "&lt;&lt;A[i]&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgV</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>cerr&lt;&lt;endl;fr(i,0,V.size()-1){cerr&lt;&lt;i&lt;&lt;" ==&gt; "&lt;&lt;V[i].ff&lt;&lt;" "&lt;&lt;V[i].ss&lt;&lt;endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgG</name><parameter_list>(<parameter><type><name>G</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>cerr&lt;&lt;endl;fr(i,1,n){cerr&lt;&lt;i&lt;&lt;" ==&gt; ";fr(j,0,(G[i].size())-1) cerr&lt;&lt;"("&lt;&lt;G[i][j].ff&lt;&lt;" , "&lt;&lt;G[i][j].ss&lt;&lt;")"&lt;&lt;"  ";cerr&lt;&lt;endl;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ns</name></cpp:macro>                   <cpp:value>cerr&lt;&lt;endl&lt;&lt;" ----- entered -----"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name></cpp:macro>                   <cpp:value>system("pause");</cpp:value></cpp:define>
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>miN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>abS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>
 


<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>            <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>               <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type>             <name>VPII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VPII</name></expr></argument>&gt;</argument_list></name></type>           <name>VVPII</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>                  <name>SI</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type>                <name>SPII</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>         <name>MPSI</name>;</typedef>
 
 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type>              <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type>                <name>VL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></type>             <name>VPLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VPLL</name></expr></argument>&gt;</argument_list></name></type>           <name>VVPLL</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type>                   <name>SL</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></type>                <name>SPLL</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type>              <name>MPLL</name>;</typedef>
 
 
<function><type><name>LL</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>y</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>%</operator> <name>y</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>temp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</decl_stmt><while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>(</operator><name>temp</name><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name><operator>*=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>temp</name></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>isPalin</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>LL</name></type> <name>len</name> <init>= <expr><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>(len/<literal type="number">2</literal>)-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{<if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>x</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>}</block><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></function>
<function><type><name>string</name></type> <name>tolowerStr</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>string</name></type> <name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>(LL)x.length()-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{<expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>tolower</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><return>return <expr><name>ret</name></expr>;</return>}</block></function>
<function><type><name>string</name></type> <name>toupperStr</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>string</name></type> <name>ret</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt><macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>(LL)x.length()-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{<expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>toupper</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block><return>return <expr><name>ret</name></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>modulo</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name>y</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>y</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>*</operator><name>y</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>x</name><operator>%</operator><name>c</name></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>mulmod</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>y</name> <init>= <expr><name>a</name><operator>%</operator><name>c</name></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>x</name><operator>%</operator><name>c</name></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>DigitSum</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>LL</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>abS</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>temp</name> <operator>+=</operator> <operator>(</operator><name>n</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>temp</name></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>double_equals</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>epsilon</name> <init>= <expr><literal type="number">0.1</literal></expr></init></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>epsilon</name></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>PLL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>PLL</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>ff</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>ff</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then><elseif>else <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>ff</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>ff</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></elseif><else>else <block>{<if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>ss</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>ss</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>}</block></else></if>}</block></function>
 
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>                 <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINF</name></cpp:macro>                <cpp:value>LONG_LONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro>                 <cpp:value>1000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>                 <cpp:value>1000000007</cpp:value></cpp:define>
 
<comment type="line">//bool prime[1000005];void seive(){prime[0]=1;prime[1]=1;for(int i=2;i*i&lt;=MAX;++i)if(!prime[i])for(int j=2*i;j&lt;MAX;j+=i)if(!prime[j])prime[j]=1;}</comment>
<comment type="line">//int ib[65];int I2B(LL x){CLR(ib);int k = 63;while(x&gt;0){ib[k--] = x%2;x/=2;}}</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("inp.txt","r",stdin);</comment>
    <comment type="line">//freopen("out.txt","w",stdout);</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>LL</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>ee</name></decl>,<decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LD</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>a3</name></decl>,<decl><type ref="prev"/><name>a4</name></decl>,<decl><type ref="prev"/><name>a5</name></decl>,<decl><type ref="prev"/><name>a6</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LD</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>area1</name></decl>,<decl><type ref="prev"/><name>area2</name></decl>,<decl><type ref="prev"/><name>area3</name></decl>,<decl><type ref="prev"/><name>harea</name></decl>,<decl><type ref="prev"/><name>tri</name></decl>,<decl><type ref="prev"/><name>l1</name></decl>,<decl><type ref="prev"/><name>l2</name></decl>,<decl><type ref="prev"/><name>l3</name></decl>,<decl><type ref="prev"/><name>area4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>ee</name><operator>&gt;&gt;</operator><name>f</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a2</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a3</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a4</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a5</name> <operator>=</operator> <name>ee</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a6</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    <comment type="line">//bug4(a1,a2,a3,a4);</comment>
    
    <comment type="line">//cs = cos ( 120.0 * PI / 180.0 );</comment>
    <expr_stmt><expr><name>l1</name> <operator>=</operator> <operator>(</operator><call><name>sqrtl</name><argument_list>(<argument><expr><operator>(</operator><name>a1</name><operator>*</operator><name>a1</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a2</name><operator>*</operator><name>a2</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a1</name><operator>*</operator><name>a2</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>l2</name> <operator>=</operator> <operator>(</operator><call><name>sqrtl</name><argument_list>(<argument><expr><operator>(</operator><name>a3</name><operator>*</operator><name>a3</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a4</name><operator>*</operator><name>a4</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a3</name><operator>*</operator><name>a4</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>l3</name> <operator>=</operator> <operator>(</operator><call><name>sqrtl</name><argument_list>(<argument><expr><operator>(</operator><name>a5</name><operator>*</operator><name>a5</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a6</name><operator>*</operator><name>a6</name><operator>)</operator><operator>+</operator><operator>(</operator><name>a5</name><operator>*</operator><name>a6</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <comment type="line">//bug3(l1,l2,l3);</comment>
    
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>a1</name><operator>+</operator><name>a2</name><operator>+</operator><name>l1</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>area1</name> <operator>=</operator> <call><name>sqrtl</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l1</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>a3</name><operator>+</operator><name>a4</name><operator>+</operator><name>l2</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>area2</name> <operator>=</operator> <call><name>sqrtl</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a3</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a4</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>a5</name><operator>+</operator><name>a6</name><operator>+</operator><name>l3</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>area3</name> <operator>=</operator> <call><name>sqrtl</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a5</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>a6</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><name>l1</name><operator>+</operator><name>l2</name><operator>+</operator><name>l3</name><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>area4</name> <operator>=</operator> <call><name>sqrtl</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><name>l3</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>harea</name> <operator>=</operator> <name>area1</name><operator>+</operator><name>area2</name><operator>+</operator><name>area3</name><operator>+</operator><name>area4</name></expr>;</expr_stmt>
    
    <comment type="line">//bug1(harea);</comment>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <operator>(</operator><literal type="number">1.0</literal><operator>+</operator><literal type="number">1.0</literal><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><literal type="number">2.0</literal></expr>;</expr_stmt>
    <comment type="line">//bug1(s1);</comment>
    <expr_stmt><expr><name>tri</name> <operator>=</operator> <call><name>sqrtl</name><argument_list>(<argument><expr><name>s1</name><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>s1</name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//bug1(tri);</comment>
    <decl_stmt><decl><type><name>LD</name></type> <name>ans</name> <init>= <expr><operator>(</operator><name>harea</name><operator>/</operator><name>tri</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="line">//bug1(ans);</comment>
    <expr_stmt><expr><name>ans1</name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>LD</name></type> <name>temp1</name> <init>= <expr><name>ans1</name><operator>*</operator><name>tri</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LD</name></type> <name>temp2</name> <init>= <expr><operator>(</operator><name>ans1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>tri</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LD</name></type> <name>temp3</name> <init>= <expr><operator>(</operator><name>ans1</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>tri</name></expr></init></decl>;</decl_stmt>
    
    <if>if<condition>(<expr><call><name>double_equals</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>,<argument><expr><name>harea</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    
    <elseif>else <if>if<condition>(<expr><call><name>double_equals</name><argument_list>(<argument><expr><name>temp2</name></expr></argument>,<argument><expr><name>harea</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    
    <elseif>else <if>if<condition>(<expr><call><name>double_equals</name><argument_list>(<argument><expr><name>temp3</name></expr></argument>,<argument><expr><name>harea</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif></if>
    
    
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
