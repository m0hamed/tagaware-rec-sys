<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12389447.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">// eddy1021</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>double</name></type> <name>D</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod9</name></cpp:macro> <cpp:value>1000000009ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod7</name></cpp:macro> <cpp:value>1000000007ll</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro>  <cpp:value>1023456789ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF16</name></cpp:macro> <cpp:value>10000000000000000ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SE</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MT</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-9</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>_x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>_tmp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>_tc</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>    
    <while>while<condition>( <expr><operator>(</operator><name><name>_tc</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>_tc</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator><operator>&amp;&amp;</operator><name>_tc</name><operator>!=</operator><literal type="char">'-'</literal></expr> )</condition> <block type="pseudo"><expr_stmt><expr><name>_tc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if<condition>( <expr><name>_tc</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>_tc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr> <operator>,</operator> <expr><name>_tmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <while>while<condition>(<expr><name>_tc</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>_tc</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>_x</name><operator>*=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>_x</name><operator>+=</operator><operator>(</operator><name>_tc</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>_tc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>_x</name><operator>*</operator><name>_tmp</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>mypow</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>_a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>_x</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>_mod</name></decl></parameter> )</parameter_list><block>{
    <if>if<condition>( <expr><name>_x</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1ll</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>_tmp</name> <init>= <expr><call><name>mypow</name><argument_list>( <argument><expr><name>_a</name></expr></argument> , <argument><expr><name>_x</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>_mod</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>_tmp</name> <operator>=</operator> <operator>(</operator> <name>_tmp</name> <operator>*</operator> <name>_tmp</name> <operator>)</operator> <operator>%</operator> <name>_mod</name></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>_x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>_tmp</name> <operator>=</operator> <operator>(</operator> <name>_tmp</name> <operator>*</operator> <name>_a</name> <operator>)</operator> <operator>%</operator> <name>_mod</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>_tmp</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>equal</name><parameter_list>( <parameter><decl><type><name>D</name></type> <name>_x</name></decl></parameter> ,  <parameter><decl><type><name>D</name></type> <name>_y</name></decl></parameter> )</parameter_list><block>{
    <return>return <expr><name>_x</name> <operator>&gt;</operator> <name>_y</name> <operator>-</operator> <name>eps</name> <operator>&amp;&amp;</operator> <name>_x</name> <operator>&lt;</operator> <name>_y</name> <operator>+</operator> <name>eps</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>__</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>cs</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/*********default*********/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200010</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>build</name><parameter_list>()</parameter_list><block>{

}</block></function>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>Sl</name></decl>, <decl><type ref="prev"/><name>Sr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>k</name></decl> , <decl><type ref="prev"/><name><name>a</name><index>[ <expr><name>N</name></expr> ]</index></name></decl> , <decl><type ref="prev"/><name><name>l</name><index>[ <expr><name>N</name></expr> ]</index></name></decl> , <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>getint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control><block>{
        <if>if<condition>( <expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>%</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>l</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>Sl</name><index>[ <expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>/</operator> <name>k</name></expr> ]</index></name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>Sl</name><index>[ <expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name> <operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr> )</control><block>{
        <if>if<condition>( <expr><call><name><name>Sr</name><operator>.</operator><name>count</name></name><argument_list>( <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>k</name></expr></argument> )</argument_list></call></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>l</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name><name>Sr</name><index>[ <expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>*</operator> <name>k</name></expr> ]</index></name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>Sr</name><index>[ <expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> ]</index></name> <operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    __ = getint();</comment>
    <while>while<condition>( <expr><name>__</name> <operator>--</operator></expr> )</condition><block>{
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
