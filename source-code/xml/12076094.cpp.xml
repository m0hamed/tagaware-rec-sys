<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12076094.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>min1</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>y</name> <operator>&lt;=</operator> <name>t</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>s</name><operator>+=</operator><operator>(</operator><ternary><condition><expr><name>t</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>y</name><operator>)</operator></expr>?</condition><then><expr><literal type="char">'1'</literal></expr></then><else>:<expr><literal type="char">'0'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if></block></for>
        <expr_stmt><expr><name>min1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>min1</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>s</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>min1</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'-'</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>c</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>}</block></then></if></elseif></if>
            }</block></for>
        <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>b2</name> <init>= <expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>o</name><init>=<expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><name>b1</name></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>b2</name><operator>=</operator><name>y</name></expr>;</expr_stmt> <break>break;</break>}</block></then></if></block></for>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>substr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>o</name><operator>-</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans2</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><literal type="number">30</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>ans2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ans2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name><operator>+</operator><name>ans2</name></expr>;</expr_stmt>
}</block></function></unit>
