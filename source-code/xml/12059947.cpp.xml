<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12059947.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>rmp</name></decl>,<decl><type ref="prev"/><name>mp</name></decl>,<decl><type ref="prev"/><name>lmp</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>lmp</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>lmp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rmp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>rmp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ele</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>it</name><operator>!=</operator><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <comment type="line">//cout &lt;&lt; it-&gt;first &lt;&lt; ", " &lt;&lt; it-&gt;second &lt;&lt; "; " &lt;&lt; ele &lt;&lt; "," &lt;&lt; best &lt;&lt; "\n";</comment>
        <if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>&gt;</operator><name>best</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>best</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ele</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>==</operator><name>best</name></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>rmp</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>-</operator><name><name>lmp</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>]</index></name><operator>&lt;</operator><name><name>rmp</name><index>[<expr><name>ele</name></expr>]</index></name><operator>-</operator><name><name>lmp</name><index>[<expr><name>ele</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>best</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ele</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
            }</block></then></if>
            
            
        }</block></then></if></elseif></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>lmp</name><index>[<expr><name>ele</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>rmp</name><index>[<expr><name>ele</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
