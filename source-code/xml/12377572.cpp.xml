<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12377572.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name></cpp:macro> <cpp:value>1e-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NIL</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dis</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">// A class that represents an undirected graph</comment>
<class>class <name>Graph</name>
<block>{<private type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>V</name></decl>;</decl_stmt>    <comment type="line">// No. of vertices</comment>
    <decl_stmt><decl><type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>*</modifier></type><name>adj</name></decl>;</decl_stmt>    <comment type="line">// A dynamic array of adjacency lists</comment>
    <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>vis</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>bridgeUtil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name><name>visited</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>disc</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>low</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>parent</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
</private><public>public:
    <constructor_decl><name>Graph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>,<parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>vis</name></decl></parameter>)</parameter_list>;</constructor_decl>   <comment type="line">// Constructor</comment>
    <function_decl><type><name>void</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>   <comment type="line">// function to add an edge to graph</comment>
    <function_decl><type><name>void</name></type> <name>bridge</name><parameter_list>()</parameter_list>;</function_decl>    <comment type="line">// prints all bridges</comment>
</public>}</block>;</class>

<constructor><name><name>Graph</name><operator>::</operator><name>Graph</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>,<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>vis</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>V</name></name> <operator>=</operator> <name>V</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>vis</name></name><operator>=</operator><name>vis</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>adj</name> <operator>=</operator> <operator>new</operator> <name><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><index>[<expr><name>V</name></expr>]</index></name></expr>;</expr_stmt>
}</block></constructor>

<function><type><name>void</name></type> <name><name>Graph</name><operator>::</operator><name>addEdge</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>adj</name><index>[<expr><name>w</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Note: the graph is undirected</comment>
}</block></function>

<comment type="line">// A recursive function that finds and prints bridges using DFS traversal</comment>
<comment type="line">// u --&gt; The vertex to be visited next</comment>
<comment type="line">// visited[] --&gt; keeps tract of visited vertices</comment>
<comment type="line">// disc[] --&gt; Stores discovery times of visited vertices</comment>
<comment type="line">// parent[] --&gt; Stores parent vertices in DFS tree</comment>
<function><type><name>void</name></type> <name><name>Graph</name><operator>::</operator><name>bridgeUtil</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name><name>visited</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>disc</name><index>[]</index></name></decl></parameter>,
                                       <parameter><decl><type><name>int</name></type> <name><name>low</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>parent</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">// A static variable is used for simplicity, we can avoid use of static</comment>
    <comment type="line">// variable by passing a pointer.</comment>
    <decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Mark the current node as visited</comment>
    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <comment type="line">// Initialize discovery time and low value</comment>
    <expr_stmt><expr><name><name>disc</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>time</name></expr>;</expr_stmt>

    <comment type="line">// Go through all vertices aadjacent to this</comment>
    <decl_stmt><decl><type><name><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// v is current adjacent of u</comment>

        <comment type="line">// If v is not visited yet, then recur for it</comment>
        <if>if <condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bridgeUtil</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>disc</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check if the subtree rooted with v has a connection to</comment>
            <comment type="line">// one of the ancestors of u</comment>
            <expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name>  <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If the lowest vertex reachable from subtree under v is</comment>
            <comment type="line">// below u in DFS tree, then u-v is a bridge</comment>
            <if>if <condition>(<expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name><name>disc</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
              <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name><operator>(</operator><operator>*</operator><name>i</name><operator>)</operator><operator>.</operator><name>S</name></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
        }</block></then>

        <comment type="line">// Update low value of u for parent function calls.</comment>
        <elseif>else <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name>  <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>disc</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>
}</block></function>

<comment type="line">// DFS based function to find all bridges. It uses recursive function bridgeUtil()</comment>
<function><type><name>void</name></type> <name><name>Graph</name><operator>::</operator><name>bridge</name></name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// Mark all the vertices as not visited</comment>
    <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>visited</name> <init>= <expr><operator>new</operator> <name><name>bool</name><index>[<expr><name>V</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>disc</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>V</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>low</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>V</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>parent</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>V</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Initialize parent and visited arrays</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></for>

    <comment type="line">// Call the recursive helper function to find Bridges</comment>
    <comment type="line">// in DFS tree rooted with vertex 'i'</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>visited</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>bridgeUtil</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>visited</name></expr></argument>, <argument><expr><name>disc</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>void</name></type> <name>dij</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name><name>g</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>nd</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>&lt;</operator><name>w</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>ww</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>g</name><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>v</name><operator>=</operator><name><name>g</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ww</name><operator>=</operator><name><name>g</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>w</name><operator>+</operator><name>ww</name><operator>&lt;</operator><name><name>dis</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>ww</name><operator>+</operator><name>w</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>ww</name><operator>+</operator><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name><name>G</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rG</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    freopen("input.txt","r",stdin);</comment>
<comment type="line">//    freopen("output.txt","w",stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt><expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>el</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name><operator>&gt;&gt;</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>u</name></expr><operator>,</operator><expr><operator>--</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rG</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>el</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>dij</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>G</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dij</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>rG</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sp</name><init>=<expr><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Graph</name></type> <name>gg</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>vis</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> ,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>ss</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>el</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>w</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>w</name><operator>==</operator><name>sp</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>ss</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{<expr_stmt><expr><call><name><name>gg</name><operator>.</operator><name>addEdge</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ss</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name><name>gg</name><operator>.</operator><name>bridge</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>k</name><operator>:</operator><name>ss</name></expr></init>)</control><block>{
        <if>if<condition>(<expr><call><name><name>k</name><operator>.</operator><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>k</name><operator>.</operator><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>k</name><operator>.</operator><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></for></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>sp</name><operator>--</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>el</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>w</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>=</operator><name><name>el</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        }</block></then><elseif>else <if>if<condition>(<expr><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><name>sp</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"CAN "</literal><operator>&lt;&lt;</operator><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>w</name><operator>-</operator><name>sp</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then></if></elseif><else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
}</block></function>
</unit>
