<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12171890.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>save</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>save</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name><name>save</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>save</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//  cout&lt;&lt;"ans = "&lt;&lt;ans&lt;&lt;endl;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><name>ans</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>save</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>save</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><name><name>save</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>save</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>sum</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>sum</name><operator>==</operator><name><name>save</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>last</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>sum</name><operator>==</operator><name><name>save</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>last</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name>last</name><operator>+</operator><name>l</name><operator>+</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>last</name><operator>+=</operator><name>r</name><operator>+</operator><name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name><operator>--</operator></expr>;</expr_stmt>
        <comment type="line">//cout&lt;&lt;"ans = "&lt;&lt;ans&lt;&lt;endl;</comment>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
