<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12381370.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>G1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>G2</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>K</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it2</name><init>=<expr><call><name><name>G2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>K</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>it1</name></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>it2</name><operator>!=</operator><call><name><name>G2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>it2</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>it2</name><operator>=</operator><call><name><name>G2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>it1</name><operator>=</operator><call><name><name>G1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>it2</name><operator>!=</operator><call><name><name>G2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>it1</name><operator>!=</operator><call><name><name>G1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>G2</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>it2</name><operator>-&gt;</operator><name>second</name></name><operator>+</operator><name><name>it1</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>it2</name><operator>==</operator><call><name><name>G2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>it1</name><operator>!=</operator><call><name><name>G1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>G2</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>it1</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><name>it2</name><operator>=</operator><call><name><name>G2</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>K</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>it1</name><operator>=</operator><call><name><name>G1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><call><name><name>G1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>G1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>G1</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>G1</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
