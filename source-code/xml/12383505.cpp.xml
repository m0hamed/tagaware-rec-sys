<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12383505.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<struct>struct <name>Edge</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>edge</name><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>edgeNum</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>clearEdge</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>edge</name><index>[<expr><name>edgeNum</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>u</name></expr>, <expr><name>v</name></expr>, <expr><name>w</name></expr>, <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>edgeNum</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name><name>visit</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>que</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>distS</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>distT</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>spfa</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name><name>dist</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>front</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rear</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dist</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>, <argument><expr>sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <operator>*</operator> <name>MAXN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>visit</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>visit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>visit</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>que</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>front</name> <operator>!=</operator> <name>rear</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>que</name><index>[<expr><name>front</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>++</operator><name>front</name> <operator>&gt;=</operator> <name>MAXN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>front</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>filter</name></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><name><name>visit</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>visit</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>front</name> <operator>!=</operator> <name>rear</name> <operator>&amp;&amp;</operator> <name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name><name>que</name><index>[<expr><name>front</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><operator>--</operator><name>front</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>front</name> <operator>=</operator> <name>MAXN</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name><name>que</name><index>[<expr><name>front</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name><name>que</name><index>[<expr><name>rear</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                        <if>if <condition>(<expr><operator>++</operator><name>rear</name> <operator>&gt;=</operator> <name>MAXN</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>rear</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></else></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name><name>visit</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>dfn</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>low</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>timeStamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>bridge</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>timeStamp</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>f</name> <operator>==</operator> <name>i</name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>distT</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>+</operator> <name><name>distS</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name><name>distT</name><index>[<expr><name>s</name></expr>]</index></name><operator>)</operator> <operator>||</operator>
            <operator>(</operator><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>distS</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>+</operator> <name><name>distT</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name><name>distS</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>bridge</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dfn</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dfn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearEdge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>spfa</name><argument_list>(<argument><expr><name>distS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>spfa</name><argument_list>(<argument><expr><name>distT</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>dfn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>shortest</name> <init>= <expr><name><name>distS</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>bridge</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>distS</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>distT</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;=</operator> <name>shortest</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>, <argument><expr><name><name>distS</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>+</operator> <name><name>distT</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <name>shortest</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

   		  	 		 						 	  	 	   	</unit>
