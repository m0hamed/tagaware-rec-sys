<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12543785.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>bool</name></type> <name><name>notPal</name><index>[<expr><literal type="number">10000001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>primes</name></decl>, <decl><type ref="prev"/><name>pals</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>backtr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>pos</name> <operator>==</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>base</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		}</block></then></if>
		<for>for<control>(<init>;</init> <condition><expr><name>start</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>toAdd</name> <init>= <expr><name>v</name> <operator>/</operator> <name>base</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>toAdd</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>base</name> <operator>*=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>pals</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>digit</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<for>for<control>(<init>;</init> <condition><expr><name>digit</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>digit</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>backtr</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>digit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>notPal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>notPal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name><name>notPal</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name><name>primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10000000</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>notPal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>backtr</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>pals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pals</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
<comment type="block">/*
	int s = 0, e = 10000001, ans = -1;
	while(s &lt; e) {
		int mid = (s + e) / 2;
		long long prn = upper_bound(primes.begin(), primes.end(), mid)  - primes.begin();
		long long paln = upper_bound(pals.begin(), pals.end(), mid) - pals.begin();
		if(prn * q &lt;= paln * p) {
			ans = mid;
			s = mid + 1;
		} else e = mid;
	}

	int base = ans;
	for(int i = 0; i &lt; 1000; i++) {
		int mid = base + i;*/</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><literal type="number">10000000</literal></expr></init></decl>;</init> <condition><expr><name>mid</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>mid</name><operator>--</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>prn</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>primes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>primes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call>  <operator>-</operator> <call><name><name>primes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>paln</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>pals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pals</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>pals</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>prn</name> <operator>*</operator> <name>q</name> <operator>&lt;=</operator> <name>paln</name> <operator>*</operator> <name>p</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>


	<if>if<condition>(<expr><name>ans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree"</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
