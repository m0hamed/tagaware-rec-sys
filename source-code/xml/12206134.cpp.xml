<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12206134.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Number</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>occurances</name></decl>, <decl><type ref="prev"/><name>first_index</name></decl>, <decl><type ref="prev"/><name>last_index</name></decl>;</decl_stmt>
    <constructor><name>Number</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><name>occurances</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>first_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>last_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Number</name></type> <name><name>arr2</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>max_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Number</name></expr></argument>&gt;</argument_list></name></type> <name>maxes</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>occurances</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>first_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>occurances</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>last_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>occurances</name> <operator>&gt;</operator> <name>max_</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>maxes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>maxes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_</name> <operator>=</operator> <name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>occurances</name></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>occurances</name> <operator>==</operator> <name>max_</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>maxes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>arr2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>min_</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Number</name><modifier>*</modifier></type> <name>for_print</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>maxes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>maxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_index</name> <operator>-</operator> <name><name>maxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_index</name> <operator>&lt;</operator> <name>min_</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>for_print</name> <operator>=</operator> <operator>&amp;</operator><name><name>maxes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>min_</name> <operator>=</operator> <name><name>maxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>last_index</name> <operator>-</operator> <name><name>maxes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first_index</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name><name>for_print</name> <operator>-&gt;</operator> <name>first_index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>for_print</name> <operator>-&gt;</operator> <name>last_index</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
