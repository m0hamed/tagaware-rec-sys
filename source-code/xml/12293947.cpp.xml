<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12293947.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//In the name of god</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>situation</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>next</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>situation</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><name><name>situation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>situation</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>situation</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>mk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>mk</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>

		<expr_stmt><expr><call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<if>if <condition>(<expr><name>mk</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
