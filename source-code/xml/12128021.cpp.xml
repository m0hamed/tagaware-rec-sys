<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12128021.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ios&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(X,Y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(X)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=0;X&lt;N;X++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP2</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>L</name></type></parameter>,<parameter><type><name>R</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=L;X&lt;=R;X++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEP</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>R</name></type></parameter>,<parameter><type><name>L</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int X=R;X&gt;=L;X--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(A,X,sizeof(A))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro> <cpp:value>iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_V</name></cpp:macro> <cpp:value>10101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>412345</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(X &amp; (-X))</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>PPI</name>;</typedef>


<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>data</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>mark</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_n</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>n</name><operator>&lt;</operator><name>_n</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>n</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mark</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mark</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>push_down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>~</operator><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><name>l</name><operator>+</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>val</name><operator>*</operator><operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>val</name><operator>*</operator><operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<comment type="line">//Ê¹Ä³ï¿½ï¿½ï¿½ï¿½ä¶¼ï¿½ï¿½Îª0ï¿½ï¿½1  </comment>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>nl</name><operator>&lt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>nr</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator><operator>*</operator><name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mark</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
		<return>return ;</return>	
	}</block></then></if>
	<if>if<condition>(<expr><name>nl</name><operator>&gt;=</operator><name>r</name> <operator>||</operator> <name>nr</name><operator>&lt;=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return ;</return></block></then></if>
	<expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><name>l</name><operator>+</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>num</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>getsum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>nl</name><operator>&lt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>nr</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>data</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>nl</name><operator>&gt;=</operator><name>r</name> <operator>||</operator><name>nr</name><operator>&lt;=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>push_down</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><name>l</name><operator>+</operator><name>r</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>temp</name><operator>+=</operator><call><name>getsum</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>temp</name><operator>+=</operator><call><name>getsum</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>k</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>temp</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>modifyup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>getsum</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
	<comment type="line">//	cout&lt;&lt;"98: "&lt;&lt;i&lt;&lt;endl;</comment>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nl</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nl</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>modifydown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>getsum</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
		<comment type="line">//cout&lt;&lt;"111: "&lt;&lt;i&lt;&lt;endl;</comment>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nl</name></expr></argument>,<argument><expr><name>nl</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>nl</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<decl_stmt><decl><type><name>_</name>
	<name>int</name></type> <name>xn</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>str</name></expr>;</expr_stmt><expr_stmt><expr><name>xn</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>xn</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>
	
	<while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>sign</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>sign</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>modifyup</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else 
			<block type="pseudo"><expr_stmt><expr><call><name>modifydown</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>xn</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><call><name>getsum</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>char</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>



</unit>
