<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12205345.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>

<comment type="line">//using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//#pragma comment(linker, "/STACK:16777216")</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Foreach</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((c).begin()) i = (c).begin(); i != (c).end(); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(a);(i) &lt; (b); ++(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i)=(a);(i) &gt; (b); --(i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;(i) : (c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) * (a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin() , a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Error</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"( "&lt;&lt;#a&lt;&lt;" , "&lt;&lt;#b&lt;&lt;" ) = ( "&lt;&lt;(a)&lt;&lt;" , "&lt;&lt;(b)&lt;&lt;" )\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#a&lt;&lt;" = ( "&lt;&lt;((a).x)&lt;&lt;" , "&lt;&lt;((a).y)&lt;&lt;" )\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>coud</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;fixed &lt;&lt; setprecision((b)) &lt;&lt; (a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&lt;&lt;1)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>umap</name></cpp:macro> <cpp:value>unordered_map</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//template &lt;typename T&gt; using os =  tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2010</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><literal type="number">400001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>invf</name><index>[<expr><literal type="number">400001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>e</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1LL</literal></expr>;</return>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>e</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if></elseif>
    <else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>p</name><init>=<expr><call><name>power</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>e</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>e</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <return>return <expr><operator>(</operator><name>p</name><operator>*</operator><name>p</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><name>p</name><operator>*</operator><name>p</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>=</operator><operator>(</operator><name>p</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            <return>return <expr><name>p</name></expr>;</return>
        }</block></else></if>
    }</block></else></if>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>pii</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>pii</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>!=</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>)</condition><then><block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return>
    }</block></then>
    <else>else<block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>factor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>answer1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>answer1</name><operator>=</operator><name><name>f</name><index>[<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    <comment type="line">//printf("(%d,%d)-&gt;(%d,%d)-&gt;%d,%d,%d\n",v1[i].x,v1[i].y,v1[j].x,v1[j].y,v1[i].x-v1[j].x-v1[i].y+v1[j].y,v1[i].x-v1[j].x,v1[j].y-v1[i].y);</comment>
    <expr_stmt><expr><name>answer1</name><operator>=</operator><operator>(</operator><name>answer1</name><operator>*</operator><name><name>invf</name><index>[<expr><operator>(</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>answer1</name><operator>=</operator><operator>(</operator><name>answer1</name><operator>*</operator><name><name>invf</name><index>[<expr><operator>(</operator><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>answer1</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>preprocess</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1LL</literal></expr>;</expr_stmt>

    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">400001</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><name><name>invf</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name><operator>=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">400000</literal></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>rof</name><argument_list>(<argument>i</argument>,<argument><literal type="number">399999</literal></argument>,<argument>-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>invf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>invf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <comment type="line">//printf("%lld ",invf[i]);</comment>
    }</block>

    <return>return ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><call><name>preprocess</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">//printf("%lld\n",f[5]);</comment>

    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*rep(t1,v1){
        printf("(%d,%d) ",t1.x,t1.y);
    }*/</comment>

    <comment type="line">//assert(v1[0].x==0 &amp;&amp; v1[0].y==h);</comment>
    <comment type="line">//assert(v1[v1.size()-1].x==w &amp;&amp; v1[v1.size()-1].y==0);</comment>

    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v1.size()</argument>)</argument_list></macro><block>{
        <macro><name>For</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>v1.size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&lt;=</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&lt;=</operator><name><name>v1</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><call><name>factor</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><call><name>factor</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                <comment type="line">//printf("%lld-&gt;(%d,%d)\n",factor(i,j),i,j);</comment>
            }</block></then></if>
        }</block>
        <comment type="line">//printf("%d-&gt;(%lld,%lld)\n",i,dp[i][0],dp[i][1]);</comment>
    }</block>

    <decl_stmt><decl><type><name>ll</name></type> <name>answer1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>answer1</name><operator>=</operator><operator>(</operator><operator>(</operator><name><name>dp</name><index>[<expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>dp</name><index>[<expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>answer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function></unit>
