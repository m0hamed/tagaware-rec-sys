<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12378637.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD2</name> <init>= <expr><literal type="number">1000000000</literal> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD3</name> <init>= <expr><literal type="number">1000000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>,
    <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>
<name>dijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>dists</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INF</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dists</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>next</name> <init>= <expr><operator>*</operator><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><name><name>next</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>next</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>e</name> <operator>:</operator> <name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></init>)</control> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>du</name> <init>= <expr><name>d</name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>du</name> <operator>&lt;</operator> <name><name>dists</name><index>[<expr><name><name>e</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dists</name><index>[<expr><name><name>e</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name>du</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>du</name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vs</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ways</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ways2</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ways3</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ways</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways2</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways3</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>dists</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>==</operator> <name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ways</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>+=</operator> <name><name>ways</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ways</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>ways2</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>+=</operator> <name><name>ways2</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ways2</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>%=</operator> <name>MOD2</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>ways3</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>+=</operator> <name><name>ways3</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ways3</name><index>[<expr><name><name>g</name><index>[<expr><name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name> <operator>%=</operator> <name>MOD3</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <return>return <expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>dists</name></expr></argument>, <argument><expr><name>ways</name></expr></argument>, <argument><expr><name>ways2</name></expr></argument>, <argument><expr><name>ways3</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>gt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gt</name><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>auto</name></type> <name>dists_ways</name> <init>= <expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>dists_ways_t</name> <init>= <expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>gt</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>dists</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>dists_t</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ways</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ways2</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ways3</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>auto</name></type> <name>ways_t</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ways_t2</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>ways_t3</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dists_ways_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>dists</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>dists_t</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>==</operator> <name><name>dists</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator>
                <name><name>ways</name><index>[<expr><name>a</name></expr>]</index></name> <operator>*</operator> <name><name>ways_t</name><index>[<expr><name>b</name></expr>]</index></name> <operator>%</operator> <name>MOD</name> <operator>==</operator> <name><name>ways</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator>
                <name><name>ways2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>*</operator> <name><name>ways_t2</name><index>[<expr><name>b</name></expr>]</index></name> <operator>%</operator> <name>MOD2</name> <operator>==</operator> <name><name>ways2</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator>
                <name><name>ways3</name><index>[<expr><name>a</name></expr>]</index></name> <operator>*</operator> <name><name>ways_t3</name><index>[<expr><name>b</name></expr>]</index></name> <operator>%</operator> <name>MOD3</name> <operator>==</operator> <name><name>ways3</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>reduc</name> <init>= <expr><operator>(</operator><name><name>dists</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>dists_t</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <name>w</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>dists</name><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>reduc</name> <operator>&lt;</operator> <name>w</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name>reduc</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
