<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12502010.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>m</name><operator>&lt;</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>m</name><operator>&gt;</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>m</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>   
}</block></function></unit>
