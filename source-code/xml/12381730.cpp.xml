<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12381730.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<comment type="line">//ifstream in("input.txt");</comment>
<comment type="line">//ofstream out("output.txt");</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAX_N</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cut</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>w</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>high</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>deik</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1000000000000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>temp</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>y</name> <init>= <expr><name><name>temp</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>y</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>y</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>y</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>high</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>x</name> <init>= <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name><name>h</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>high</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>==</operator> <name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>cut</name><index>[<expr><name><name>x</name><operator>.</operator><name>second</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>high</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>high</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>high</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else
            <if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>second</name></name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>high</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>high</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator>  <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>--</operator></expr><operator>,</operator> <expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name> <operator>&gt;&gt;</operator> <name>e</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>q</name><operator>--</operator></expr><operator>,</operator> <expr><name>e</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>q</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>q</name></expr><operator>,</operator> <expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>e</name></expr><operator>,</operator> <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>deik</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>deik</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>g</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>g</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>cut</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>dist</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
