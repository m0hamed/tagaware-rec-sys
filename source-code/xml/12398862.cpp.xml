<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12398862.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>visit</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>old</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>visit</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>visit</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %c %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>||</operator><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>old</name><operator>=</operator><name>maxn</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxn</name><operator>=</operator><name>old</name></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></then></if>
        <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'+'</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>maxn</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>maxn</name><operator>=</operator><name>ans</name></expr>;</expr_stmt></block></then></if>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>visit</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>maxn</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>maxn</name><operator>=</operator><name>ans</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if></elseif></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>old</name></expr></argument>,<argument><expr><name>maxn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
6
- 2
- 3
+ 2
+ 3
- 2
- 3

*/</comment>

  			    						 	  	  	   				</unit>
