<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12432182.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:1024000000,1024000000"</cpp:literal><name>)</name></cpp:pragma> 
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>have</name> <init>= <expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>*</operator><call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>u</name><operator>-</operator><name>d</name><operator>)</operator><operator>/</operator><name>a</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nt</name> <init>= <expr><operator>(</operator><name>num</name><operator>-</operator><name>d</name><operator>)</operator><operator>/</operator><name>a</name><operator>+</operator><operator>(</operator><name>u</name><operator>-</operator><name>num</name><operator>)</operator><operator>/</operator><name>a</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>have</name> <operator>=</operator> <name>have</name> <operator>-</operator> <operator>(</operator><name>now</name> <operator>-</operator> <name>nt</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>have</name><operator>&lt;</operator><name>k</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
