<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12527190.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">500</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// i&amp;1, x0, x1</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>str</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>step</name> <operator>&lt;=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>step</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cur</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x1</name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>x1</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>step</name></expr>;</condition> <incr><expr><name>x1</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>x2</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>x2</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>-</operator> <name>x2</name> <operator>&lt;=</operator> <name>step</name></expr>;</condition> <incr><expr><name>x2</name><operator>--</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>step</name> <operator>-</operator> <operator>(</operator><name>x1</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>y2</name> <init>= <expr><name>m</name> <operator>-</operator> <name>step</name> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>x2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>!=</operator> <name><name>str</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><operator>(</operator><name>m</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
