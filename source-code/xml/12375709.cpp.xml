<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12375709.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block" format="doxygen">/*********************************************************************\
   |--\        ---       /\        |-----------| -----   /-------|    |
   |   \        |       /  \       |               |    /             |
   |    \       |      /    \      |               |   |              |
   |     \      |     /      \     |               |   |----|         |
   |      \     |    / ------ \    |-------|       |        |-----|   |
   |       \    |   /          \   |               |              |   |
   |        \   |  /            \  |               |              /   |
  ---        -------            ------           ----- |---------/    |
                                                                      |
    codeforces = nfssdq  ||  topcoder = nafis007                      |
    mail = nafis_sadique@yahoo.com || nfssdq@gmail.com                |
    IIT,Jahangirnagar University(41)                                  |
                                                                      |
**********************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro>         <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro>         <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>         <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>         <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>         <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>        <cpp:value>INT_MAX/3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro>        <cpp:value>1000000007ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>         <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>linf</name></cpp:macro>       <cpp:value>(1ll&lt;&lt;60)-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int I = (A); I &lt; (B); ++I)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>FOR(I,0,N)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((A).begin(), (A).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>set0</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>memset(ar,0,sizeof ar)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsort</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setinf</name><parameter_list>(<parameter><type><name>ar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(ar,126,sizeof ar)</cpp:value></cpp:define>

<comment type="line">//cout &lt;&lt; fixed &lt;&lt; setprecision(20) &lt;&lt; p &lt;&lt; endl;</comment>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init> <condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>
    }</block></for> <return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>ret</name></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>modinverse</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>vc</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>id</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>isBridge</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>,<decl><type ref="prev"/><name><name>in</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>val</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc[v].size()</argument>)</argument_list></macro>
    <block>{
		<if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>val</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>val</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>val</name><index>[<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>val</name><index>[<expr><name><name>vc</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>in</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>isBridge</name><index>[<expr><name><name>id</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
		}</block></else></if>
	}</block>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>vc_f</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vp_f</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>id_f</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>vc_r</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vp_r</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>edge</name><index>[<expr><literal type="number">100001</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dis_f</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dis_r</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt; <argument><expr><name>pil</name></expr></argument>, <argument><expr><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>pil</name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt; <argument><expr><name>pil</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vc_f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vc_r</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>id_f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vp_f</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>vp_r</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>w</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>w</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>==</operator> <name>w</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>=</operator> <operator>-</operator><name>w</name></expr>;</expr_stmt></block></then></if>
        }</block></then></if></elseif></if>
    }</block>

    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setinf</name><argument_list>(<argument><expr><name>dis_f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dis_f</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>pil</name></type> <name>pp</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>&gt;</operator> <name><name>dis_f</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc_f[pp.yy].size()</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>vc_f</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dis_f</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>+</operator> <name><name>vp_f</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>dis_f</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>+</operator> <name><name>vp_f</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>dis_f</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block></while>

    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setinf</name><argument_list>(<argument><expr><name>dis_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dis_r</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>pil</name></type> <name>pp</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>&gt;</operator> <name><name>dis_r</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc_r[pp.yy].size()</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>vc_r</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dis_r</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>+</operator> <name><name>vp_r</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>dis_r</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>pp</name><operator>.</operator><name>xx</name></name> <operator>+</operator> <name><name>vp_r</name><index>[<expr><name><name>pp</name><operator>.</operator><name>yy</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>dis_r</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block></while>

<comment type="line">//    FOR(i, 1, n + 1) cout &lt;&lt; dis_f[i] &lt;&lt; " " &lt;&lt; dis_r[i] &lt;&lt; endl;</comment>

    <decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>set0</name><argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name><name>Q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>vc_f[c].size()</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>dis_r</name><index>[ <expr><name><name>vc_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>+</operator> <name><name>vp_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>dis_r</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name><name>vis</name><index>[ <expr><name><name>vc_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>vc_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>vis</name><index>[ <expr><name><name>vc_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>vc_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>vc</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>id</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>( <argument><expr><name><name>id_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vc</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>id</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>( <argument><expr><name><name>id_f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<comment type="line">//                cout &lt;&lt; c &lt;&lt; " " &lt;&lt; p &lt;&lt; endl;</comment>
            }</block></then></if>
        }</block>
    }</block></while>

    <expr_stmt><expr><call><name>set0</name><argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LL</name></type> <name>sp</name> <init>= <expr><name><name>dis_f</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro><block>{
<comment type="line">//        cout &lt;&lt; isBridge[i] &lt;&lt; endl;</comment>
        <decl_stmt><decl><type><name>LL</name></type> <name>x</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>isBridge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>mm</name><index>[ <expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> ]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>dis_f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>dis_r</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">1ll</literal> <operator>&lt;</operator> <name>sp</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>v</name> <init>= <expr><name>sp</name> <operator>-</operator> <name><name>dis_f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>dis_r</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>w</name><operator>-</operator><name>v</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name>w</name> <operator>-</operator> <name>v</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block></then></if></elseif> <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block>
}</block></function>
</unit>
