<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12048588.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valarray&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)(x);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=(int)(x);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=((int)(x)-1);i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREPS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=((int)(x));i&gt;0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>container</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(container).begin(), (container).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>container</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(container).rbegin(), (container).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>container</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)container.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(ALL(v)); v.erase( unique(v.begin(), v.end()), v.end() );</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{
<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt> <macro><name>FOR</name><argument_list>(<argument>it</argument>,<argument>t</argument>)</argument_list></macro> <block>{<if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>}</block> <expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{
<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"{"</literal></expr>;</expr_stmt> <macro><name>FOR</name><argument_list>(<argument>it</argument>,<argument>t</argument>)</argument_list></macro> <block>{<if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>}</block> <expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"}"</literal></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>t</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">","</literal><operator>&lt;&lt;</operator><name><name>t</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>first</name></name><operator>+</operator><name><name>t</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>second</name></name><operator>+</operator><name><name>t</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>S</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>t</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>t</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">28</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>rej</name></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>itr</argument>, <argument>q</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name><operator>-</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><call><name><name>rej</name><operator>.</operator><name>eb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block>
	<expr_stmt><expr><call><name><name>rej</name><operator>.</operator><name>eb</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>rej</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>rej</name></expr></range></decl></init>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>ans</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>x</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>ans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Game cheated!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
