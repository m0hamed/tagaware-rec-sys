<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12179397.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><name>M_PI</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>st</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><name>pi</name><operator>/</operator><literal type="number">3</literal></expr>,<expr><name>pi</name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr>,<expr><name>pi</name><operator>+</operator><name>pi</name><operator>/</operator><literal type="number">3</literal></expr>,<expr><name>pi</name><operator>+</operator><name>pi</name><operator>/</operator><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>xs</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>bb</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>bb</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><name>s</name><operator>/</operator><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dep</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>w</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	printf("%lf %lf %lf %lf %d\n",x,y,s,w,dep);</comment>
	<if>if<condition>(<expr><name>bb</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">6</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>eps</name><operator>&amp;&amp;</operator><call><name>abs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>eps</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>double</name></type> <name>ww</name><init>=<expr><name>w</name><operator>+</operator><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>xx</name><init>=<expr><name>x</name><operator>+</operator><call><name>cos</name><argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>a</name><index>[<expr><name>dep</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>yy</name><init>=<expr><name>y</name><operator>+</operator><call><name>sin</name><argument_list>(<argument><expr><name>ww</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>a</name><index>[<expr><name>dep</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>ss</name><init>=<expr><name>s</name></expr></init></decl>;</decl_stmt>
<comment type="line">//		if(dep!=5)</comment>
		<expr_stmt><expr><name>ss</name><operator>+=</operator><operator>(</operator><name>x</name><operator>*</operator><name>yy</name><operator>-</operator><name>y</name><operator>*</operator><name>xx</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>dep</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>,<argument><expr><name>ww</name></expr></argument>,<argument><expr><name>ss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	system("pause");</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
