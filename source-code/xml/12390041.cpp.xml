<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12390041.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">201221187</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100000</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator><literal type="number">1e16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name><name>edges</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>redges</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ways</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rways</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rdis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>W</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>LL</name> <modifier>*</modifier></type><name>dis</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ways</name></decl></parameter>,<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name><modifier>*</modifier></type><name>edges</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></expr></argument>,
        <argument><expr><name><name>std</name><operator>::</operator><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name>que</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>fill</name></name><argument_list>(<argument><expr><name>dis</name></expr></argument>,<argument><expr><name>dis</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dis</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>( <argument><expr><block>{<expr><name><name>dis</name><index>[<expr><name>s</name></expr>]</index></name></expr>,<expr><name>s</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tmp</name> <operator>!=</operator> <name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>t</name> <range>: <expr><name><name>edges</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>t</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>W</name><index>[<expr><name><name>t</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>&lt;</operator> <name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>ways</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name></expr>,<expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>( <expr><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>==</operator> <name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name></expr> )</condition><then><block>{
                <expr_stmt><expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+=</operator> <name><name>ways</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if<condition>( <expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;=</operator> <name>MOD</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif></if>
        }</block></for>
    }</block></while>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>answer</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>dis</name></expr></argument>,<argument><expr><name>ways</name></expr></argument>,<argument><expr><name>edges</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>rdis</name></expr></argument>,<argument><expr><name>rways</name></expr></argument>,<argument><expr><name>redges</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>u</name></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>tt</name> <range>: <expr><name><name>edges</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>tt</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>W</name><index>[ <expr><name><name>tt</name><operator>.</operator><name>second</name></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>tt</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>+</operator> <name><name>rdis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name>
               <operator>&amp;&amp;</operator> <name><name>ways</name><index>[<expr><name>u</name></expr>]</index></name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>rways</name><index>[<expr><name>v</name></expr>]</index></name> <operator>%</operator> <name>MOD</name> <operator>==</operator> <name><name>ways</name><index>[<expr><name>t</name></expr>]</index></name></expr> )</condition><then> <block>{
                <expr_stmt><expr><name><name>answer</name><index>[ <expr><name>id</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>( <expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>-</operator> <name><name>rdis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>-</operator> <name><name>rdis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>answer</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>w</name> <operator>-</operator> <name>tmp</name></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name><name>answer</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{
        <if>if<condition>(<expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if<condition>( <expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edges</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>redges</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
