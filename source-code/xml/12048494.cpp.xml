<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12048494.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">110100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>S</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name><name>nr</name><index>[<expr><name>S</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>aint</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>N</name></expr>]</index><index>[<expr><name>S</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ca</name><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s2</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>ca</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr>]</index></name> <operator>=</operator> <name><name>ca</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr>]</index><index>[<expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>s2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>recalc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>)</parameter_list> <block>{

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>aint</name><index>[<expr><name>nod</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>aint</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poz1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poz2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cr</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>pozx</name> <operator>&gt;=</operator> <name>poz1</name> <operator>&amp;&amp;</operator> <name>poz2</name> <operator>&gt;=</operator> <name>pozy</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name> <operator>=</operator> <name>cr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>aint</name><index>[<expr><name>nod</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aint</name><index>[<expr><name>nod</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aint</name><index>[<expr><name>nod</name></expr>]</index><index>[<expr><name>cr</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>pozy</name> <operator>-</operator> <name>pozx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>pozx</name> <operator>+</operator> <name>pozy</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>lup</name><argument_list>(<argument><expr><name>nod</name></expr></argument>, <argument><expr><name>mid</name> <operator>-</operator> <name>pozx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pozy</name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if<condition>(<expr><name>mid</name> <operator>&gt;=</operator> <name>poz1</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr></argument>, <argument><expr><name>pozx</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>poz1</name></expr></argument>, <argument><expr><name>poz2</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>mid</name> <operator>&lt;</operator> <name>poz2</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pozy</name></expr></argument>, <argument><expr><name>poz1</name></expr></argument>, <argument><expr><name>poz2</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name>recalc</name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>calcnr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poz1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poz2</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>pozx</name> <operator>&gt;=</operator> <name>poz1</name> <operator>&amp;&amp;</operator> <name>pozy</name> <operator>&lt;=</operator> <name>poz2</name></expr>)</condition><then> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>aint</name><index>[<expr><name>nod</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>pozx</name> <operator>+</operator> <name>pozy</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

     <if>if<condition>(<expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>lup</name><argument_list>(<argument><expr><name>nod</name></expr></argument>, <argument><expr><name>mid</name> <operator>-</operator> <name>pozx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pozy</name> <operator>-</operator> <name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if<condition>(<expr><name>mid</name> <operator>&gt;=</operator> <name>poz1</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>calcnr</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr></argument>, <argument><expr><name>pozx</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>poz1</name></expr></argument>, <argument><expr><name>poz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>mid</name> <operator>&lt;</operator> <name>poz2</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>calcnr</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pozy</name></expr></argument>, <argument><expr><name>poz1</name></expr></argument>, <argument><expr><name>poz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name>recalc</name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pozy</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name></expr>)</condition><then> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>pozy</name> <operator>-</operator> <name>pozx</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><call>(<name>char</name>)<argument_list>(<argument><expr><name><name>ca</name><index>[<expr><name>nod</name></expr>]</index></name> <operator>+</operator> <literal type="char">'a'</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>pozx</name> <operator>+</operator> <name>pozy</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name></expr></argument>, <argument><expr><name>pozx</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>nod</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pozy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <comment type="line">//freopen("ttt", "r", stdin);</comment>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>ii</name> <operator>&lt;=</operator> <name>q</name></expr>;</condition> <incr><expr><operator>++</operator><name>ii</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>op</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>calcnr</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>op</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>S</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pc</name> <operator>+=</operator> <name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if></block></for>
        }</block></then>
        <else>else <block>{

            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pc</name></expr></argument>, <argument><expr><name>pc</name> <operator>+</operator> <name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pc</name> <operator>+=</operator> <name><name>nr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if></block></for>
        }</block></else></if>

        <comment type="line">//print(1, 1, n);</comment>
        <comment type="line">//cout &lt;&lt; "\n";</comment>
    }</block></for>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
