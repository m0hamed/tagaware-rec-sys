<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12376042.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>limite</name><init>=<expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>modulo</name><init>=<expr><literal type="number">999999929</literal></expr></init></decl>;</decl_stmt><comment type="line">//1e9+7;</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>modulo2</name><init>=<expr><literal type="number">999999937</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>infinito</name><init>=<expr><literal type="number">100000000000000LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>calcula</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>limite</name></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name><name>dist</name><index>[<expr><name>limite</name></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name><name>cuantos</name><index>[<expr><name>limite</name></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name><name>cuantos2</name><index>[<expr><name>limite</name></expr>]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>infinito</name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cuantos</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cuantos2</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>not</operator> <call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>du</name><init>=<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>du</name><operator>==</operator><name><name>dist</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ar</name><init>=<expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>int</name><argument_list>(<argument><expr><call><name><name>ar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>duv</name><init>=<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>du</name><operator>+</operator><name>duv</name><operator>&lt;</operator><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>du</name><operator>+</operator><name>duv</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cuantos</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>cuantos</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cuantos2</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>cuantos2</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then> <elseif>else <if>if <condition>(<expr><name>du</name><operator>+</operator><name>duv</name><operator>==</operator><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name><name>cuantos</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>cuantos</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>cuantos</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>modulo</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>cuantos2</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>cuantos2</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>cuantos2</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>modulo</name></expr>;</expr_stmt>
	}</block></then></if></elseif></if>
      }</block></for>
    }</block></then></if>
  }</block></while>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dist</name><index>[<expr><name>limite</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>distinv</name><index>[<expr><name>limite</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cuantos</name><index>[<expr><name>limite</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cuantosinv</name><index>[<expr><name>limite</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cuantos2</name><index>[<expr><name>limite</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cuantosinv2</name><index>[<expr><name>limite</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ginv</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>au</name><index>[<expr><name>limite</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>av</name><index>[<expr><name>limite</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>al</name><index>[<expr><name>limite</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name><operator>&gt;&gt;</operator><name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>au</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>l</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ginv</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>calcula</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name>dist</name></expr></argument>,<argument><expr><name>cuantos</name></expr></argument>,<argument><expr><name>cuantos2</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>calcula</name><argument_list>(<argument><expr><name>ginv</name></expr></argument>,<argument><expr><name>distinv</name></expr></argument>,<argument><expr><name>cuantosinv</name></expr></argument>,<argument><expr><name>cuantosinv2</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>au</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>av</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>al</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>dsuvt</name><init>=<expr><name><name>dist</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name>l</name><operator>+</operator><name><name>distinv</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>dsuvt</name><operator>==</operator><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>cuantos</name><index>[<expr><name>u</name></expr>]</index></name><operator>*</operator><name><name>cuantosinv</name><index>[<expr><name>v</name></expr>]</index></name><operator>%</operator><name>modulo</name><operator>==</operator><name><name>cuantos</name><index>[<expr><name>t</name></expr>]</index></name> <operator>and</operator> <name><name>cuantos2</name><index>[<expr><name>u</name></expr>]</index></name><operator>*</operator><name><name>cuantosinv2</name><index>[<expr><name>v</name></expr>]</index></name><operator>%</operator><name>modulo</name><operator>==</operator><name><name>cuantos2</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"CAN 1"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
      <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></then> <else>else <block>{
      <comment type="line">//cout&lt;&lt;u&lt;&lt;" "&lt;&lt;v&lt;&lt;" "&lt;&lt;l&lt;&lt;" "&lt;&lt;dsuvt&lt;&lt;" "&lt;&lt;dist[t]&lt;&lt;endl;</comment>
      <if>if <condition>(<expr><name>dsuvt</name><operator>-</operator><operator>(</operator><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;=</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"CAN "</literal><operator>&lt;&lt;</operator><name>dsuvt</name><operator>-</operator><operator>(</operator><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
  }</block></for>
}</block></function>
</unit>
