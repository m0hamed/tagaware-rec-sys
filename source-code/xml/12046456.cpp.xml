<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12046456.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>apple</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>bool</name></type> <name>cmpR</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>pos</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>pos</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmpL</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>pos</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>pos</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>node</name></type> <name><name>left</name><index>[<expr><literal type="number">108</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>node</name></type> <name><name>right</name><index>[<expr><literal type="number">108</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numOfLeft</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numOfRight</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>,<decl><type ref="prev"/><name>apple</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>numOfLeft</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>numOfRight</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>pos</name><operator>&gt;&gt;</operator><name>apple</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>pos</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>left</name><index>[<expr><operator>++</operator><name>numOfLeft</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>left</name><index>[<expr><name>numOfLeft</name></expr>]</index></name><operator>.</operator><name>apple</name><operator>=</operator><name>apple</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>right</name><index>[<expr><operator>++</operator><name>numOfRight</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>right</name><index>[<expr><name>numOfRight</name></expr>]</index></name><operator>.</operator><name>apple</name><operator>=</operator><name>apple</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>left</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>numOfLeft</name></expr></argument>,<argument><expr><name>cmpL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>right</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>right</name><operator>+</operator><name>numOfRight</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmpR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>answer</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>numOfLeft</name><operator>==</operator><name>numOfRight</name></expr>)</condition><then><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>numOfLeft</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>answer</name><operator>=</operator><name>answer</name><operator>+</operator><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name><operator>+</operator><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>numOfLeft</name></expr></argument>,<argument><expr><name>numOfRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>numOfLeft</name><operator>&gt;</operator><name>numOfRight</name></expr>)</condition><then><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>temp</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>answer</name><operator>+=</operator><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name></expr>;</expr_stmt>
                }</block></for>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>temp</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>answer</name><operator>+=</operator><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name></expr>;</expr_stmt>
                }</block></for>
            }</block></then>
            <else>else<block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>temp</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>answer</name><operator>+=</operator><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name></expr>;</expr_stmt>
                }</block></for>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>temp</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name>answer</name><operator>+=</operator><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>apple</name></expr>;</expr_stmt>
                }</block></for>
            }</block></else></if>
        }</block></else></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>answer</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
