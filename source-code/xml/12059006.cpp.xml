<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12059006.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/*
 * This is my code,
 * my code is amazing...
 */</comment>
<comment type="line">//Template v2.0</comment>
<comment type="line">//iostream is too mainstream</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<comment type="line">//clibraries</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<comment type="line">//defines</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pld</name></cpp:macro> <cpp:value>pair&lt;lld,lld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvll</name></cpp:macro> <cpp:value>vector&lt;vll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000000000047</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>en</name><init>=<expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{cerr&lt;&lt;x&lt;&lt;en;}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prime</name></cpp:macro> <cpp:value>47</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lprime</name></cpp:macro> <cpp:value>1000000000000000009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lldmin</name></cpp:macro> <cpp:value>LDBL_MIN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>V</name></decl>;</decl_stmt>

        <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>ans</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>l</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">//cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;en;</comment>
            <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>


            <decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>l</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ff</name><operator>.</operator><name>ff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ff</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <comment type="line">//cout&lt;&lt;"xxx "&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;en;</comment>
            <if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Game cheated!"</literal><operator>&lt;&lt;</operator><name>en</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>

            <comment type="line">//cout&lt;&lt;"som tu"&lt;&lt;endl;</comment>
            <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>M</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>M</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name>r</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>V</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>V</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>le</name><init>=<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ff</name><operator>.</operator><name>ff</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ll</name></type> <name>ri</name><init>=<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ff</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>
                    <comment type="line">//cout&lt;&lt;"le="&lt;&lt;le&lt;&lt;" ri="&lt;&lt;ri&lt;&lt;en; </comment>
                    <while>while<condition>(<expr><call><name><name>M</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>M</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name><operator>&lt;=</operator><name>ri</name></expr>)</condition><block>{
                        <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>M</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>auto</name></type> <name>x</name><init>=<expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>M</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>&gt;</operator><name>ri</name></expr>)</condition><then><block>{
                            <expr_stmt><expr><name><name>M</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                        }</block></then></if>

                    }</block></while>
                    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>M</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
                        <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>&gt;=</operator><name>le</name></expr>)</condition><then><block>{
                            <decl_stmt><decl><type><name>auto</name></type> <name>x</name><init>=<expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name><operator>=</operator><name>le</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                            <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>&gt;</operator><name>ri</name></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name><name>M</name><index>[<expr><name>ri</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></then></if>

                        }</block></then></if>

                    }</block></then></if>

                }</block></then></if>


            }</block></for>
<comment type="block">/*
            cout&lt;&lt;en;
            for(auto it=M.begin(); it!=M.end(); it++)
                cout&lt;&lt;it-&gt;first&lt;&lt;" "&lt;&lt;it-&gt;second&lt;&lt;en;

cout&lt;&lt;en;
*/</comment>
  <comment type="line">//          cout&lt;&lt;"aj tu som"&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><call><name><name>M</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name><operator>==</operator><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>M</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name><operator>&lt;&lt;</operator><name>en</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <if>if<condition>(<expr><call><name><name>M</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Data not sufficient!"</literal><operator>&lt;&lt;</operator><name>en</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Game cheated!"</literal><operator>&lt;&lt;</operator><name>en</name></expr>;</expr_stmt>
}</block></function>
</unit>
