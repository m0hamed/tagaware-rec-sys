<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12291361.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s2</name></decl>;</decl_stmt>
<function><type><name>string</name></type> <name>getOrderedStr</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>str</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>t</name><operator>-</operator><name>s</name><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <return>return <expr><call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>string</name></type> <name>str1</name><init>=<expr><call><name>getOrderedStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><operator>(</operator><name>t</name><operator>-</operator><name>s</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>str2</name><init>=<expr><call><name>getOrderedStr</name><argument_list>(<argument><expr><name>str</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><operator>(</operator><name>t</name><operator>-</operator><name>s</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>str1</name><operator>&lt;=</operator><name>str2</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>str1</name><operator>+</operator><name>str2</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><name>str2</name><operator>+</operator><name>str1</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>s1</name><operator>&gt;&gt;</operator><name>s2</name></expr>)</condition><block>{
        <if>if<condition>(<expr><call><name>getOrderedStr</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>s1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><call><name>getOrderedStr</name><argument_list>(<argument><expr><name>s2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name><name>s2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
