<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12377802.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//#include "testlib.h"</comment>
<comment type="line">//#include &lt;spoj.h&gt;</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod1</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod2</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dist</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>cnt1</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>cnt2</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>looked</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{
    
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>looked</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>, <expr><name>start</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name><name>looked</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name><name>looked</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>!=</operator> <name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            
            <expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>+=</operator> <name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>+=</operator> <name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>&gt;=</operator> <name>mod1</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>cnt1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>-=</operator> <name>mod1</name></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>&gt;=</operator> <name>mod2</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>cnt2</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>-=</operator> <name>mod2</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>, <expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>void</name></type> <name>megaDj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e17</literal></expr>;</expr_stmt></block></for>
    
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name></expr>, <expr><name>start</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <while>while <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>!=</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>&gt;</operator> <name>d</name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>, <expr><name><name>to</name><operator>.</operator><name>first</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><call><name>megaDj</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>megaDj</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>DIST</name> <init>= <expr><name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>C</name> <init>= <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        
        
        <if>if <condition>(<expr><name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>DIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        
        <if>if <condition>( <expr><name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name> <operator>+</operator> <name>C</name> <operator>==</operator> <name>DIST</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>(</operator><name><name>cnt1</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>*</operator> <name><name>cnt1</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod1</name> <operator>==</operator> <name><name>cnt1</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator>
             <operator>(</operator><name><name>cnt2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>*</operator> <name><name>cnt2</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod2</name> <operator>==</operator> <name><name>cnt2</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
        
        
        
        <if>if <condition>(<expr><name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>+</operator> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>DIST</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name>C</name> <operator>-</operator> <operator>(</operator><name>DIST</name> <operator>-</operator> <name><name>dist</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>A</name></expr>]</index></name> <operator>-</operator> <name><name>dist</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>B</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        
        
        
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
