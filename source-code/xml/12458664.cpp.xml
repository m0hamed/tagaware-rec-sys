<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12458664.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXVAL</name></cpp:macro> <cpp:value>2000000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>bool</name></type> <name><name>prime</name><index>[ <expr><name>MAXVAL</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>criba</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>prime</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>prime</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prime</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>prime</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>MAXVAL</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <if>if <condition>( <expr><name><name>prime</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><then><block>{
            <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>MAXVAL</name></expr> ;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr> )</control>
                <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>toi</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>istringstream</name></type> <name>is</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><name>is</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt><return>return <expr><name>x</name></expr>;</return>}</block></function>    
<function><type><name>string</name></type> <name>tos</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>stringstream</name></type> <name>st</name></decl>;</decl_stmt> <expr_stmt><expr><name>st</name><operator>&lt;&lt;</operator><name>t</name></expr>;</expr_stmt><return>return <expr><call><name><name>st</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl> ,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl> , <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>reverse</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> )</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>x</name></expr> )</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>x</name> <operator>%</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>num</name> <operator>=</operator> <name>num</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>t</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>num</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>criba</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>PI</name><argument_list>( <argument><expr><name>MAXVAL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></decl> , <decl><type ref="prev"/><name>RUB</name><argument_list>( <argument><expr><name>MAXVAL</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAXVAL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>reverse</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>( <expr><name>u</name> <operator>==</operator> <name>i</name></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><name>u</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>                            
            <expr_stmt><expr><name><name>RUB</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>       
        <expr_stmt><expr><name><name>RUB</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>RUB</name><index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>RUB</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
        <if>if <condition>( <expr><name><name>prime</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>PI</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>PI</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>PI</name><index>[ <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>PI</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>maxi</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2000000</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b1</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control><block>{
        <if>if <condition>( <expr><operator>(</operator><name>long</name> <name>long</name> <operator>)</operator><name>q</name><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>)</operator><name><name>PI</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>&lt;=</operator> <operator>(</operator><name>long</name> <name>long</name> <operator>)</operator><name>p</name><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>)</operator><name><name>RUB</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>b1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>maxi</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
    }</block></for>       
    <if>if <condition>( <expr><name>maxi</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Palindromic tree is better than splay tree"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>maxi</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
