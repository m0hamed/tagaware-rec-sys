<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12365565.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
 <decl_stmt><decl><type><name>int</name></type> <name>visitors</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>fromstart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
 <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <decl_stmt><decl><type><name>char</name></type> <name>io</name></decl>, <decl><type ref="prev"/><name>ws</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[<expr><literal type="number">110</literal></expr>]</index></name></decl>;</decl_stmt>
 <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>inl</name></decl>;</decl_stmt>
 <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c%c%d "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ws</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if>if <condition>(<expr><name>io</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then> <block>{
     <expr_stmt><expr><call><name><name>inl</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
     <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>inl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }</block></then>
   <elseif>else 
   <if>if <condition>(<expr><name>io</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{
     <if>if <condition>(<expr><call><name><name>inl</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
       <expr_stmt><expr><call><name><name>inl</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>inl</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
     }</block></then>
     <else>else
     <block>{
       <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
       <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
	 <expr_stmt><expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	 <if>if <condition>(<expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;</operator><name>visitors</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>visitors</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
       }</block></for> 
     }</block></else></if>
   }</block></then></if></elseif></if>
   <if>if <condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>visitors</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>visitors</name> <operator>=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
   <comment type="line">//printf("%d %d %c %d\n", i, in[i], io, x);</comment>
 }</block></for>
 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>visitors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
