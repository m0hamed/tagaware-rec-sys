<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12199334.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>bool</name></type> <name>kiemtra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>)</parameter_list> <block>{
     <if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name>y1</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
     <if>if<condition>(<expr><name>y</name> <operator>&gt;=</operator> <name>x1</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name>y1</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
     <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//  freopen("in.txt","r",stdin);</comment>
    <comment type="line">//  freopen("out.txt","w",stdout);</comment>
     <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>check</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>check</name> <operator>=</operator> <name>check</name> <operator>+</operator> <call><name>kiemtra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a1</name> <operator>+</operator> <name>a2</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>check</name> <operator>=</operator> <name>check</name> <operator>+</operator> <call><name>kiemtra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>b1</name> <operator>+</operator> <name>b2</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>check</name> <operator>=</operator> <name>check</name> <operator>+</operator> <call><name>kiemtra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a1</name> <operator>+</operator> <name>b2</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>check</name> <operator>=</operator> <name>check</name> <operator>+</operator> <call><name>kiemtra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a2</name> <operator>+</operator> <name>b1</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>check</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
