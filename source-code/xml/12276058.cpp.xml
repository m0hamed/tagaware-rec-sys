<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12276058.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>bool</name></type> <name><name>board</name><index>[<expr><literal type="number">1002</literal></expr>]</index><index>[<expr><literal type="number">1002</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">1002</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1002</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></for></block></for>
        
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>fill1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startY</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startX</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>startY</name></expr></init></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name><operator>&lt;</operator><name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr><operator>,</operator><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>startX</name></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name><operator>&lt;</operator><name>width</name></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr><operator>,</operator><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
}</block></function>

<function><type><name>bool</name></type> <name>can</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>w</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>j</name></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>w</name><operator>&amp;&amp;</operator><operator>!</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
                    
                <comment type="line">//cout &lt;&lt; j &lt;&lt; " --&gt; " &lt;&lt; k &lt;&lt; " &lt; " &lt;&lt; n &lt;&lt; endl;</comment>
                    
                <if>if <condition>(<expr><operator>(</operator><name>k</name><operator>-</operator><name>j</name><operator>)</operator><operator>&lt;</operator><name>n</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                    
                <for>for<control>(<init><expr><name>k</name><operator>=</operator><name>i</name></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>h</name><operator>&amp;&amp;</operator><operator>!</operator><name><name>board</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
                
                <if>if <condition>(<expr><operator>(</operator><name>k</name><operator>-</operator><name>i</name><operator>)</operator><operator>&lt;</operator><name>s</name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                
                <comment type="line">//cout &lt;&lt; "-- fill " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; s &lt;&lt; " " &lt;&lt; n &lt;&lt; endl;</comment>
                <expr_stmt><expr><call><name>fill1</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if>
        }</block></for>
    }</block></for>
    
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>h</name></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    
    <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name>clear</name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
