<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12181094.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ifstream</name></type> <name>f1</name><argument_list>(<argument><expr><literal type="string">"input.in"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>f</name><init>= <expr><name>cin</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NMAX</name></cpp:macro> <cpp:value>200200</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>egal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st2</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>st1</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>= <expr><name>st2</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator> <name>dr1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>equivalent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>( <expr><call><name>egal</name><argument_list>(<argument><expr><name>st1</name></expr></argument>, <argument><expr><name>dr1</name></expr></argument>, <argument><expr><name>st2</name></expr></argument>)</argument_list></call></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

    <if>if <condition>( <expr><operator>(</operator><name>dr1</name> <operator>-</operator> <name>st1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m1</name><init>= <expr><operator>(</operator><name>st1</name><operator>+</operator><name>dr1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m2</name><init>= <expr><operator>(</operator><name>st2</name><operator>+</operator><name>dr2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>( <expr><call><name>equivalent</name><argument_list>(<argument><expr><name>st1</name></expr></argument>, <argument><expr><name>m1</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>st2</name></expr></argument>, <argument><expr><name>m2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equivalent</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>dr1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>dr2</name></expr></argument>)</argument_list></call></expr> )</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
        <elseif>else
            <if>if <condition>(<expr><call><name>equivalent</name><argument_list>(<argument><expr><name>st1</name></expr></argument>,<argument><expr><name>m1</name><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>m2</name></expr></argument>, <argument><expr><name>dr2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equivalent</name><argument_list>(<argument><expr><name>m1</name></expr></argument>, <argument><expr><name>dr1</name></expr></argument>, <argument><expr><name>st2</name></expr></argument>, <argument><expr><name>m2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if></elseif></if>

    }</block></then></if>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>f</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>equivalent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
