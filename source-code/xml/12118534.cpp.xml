<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12118534.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>apples</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>int</name></expr></argument>, <argument><expr><name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>negativos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>int</name></expr></argument>, <argument><expr><name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>positivos</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{

        <expr_stmt><expr><name>apples</name> <operator>=</operator> <literal type="number">0l</literal></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block>{

           <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{

                <macro><name>negativos</name></macro><expr_stmt><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>pair&lt;long int</argument>,<argument>long int&gt;(abs(x), a)</argument>)</argument_list></macro></expr>;</expr_stmt>

           }</block></then> <else>else <block>{

                <macro><name>positivos</name></macro><expr_stmt><expr><operator>.</operator><macro><name>insert</name><argument_list>(<argument>pair&lt;long int</argument>,<argument>long int&gt;(x, a)</argument>)</argument_list></macro></expr>;</expr_stmt>
           }</block></else></if>
        }</block></while>

        <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>int</name></expr></argument>, <argument><expr><name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>itp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>int</name></expr></argument>, <argument><expr><name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>itn</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>itn</name> <operator>=</operator> <call><name><name>negativos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>itp</name> <operator>=</operator> <call><name><name>positivos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>negativos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>positivos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

            <while>while <condition>(<expr><name>itp</name> <operator>!=</operator> <call><name><name>positivos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itp</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itn</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>itn</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>itp</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>

        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>negativos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>positivos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

            <while>while <condition>(<expr><name>itp</name> <operator>!=</operator> <call><name><name>positivos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itp</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itn</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>itn</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>itp</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itn</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>

        }</block></then></if></elseif> <else>else <block>{

            <while>while <condition>(<expr><name>itn</name> <operator>!=</operator> <call><name><name>negativos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{

                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itp</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itn</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>itn</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>itp</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>

            <expr_stmt><expr><name>apples</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>itp</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>apples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>negativos</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>positivos</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
