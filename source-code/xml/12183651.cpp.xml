<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12183651.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_P</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_P</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)printf(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>to</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(x=0;x&lt;to;x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp; x:arr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a.begin()),(a.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINUS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0xff,sizeof(a))</cpp:value></cpp:define>
<comment type="line">//-------------------------------------------------------</comment>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{
		<if>if<condition>(<expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>_P</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
			<if>if<condition>(<expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>_P</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		}</block></then></if>
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>B</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
	<expr_stmt><expr><call><name>_P</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>argc-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>s</name><operator>+=</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>s.size()</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
