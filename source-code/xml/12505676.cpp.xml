<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12505676.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;n)</cpp:value></cpp:define>
<comment type="line">//#define sl(n) scanf("%lld",&amp;n)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%f",&amp;n)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",n)</cpp:value></cpp:define>
<comment type="line">//#define pl(n) printf("%lld\n",n)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s\n",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%.0f\n",n)</cpp:value></cpp:define>

<comment type="line">//#define ll long long int</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r0</name></cpp:macro> <cpp:value>return 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>decit</name></cpp:macro> <cpp:value>int i,j,k</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>decit</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">5</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>FR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">2</literal></argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>min</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>min</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>FR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>min</name></expr>]</index></name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>min</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
        }</block>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>min</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>min</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>FR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><index>[<expr><name>min</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>min</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block>
    <expr_stmt><expr><call><name>pi</name><argument_list>(<argument><expr><name>min</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r0</name></expr>;</expr_stmt>
}</block></function>
</unit>
