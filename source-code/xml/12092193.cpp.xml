<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12092193.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>zeros</name></decl>, <decl><type ref="prev"/><name>ones</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>id</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>L</name> <operator>=</operator> <name>L</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>R</name> <operator>=</operator> <name>R</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>zeros</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>L</name></expr>, <expr><name>R</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>ones</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>L</name></expr>, <expr><name>R</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>   
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>maxL</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxR</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>maxL</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxR</name> <operator>=</operator> <name>maxR</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ansL</name> <init>= <expr><name>maxL</name></expr></init></decl>, <decl><type ref="prev"/><name>ansR</name> <init>= <expr><name>maxR</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>ones</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>ansL</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ansL</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansR</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ansR</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>zeros</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>zeros</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>preL</name> <init>= <expr><name>maxL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>solcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>zeros</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name> <init>= <expr><name><name>zeros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name><name>zeros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>zeros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;=</operator> <name>R</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name><name>zeros</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>preR</name> <init>= <expr><name>L</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>preL</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>preL</name></expr></argument>, <argument><expr><name>ansL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preR</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>preR</name></expr></argument>, <argument><expr><name>ansR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>preL</name> <operator>&lt;=</operator> <name>preR</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>preR</name> <operator>-</operator> <name>preL</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sol</name> <operator>=</operator> <name>preL</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>solcnt</name> <operator>+=</operator> <name>preR</name> <operator>-</operator> <name>preL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>preL</name> <operator>=</operator> <name>R</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>preR</name> <init>= <expr><name>maxR</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>preL</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>preL</name></expr></argument>, <argument><expr><name>ansL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>preR</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>preR</name></expr></argument>, <argument><expr><name>ansR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>preL</name> <operator>&lt;=</operator> <name>preR</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>preR</name> <operator>-</operator> <name>preL</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sol</name> <operator>=</operator> <name>preL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>solcnt</name> <operator>+=</operator> <name>preR</name> <operator>-</operator> <name>preL</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>solcnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>solcnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
