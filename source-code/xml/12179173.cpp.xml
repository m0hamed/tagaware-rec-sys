<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12179173.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>e</name> <operator>&gt;&gt;</operator> <name>f</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>f</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>f</name> <operator>*</operator> <name>a</name> <operator>+</operator> <name>f</name> <operator>*</operator> <name>f</name> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>f</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>a</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>f</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>c</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>c</name> <operator>*</operator> <name>c</name><operator>)</operator></expr>;</expr_stmt>

    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
