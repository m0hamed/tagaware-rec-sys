<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12369871.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>999999</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>getInt</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>getLongLong</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>getDouble</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>char</name></type>  <name>getChar</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Int</name></cpp:macro> <cpp:value>getInt()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Char</name></cpp:macro> <cpp:value>getChar()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I64</name></cpp:macro> <cpp:value>getLongLong()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Double</name></cpp:macro> <cpp:value>getDouble()</cpp:value></cpp:define>
<comment type="line" format="doxygen">/////////////////////////////////</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ansx1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ansx2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ansx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ansm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>Int</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>Int</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>Int</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>ansx1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansx2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansm</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ansm</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ansm</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>ansm</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>


   <comment type="line">// for(int j=0; j&lt;i; j++)</comment>
        <comment type="line">//ansx1+=a[j+1]-a[j];</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>ansx2</name><operator>+=</operator><name><name>a</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>ansx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>ansx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>ansm</name></expr></argument>,<argument><expr><name>ansx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>

</unit>
