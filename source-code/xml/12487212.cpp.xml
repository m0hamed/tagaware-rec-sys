<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12487212.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt; partitionMemo;</comment>

<comment type="line">// long long countClusters(int N) {</comment>
<comment type="line">//   long long possibilities = 1LL;</comment>
<comment type="line">//   for (vector&lt;int&gt; p : partitionMemo[N]) {</comment>
<comment type="line">//     int n = N;</comment>
<comment type="line">//     for (int clusterSize : p) {</comment>
<comment type="line">//       possibilities *= choose[n][clusterSize];</comment>
<comment type="line">//       n -= clusterSize;</comment>
<comment type="line">//       possibilities %= MOD;</comment>
<comment type="line">//     }</comment>
<comment type="line">//   }</comment>
<comment type="line">//   return possibilities;</comment>
<comment type="line">// }</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>                        <comment type="line">// 1 &lt;= N &lt;= 4000</comment>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>choose</name><argument_list>{<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>}</argument_list></decl>;</decl_stmt> <comment type="line">// choose[0][0] = 1</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name><name>choose</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>choose</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><name><name>choose</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>choose</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>choose</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <comment type="line">// first index is number of elements in the set, second index is number of equivalence classes</comment>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>equivalenceRelations</name><argument_list>{<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<expr><literal type="number">1</literal></expr>}</block></expr></argument>}</argument_list></decl>;</decl_stmt> <comment type="line">// no equivalence relations if 0 equivalence classes and 0 elements</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{   <comment type="line">// size of set</comment>
    <expr_stmt><expr><call><name><name>equivalenceRelations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><block>{<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// no equivalence relations if 0 equivalence classes    </comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
      <comment type="line">// assign it to an existing class of the old n - 1 elements, k options, for each equivalence relation</comment>
      <comment type="line">// plus creating a new equivalence class</comment>
      <expr_stmt><expr><call><name><name>equivalenceRelations</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>equivalenceRelations</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><name>k</name><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>+</operator> <name><name>equivalenceRelations</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>equivalenceRelations</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 1 equivalence relation if n equivalence classes, each element equivalent to itself</comment>
  }</block></for>
  <comment type="line">// for (int i = 0; i &lt; equivalenceRelations.size(); ++i) {</comment>
  <comment type="line">//   copy(equivalenceRelations[i].begin(), equivalenceRelations[i].end(), ostream_iterator&lt;int&gt;(cout, " "));</comment>
  <comment type="line">//   cout &lt;&lt; endl;</comment>
  <comment type="line">// }</comment>

  <comment type="line">// for (int i = 0; i &lt; choose.size(); ++i) {</comment>
  <comment type="line">//   copy(choose[i].begin(), choose[i].end(), ostream_iterator&lt;int&gt;(cout, " "));</comment>
  <comment type="line">//   cout &lt;&lt; endl;</comment>
  <comment type="line">// }</comment>

  <comment type="line">// // N^2 possible pairs</comment>
  <comment type="line">// // 2^(N^2) possible relations</comment>

  <comment type="line">// partitionMemo.push_back(vector&lt;vector&lt;int&gt;&gt;());</comment>
  <comment type="line">// for (int i = 1; i &lt; N; ++i) {</comment>
  <comment type="line">//   partitionMemo.push_back(vector&lt;vector&lt;int&gt;&gt;{vector&lt;int&gt;{i}}); // the number itself</comment>
  <comment type="line">//   for (vector&lt;int&gt; p : partitionMemo[i - 1]) {</comment>
  <comment type="line">//     // avoid repeating any partitions by generating decreasing sequences</comment>
  <comment type="line">//     if (p.size() &gt;= 2 &amp;&amp; p.back() &lt; *(p.rbegin() + 1)) {</comment>
  <comment type="line">//       partitionMemo.back().emplace_back(p);</comment>
  <comment type="line">//       ++partitionMemo.back().back().back();</comment>
  <comment type="line">//     }</comment>
  <comment type="line">//     partitionMemo.back().emplace_back(p);</comment>
  <comment type="line">//     partitionMemo.back().back().push_back(1); // add a 1 to everything</comment>
  <comment type="line">//   }</comment>
  <comment type="line">// } </comment>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>equivalenceRelationsBySetSize</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>relations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <range>: <expr><name><name>equivalenceRelations</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>relations</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>relations</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>equivalenceRelationsBySetSize</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>relations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>binaryRelations</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// relations that are symmetric, transitive, but not reflexive</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>binaryRelations</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>equivalenceRelationsBySetSize</name><index>[<expr><name>N</name><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>choose</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>binaryRelations</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>binaryRelations</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
