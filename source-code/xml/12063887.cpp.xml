<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12063887.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;LL,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl> ;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>Q</name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ma</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>h</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><name>Q</name></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>h0</name></decl>,<decl><type ref="prev"/><name>ans</name></decl> ;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h0</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name>L</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>LL</name><operator>)</operator><name>L</name></expr></argument>,<argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h0</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>R</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>LL</name><operator>)</operator><name>R</name></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>h0</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name> <operator>&amp;&amp;</operator> <name>R</name><operator>&lt;</operator><name>L</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr> ;</return>}</block></then>
        <elseif>else <if>if<condition>(<expr><name>R</name><operator>&lt;</operator><name>L</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if></elseif></if>

        <decl_stmt><decl><type><name>LL</name></type> <name>L2</name><init>=<expr><name>L</name><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h</name><operator>-</operator><name>h0</name><operator>)</operator><operator>)</operator></expr></init></decl> , <decl><type ref="prev"/><name>R2</name><init>=<expr><operator>(</operator><name>R</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h</name><operator>-</operator><name>h0</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <if>if<condition>(<expr><name>ans</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>L2</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> <operator>,</operator>
            <expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>R2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>L2</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>R2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ma</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ma</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ma</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>Q</name><operator>++</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mul</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl> ;</decl_stmt>
        <while>while<condition>(<expr><name>j</name><operator>&lt;</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>==</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>F</name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>now</name><operator>+=</operator><name><name>p</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>S</name></expr> ;</expr_stmt></block></while>
        <if>if<condition>(<expr><name>now</name><operator>==</operator><name>Q</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>ans</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mul</name><operator>=</operator><literal type="number">1</literal></expr> ;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>tmp</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr> ;</expr_stmt></block></then></if></elseif></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>ans</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tmp</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr> ;</expr_stmt>
            <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>==</operator><name>tmp</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>mul</name><operator>=</operator><literal type="number">1</literal></expr> ;</expr_stmt></block></else></if>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name>i</name><operator>=</operator><name>j</name></expr> ;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>ans</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>mul</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></else></if>
}</block></function>
</unit>
