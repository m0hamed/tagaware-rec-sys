<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12344839.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<comment type="block">/* printf("%d ", cur); */</comment>
			<if>if <condition>(<expr><name>L</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>cur</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>L</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>cur</name><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>cur</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>
			<if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
			<if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>R</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
			<if>if <condition>(<expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<comment type="block">/* printf("\n"); */</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

  	 				 	 				  		   	     	</unit>
