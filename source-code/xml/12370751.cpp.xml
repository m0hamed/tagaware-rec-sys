<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12370751.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fru</name><parameter_list>(<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int j=0; j&lt;(n); ++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(typeof((v).begin()) it=(v).begin(); it!=(v).end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>G</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(G).begin(),(G).end()</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>D</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inft</name> <init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXM</name> <init>= <expr><literal type="number">106</literal></expr></init></decl>;</decl_stmt><comment type="line">//10^6</comment>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>R</name><index>[<expr><name>MAXM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name><name>S</name><index>[<expr><name>MAXM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAXM</name></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>cond</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<macro><name>fru</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>==</operator><name>a1</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>==</operator><name>a2</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>==</operator><name>a1</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>==</operator><name>a2</name></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><call><name>pii</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><call><name>pii</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>==</operator><name>a1</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>==</operator><name>a2</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&lt;</operator><name>a</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&gt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>b</name></expr>)</condition><then><block>{
					<return>return <expr><literal type="boolean">false</literal></expr>;</return>	
				}</block></then></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&lt;</operator><name>a</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>b</name></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
				}</block></then></if>
			}</block></else></if>
		
		}</block></else></if>
	}</block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>DP</name><index>[<expr><name>MAXM</name></expr>]</index><index>[<expr><name>MAXM</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	printf("rozwazam %d %d\n",a,b);</comment>
	<if>if<condition>(<expr><name><name>DP</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>DP</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>cond</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>get</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>cond</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>b</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>get</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b</name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>cond</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>b</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>b</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>get</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name><name>DP</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>fru</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><macro><name>fru</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>fru</name><argument_list>(<argument>i</argument>,<argument>m</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>string</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="string">"&lt;"</literal></expr>;</expr_stmt>}</block></then></if>
		<if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;="</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="string">"&lt;="</literal></expr>;</expr_stmt>}</block></then></if>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>fru</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<comment type="line">//n at i,i+1</comment>
		<if>if<condition>(<expr><call><name>cond</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">2</literal><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>	
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen("input.in", "r", stdin);</comment>
	<comment type="line">//freopen("output.out", "w", stdout);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><comment type="line">//scanf("%d",&amp;t);</comment>
	<macro><name>fru</name><argument_list>(<argument>i</argument>,<argument>t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
