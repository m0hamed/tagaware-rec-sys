<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12190822.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>bool</name></type> <name>canfit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>a</name><operator>&amp;&amp;</operator><name>y</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>,<decl><type ref="prev"/><name>y2</name></decl>,<decl><type ref="prev"/><name>x3</name></decl>,<decl><type ref="prev"/><name>y3</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x1</name><operator>&gt;&gt;</operator><name>y1</name><operator>&gt;&gt;</operator><name>x2</name><operator>&gt;&gt;</operator><name>y2</name><operator>&gt;&gt;</operator><name>x3</name><operator>&gt;&gt;</operator><name>y3</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x4</name></decl>,<decl><type ref="prev"/><name>y4</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x4</name><operator>=</operator><name>x1</name><operator>-</operator><name>x2</name></expr>;</expr_stmt><expr_stmt><expr><name>y4</name><operator>=</operator><name>y1</name><operator>-</operator><name>y2</name></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;x4&lt;&lt;" "&lt;&lt;y4&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x4</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y4</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x4</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y4</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x4</name><operator>=</operator><name>x1</name><operator>-</operator><name>y2</name></expr>;</expr_stmt><expr_stmt><expr><name>y4</name><operator>=</operator><name>y1</name><operator>-</operator><name>x2</name></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;x4&lt;&lt;" "&lt;&lt;y4&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x4</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y4</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x4</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>canfit</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y4</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt>
		
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
