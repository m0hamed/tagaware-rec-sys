<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12599949.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<comment type="line" format="doxygen">///cout &lt;&lt; fixed &lt;&lt; setprecision(13) &lt;&lt; (double) x &lt;&lt; endl;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>l, mid, rt &lt;&lt; 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>mid + 1, r, rt &lt;&lt; 1 | 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>rt &lt;&lt; 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>rt &lt;&lt; 1 | 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a, b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asd</name></cpp:macro> <cpp:value>puts("asdasdasdasdasdf");</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pl</name>;</typedef>
<comment type="line">//typedef __int64 LL;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">500050</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>xr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>Dep</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dep</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>L</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>R</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dfn</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>dfn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>head</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>head</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
        <expr_stmt><expr><name><name>xr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Dep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>dep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>add</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter> )</parameter_list>
<block>{
    <expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter> )</parameter_list>
<block>{
    <expr_stmt><expr><name><name>L</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>dfn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rp</name><index>[<expr><name><name>L</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Dep</name><index>[<expr><name><name>dep</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name><name>L</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr> )</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dep</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>dep</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>R</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>dfn</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <while>while<condition>( <expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr> )</condition> <block>{
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>u</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>add</name><argument_list>( <argument><expr><name>u</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>Dep</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control> <block>{
                <expr_stmt><expr><name><name>xr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>a</name><index>[<expr><name><name>rp</name><index>[<expr><name><name>Dep</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>xr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>x</name><operator>)</operator></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control>
                <block type="pseudo"><expr_stmt><expr><name><name>xr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>xr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>m</name><operator>--</operator></expr> )</condition> <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>L</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name><name>R</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>h</name> <operator>&lt;</operator> <name><name>dep</name><index>[<expr><name>x</name></expr>]</index></name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>sz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name><name>Dep</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <name><name>Dep</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>X</name> <init>= <expr><call><name>lower_bound</name><argument_list>( <argument><expr><name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><call><name>lower_bound</name><argument_list>( <argument><expr><name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>Dep</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>Y</name> <operator>==</operator> <name>sz</name> <operator>||</operator> <name><name>Dep</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> <operator>&gt;</operator> <name>r</name></expr> )</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>Y</name></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>xr</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name>X</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>^=</operator> <name><name>xr</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>X</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
                <if>if<condition>( <expr><name>tmp</name> <operator>&amp;</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>)</operator></expr> )</condition><then>
                    <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>odd</name></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <if>if<condition>( <expr><name>odd</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></while>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
