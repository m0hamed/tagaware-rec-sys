<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12070382.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>can</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>have</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>zero</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>have</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>have</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>curr</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>curr</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

		<if>if<condition>(<expr><name>curr</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition><then>
			<block type="pseudo"><if>if<condition>(<expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if></block></then></if>    
	}</block></while>
	
	<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name>curr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>curr</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
		
		<if>if<condition>(<expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then> 
			<block type="pseudo"><expr_stmt><expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>bak</name> <init>= <expr><name>curr</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>bakCnt</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>
		
		<if>if<condition>(<expr><name>curr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		
		<while>while<condition>(<expr><name>bak</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>bak</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>bakCnt</name><operator>++</operator></expr>;</expr_stmt>
		
			<if>if<condition>(<expr><name>bak</name> <operator>&gt;=</operator> <name>MAXN</name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			
			<if>if<condition>(<expr><name><name>have</name><index>[<expr><name>bak</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>have</name><index>[<expr><name>bak</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		}</block></while>
	}</block></while>	
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>can</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>can</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
		<expr_stmt><expr><call><name>zero</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>can</name><index>[<expr><name>curr</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<while>while<condition>(<expr><name>curr</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>curr</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

			<if>if<condition>(<expr><name>curr</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
				<if>if<condition>(<expr><operator>!</operator><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>can</name><index>[<expr><name>curr</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>											        
				}</block></then></if>								    
			}</block></then></if>
		}</block></while>

		<expr_stmt><expr><name>curr</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<while>while<condition>(<expr><name>curr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
			<expr_stmt><expr><name>curr</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
			
			<if>if<condition>(<expr><operator>!</operator><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then> 
			<block>{	
				<expr_stmt><expr><name><name>can</name><index>[<expr><name>curr</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>have</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			}</block></then></if>

			<decl_stmt><decl><type><name>int</name></type> <name>bak</name> <init>= <expr><name>curr</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>bakCnt</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>

			<if>if<condition>(<expr><name>curr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>

			<while>while<condition>(<expr><name>bak</name> <operator>&lt;</operator> <name>MAXN</name></expr>)</condition>
			<block>{
				<expr_stmt><expr><name>bak</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>bakCnt</name><operator>++</operator></expr>;</expr_stmt>

				<if>if<condition>(<expr><name>bak</name> <operator>&gt;=</operator> <name>MAXN</name></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>

				<if>if<condition>(<expr><operator>!</operator><name><name>have</name><index>[<expr><name>bak</name></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>have</name><index>[<expr><name>bak</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>can</name><index>[<expr><name>bak</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>bak</name></expr>]</index></name> <operator>+=</operator> <name>bakCnt</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></while>
		}</block></while>
	}</block></for>
		

	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>MAXN</name> <operator>*</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAXN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<comment type="line">//printf("%d: %d %d\n", i, dp[i], cnt[i]);</comment>
		<if>if<condition>(<expr><name><name>can</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>N</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
