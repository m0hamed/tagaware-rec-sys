<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12374943.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">90</literal></expr>]</index><index>[<expr><literal type="number">90</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>e</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>in</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>a</name><operator>&gt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>a</name><operator>&lt;=</operator><name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">5</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>l</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>+</operator><name>l</name><operator>-</operator><literal type="number">3</literal><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><name>l</name><operator>-</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">4</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">4</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>j</name><operator>&lt;</operator><name>n</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><operator>(</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">4</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><operator>(</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">4</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><call><name>in</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>(</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>||</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">5</literal></expr>)</condition><then>
                            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
                    }</block></then></if>
                }</block></for>
                <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
