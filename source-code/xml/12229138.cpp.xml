<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12229138.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fork</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>k</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=k;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ForD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n;i;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RepD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n;i&gt;=0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Forp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int p=pre[x];p;p=next[p])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Forpiter</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int &amp;p=iter[x];p;p=next[p])</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Lson</name></cpp:macro> <cpp:value>(o&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rson</name></cpp:macro> <cpp:value>((o&lt;&lt;1)+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,0,sizeof(a));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMI</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,127,sizeof(a));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,128,sizeof(a));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(2139062143)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>(100000007)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>(400000+10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXQ</name></cpp:macro> <cpp:value>(50000+10)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>F</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>F</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>+</operator><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>)</operator><operator>/</operator><name>F</name><operator>*</operator><name>F</name><operator>+</operator><name>F</name><operator>)</operator><operator>%</operator><name>F</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>%</operator><name>F</name><operator>+</operator><name>b</name><operator>%</operator><name>F</name><operator>)</operator><operator>%</operator><name>F</name></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>_ans</name></decl>;</decl_stmt>
<class>class <name>Stree</name><block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name></type> <name><name>mark</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>tree</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
    <constructor><name>Stree</name><parameter_list>()</parameter_list><block>{
        <macro><name>MEM</name><argument_list>(<argument>mark</argument>)</argument_list></macro> <macro><name>MEM</name><argument_list>(<argument>tree</argument>)</argument_list></macro> 
    }</block></constructor>
    <function><type><name>void</name></type> <name>pushdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>L</name><operator>&lt;</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>mark</name><index>[<expr><name>Lson</name></expr>]</index></name><operator>=</operator><name><name>mark</name><index>[<expr><name>Rson</name></expr>]</index></name><operator>=</operator><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></then></if>
    }</block></function>
    <function><type><name>void</name></type> <name>maintain</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>o</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>R</name><operator>-</operator><name>L</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>L</name><operator>&lt;</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>o</name></expr>]</index></name><operator>=</operator><name><name>tree</name><index>[<expr><name>Lson</name></expr>]</index></name><operator>+</operator><name><name>tree</name><index>[<expr><name>Rson</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></function>
    <function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><name>L</name><operator>&amp;&amp;</operator><name>R</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>maintain</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>pushdown</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>M</name><init>=<expr><operator>(</operator><name>L</name><operator>+</operator><name>R</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><name>M</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>Lson</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name>maintain</name><argument_list>(<argument><expr><name>Lson</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <if>if <condition>(<expr><name>M</name><operator>&lt;</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>Rson</name></expr></argument>,<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name>maintain</name><argument_list>(<argument><expr><name>Rson</name></expr></argument>,<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name>maintain</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>get_sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
    <block>{
                
        <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><name>L</name><operator>&amp;&amp;</operator><name>R</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><name>_ans</name><operator>+=</operator><name><name>tree</name><index>[<expr><name>o</name></expr>]</index></name></expr>;</expr_stmt>
            <return>return;</return> 
        }</block></then></if>
        <if>if <condition>(<expr><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>_ans</name><operator>+=</operator><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>mark</name><index>[<expr><name>o</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        
        <decl_stmt><decl><type><name>int</name></type> <name>M</name><init>=<expr><operator>(</operator><name>L</name><operator>+</operator><name>R</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><name>M</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>get_sum</name><argument_list>(<argument><expr><name>Lson</name></expr></argument>,<argument><expr><name>L</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>M</name><operator>&lt;</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>get_sum</name><argument_list>(<argument><expr><name>Rson</name></expr></argument>,<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
    
</public>}</block><decl><name><name>S</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</class>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//  freopen("E.in","r",stdin);</comment>
<comment type="line">//  freopen(".out","w",stdout);</comment>
    
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>Rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>l</name><operator>=</operator><name>r</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>v</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>S</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>For</name><argument_list>(<argument>qcase</argument>,<argument>q</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>v</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <macro><name>Rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>_ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>get_sum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>_ans</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><name>v</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <comment type="line">//increasing</comment>
        <block>{
            <macro><name>Rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
            <block>{
                <if>if <condition>(<expr><operator>!</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>r</name><operator>=</operator><name>l</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt> 
                <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name><operator>=</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block> 
        }</block></then> <else>else <block>{
            <macro><name>Rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
            <block>{
                <if>if <condition>(<expr><operator>!</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>l</name><operator>=</operator><name>r</name><operator>-</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt> 
                <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>=</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block> 
            
        }</block></else></if> 
        
    }</block>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> 
    <block>{
        <macro><name>Rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>l</name><operator>=</operator><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>_ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>get_sum</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>_ans</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'a'</literal><operator>+</operator><name>j</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
    }</block> 
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
