<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12045540.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<function><type><name>int</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>y</name></expr>)</condition><then><block>{
    <return>return<expr><operator>(</operator><name>y</name><operator>)</operator></expr>;</return>
  }</block></then>
  <else>else<block>{
    <return>return<expr><operator>(</operator><name>x</name><operator>)</operator></expr>;</return>
  }</block></else></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>n</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>d</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>b</name><operator>&lt;</operator><name>a</name></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>e</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>e</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>e</name><operator>=</operator><operator>-</operator><name>e</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>n</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><name>f</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>g</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>e</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>e</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>g</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>b</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>r</name><operator>+=</operator><name><name>p</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <for>for<control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>e</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>e</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>g</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>n</name><index>[<expr><name>b</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>r</name><operator>+=</operator><name><name>n</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
