<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12517712.cpp"><comment type="line">//Language: GNU C++11</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>xx</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>yy</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>niz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ve</name></decl>,<decl><type ref="prev"/><name>niz2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dub</name></decl>,<decl><type ref="prev"/><name>maxc</name></decl>,<decl><type ref="prev"/><name>idj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>id</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>dfsre</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>idj</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>id</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>niz</name><index>[<expr><name><name>dub</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>niz2</name><index>[<expr><name><name>dub</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>idj</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><name><name>idj</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>ve</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>last</name><operator>=</operator><call><name>dfsre</name><argument_list>(<argument><expr><name><name>ve</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return <expr><name><name>maxc</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>last</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
   <comment type="line">// memset(niz,0,sizeof niz);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dub</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>ve</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>maxc</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>idj</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxd</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ve</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dub</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dub</name><index>[<expr><name>a</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxd</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>dub</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>maxd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>niz</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>maxd</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>niz2</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>maxd</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>maxd</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>niz</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>dfsre</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>maxd</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name><name>niz</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>niz</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>niz</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>^</operator><name><name>niz</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></for></block></for>
<comment type="line">//    for(int i=0;i&lt;maxd+1;i++)</comment>
<comment type="line">//    {</comment>
<comment type="line">//        printf("Dubina %d:\n",i);</comment>
<comment type="line">//        for(int j=0;j&lt;27;j++)</comment>
<comment type="line">//        {</comment>
<comment type="line">//            printf("Slovo %c: ",j+'a');</comment>
<comment type="line">//            for(int k=0;k&lt;niz[j][i].size();k++)</comment>
<comment type="line">//            printf("%d ",niz[j][i][k]);</comment>
<comment type="line">//            puts("");</comment>
<comment type="line">//        }</comment>
<comment type="line">//</comment>
<comment type="line">//    }</comment>
    <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>maxd</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>poc</name><init>=<expr><name><name>idj</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>kraj</name><init>=<expr><name><name>maxc</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

       <comment type="line">// printf("poc :%d kraj :%d\n",poc,kraj);</comment>

        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name><argument_list>(<argument><expr><name><name>niz2</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>poc</name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>poc</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>kraj</name><operator>=</operator><call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>kraj</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>brnp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>brnp</name><operator>=</operator><operator>(</operator><name><name>niz</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>kraj</name></expr>]</index></name><operator>^</operator><name><name>niz</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>poc</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>brnp</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name>z</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"No"</literal></expr></then><else>:<expr><literal type="string">"Yes"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
