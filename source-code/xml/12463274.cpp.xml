<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="cpp/12463274.cpp"><comment type="line">//Language: GNU C++</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">10000000</literal> <operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>pr</name><argument_list>(<argument><expr><name>N</name><operator>-</operator><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>pali</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ch</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>cur</name><operator>=</operator><name>cur</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>ch</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ch</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>cur</name> <operator>==</operator> <name>n</name></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>build</name> <parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>pr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name><operator>-</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>i</name><operator>*</operator><literal type="number">1LL</literal><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>N</name><operator>-</operator><literal type="number">10</literal></expr>)</condition><then><block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>N</name><operator>-</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kolpr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kolpal</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>k</name><init>=<expr><operator>(</operator><literal type="number">1.0</literal><operator>*</operator><name>p</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1.0</literal><operator>*</operator><name>q</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name><operator>-</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>kolpr</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>pali</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>kolpal</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>*</operator><name>kolpal</name><operator>*</operator><literal type="number">1.0</literal> <operator>&gt;=</operator> <name>kolpr</name><operator>*</operator><literal type="number">1.0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>last</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block></then></if>

    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
