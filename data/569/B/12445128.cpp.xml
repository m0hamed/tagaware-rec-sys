<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12445128.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>ld</name></macro> <value>long double</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>vii</name></macro> <value>vector&lt;int&gt; :: iterator</value></define>
<define>#<directive>define</directive> <macro><name>vli</name></macro> <value>vector&lt;ll&gt; :: iterator</value></define>
<define>#<directive>define</directive> <macro><name>miii</name></macro> <value>map&lt;int,int&gt; :: iterator</value></define> 
<define>#<directive>define</directive> <macro><name>mlli</name></macro> <value>map&lt;ll,ll&gt; :: iterator</value></define>
<define>#<directive>define</directive> <macro><name>mm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>memset(a,b,sizeof(a))</value></define> 
<define>#<directive>define</directive> <macro><name>f_i</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>fill(a.begin(),a.end(),b)</value></define>
<define>#<directive>define</directive> <macro><name>pp</name></macro> <value>pair&lt;ll,ll&gt;</value></define> 
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
      <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

      <ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"INPUT.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <endif>#<directive>endif</directive></endif>      



        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>yes</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name><name>done</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl> ;</decl_stmt>

        <expr_stmt><expr><call><name>mm</name><argument_list>(<argument><expr><name>done</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>yes</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>



        <expr_stmt><expr><call><name>mm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

            <if>if<condition>(<expr><call><name><name>yes</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>yes</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>done</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>


        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>done</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>y</name><init>=<expr><call><name><name>yes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>*</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>yes</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>*</operator><name>y</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></else></if>
        }</block></for>

}</block></function>   
</unit>
