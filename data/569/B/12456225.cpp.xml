<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12456225.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line" format="doxygen">/// In the name of Almighty Allah</comment>
<comment type="block" format="doxygen">/******************************************/</comment>
<comment type="block" format="doxygen">/** Author     : Rafik Farhad              */</comment>
<comment type="block" format="doxygen">/** Mail to     : rafikfarhad@gmail.com   */</comment>
<comment type="block" format="doxygen">/** Algorithm  :                     */</comment>
<comment type="block" format="doxygen">/*****************************************/</comment>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;new&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<comment type="line" format="doxygen">///def</comment>
<define>#<directive>define</directive> <macro><name>CLR</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></macro>                                  <value>memset(o, 0x00, sizeof o)</value></define>
<define>#<directive>define</directive> <macro><name>CLR1</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></macro>                                 <value>memset(o, -1, sizeof o)</value></define>
<define>#<directive>define</directive> <macro><name>takei</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>                                 <value>scanf("%d", &amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>takell</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>                                <value>scanf("%I64d", &amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>takellu</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>                               <value>scanf("%I64uu", &amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>sf</name></macro>                                          <value>scanf</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro>                                         <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro>                                         <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>ppp</name></macro>                                       <value>system("pause")</value></define>
<define>#<directive>define</directive> <macro><name>ok</name></macro>                                         <value>cout &lt;&lt; "OK" &lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>pf</name></macro>                                         <value>printf</value></define>
<define>#<directive>define</directive> <macro><name>NL</name></macro>                                        <value>printf("\n")</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro>                                         <value>2*acos(0)</value></define>

<comment type="line" format="doxygen">///Helper</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>MAX</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name><operator>&gt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function><function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>MIN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><name>b</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Debugging: "</literal> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Debugging: "</literal> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">"\t"</literal> <operator>&lt;&lt;</operator> <name>q</name>  <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>T3</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Debugging: "</literal> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">"\t "</literal> <operator>&lt;&lt;</operator> <name>q</name> <operator>&lt;&lt;</operator> <literal type="string">"\t "</literal> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>deb</name><parameter_list>(<parameter><decl><type><name>T1</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>T3</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>T4</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Debugging: "</literal> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">"\t "</literal> <operator>&lt;&lt;</operator> <name>q</name> <operator>&lt;&lt;</operator> <literal type="string">"\t "</literal> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="string">"\t "</literal> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>POOW</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> <return>return <expr><name>b</name><operator>*</operator><call><name>POOW</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>xx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>yy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>kx</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>ky</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>   <comment type="line">// KX-&gt; Knight moves xx-&gt; diagonal -&gt; 8 horizontal/vertical-&gt;4</comment>
<define>#<directive>define</directive> <macro><name>SIZE</name></macro> <value>INT_MAX</value></define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <comment type="line">//freopen("output.txt", "w", stdout);</comment>
<endif>#<directive>endif</directive></endif>
    <comment type="line" format="doxygen">///                                    MAIN</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name><name>ar</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>flag</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>takei</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>takei</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>n</name> <operator>or</operator> <name><name>flag</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>track</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <while>while<condition>(<expr><name><name>flag</name><index>[<expr><name>track</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>track</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>ar</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>track</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>flag</name><index>[<expr><name>track</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <comment type="line">//deb(v[i], track);</comment>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ar</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>NL</name></expr>;</expr_stmt>

    <comment type="block">/* Coding is FUN  */</comment>
    <comment type="line" format="doxygen">///                                    ENDD</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
