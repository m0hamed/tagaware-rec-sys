<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12462838.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include> 
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>bool</name></type> <name>isContain</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>number_list</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>number_list</name><index>[<expr><name>num</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name><name>number_list</name><index>[<expr><name>num</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>toFillIndexArray</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fillIndex</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>number_list</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>standard</name><index>[<expr><literal type="number">100000</literal></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{

            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>temp</name></expr>;</expr_stmt>

            <if>if<condition>(<expr><name>temp</name><operator>&gt;</operator><name>n</name><operator>||</operator><call><name>isContain</name><argument_list>(<argument><expr><name>standard</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>toFillIndexArray</name><index>[<expr><name>fillIndex</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>number_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>standard</name><index>[<expr><name>temp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>toFillIndex</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>number_list</name><index>[<expr><name><name>toFillIndexArray</name><index>[<expr><name>toFillIndex</name><operator>++</operator></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>standard</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>number_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></for>


    }</block></else></if>
    <comment type="line">//system("pause");</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>

</unit>
