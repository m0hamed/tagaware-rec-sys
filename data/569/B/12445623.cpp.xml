<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12445623.cpp"><comment type="line">//Language: MS C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
 
<define>#<directive>define</directive> <macro><name>INF_MAX</name></macro> <value>2147483647</value></define>
<define>#<directive>define</directive> <macro><name>INF_MIN</name></macro> <value>-2147483647</value></define>
<define>#<directive>define</directive> <macro><name>INF_LL</name></macro> <value>9223372036854775807LL</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>2000000000</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>acos(-1.0)</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1e-8</value></define>
<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>f</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>s</name></macro> <value>second</value></define>

 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>bool</name></type> <name><name>chk</name> <index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>zam</name> <index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>elm</name> <index>[<expr><literal type="number">100000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>elm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block">/*  if (x &lt;= n)
        {
            if (!chk[x])
            {
                result.push_back(x);
                chk[x]= true;
                if (x == k)
                    while (chk[k])
                    k++;
            }
            else
            {
                if(chk[k])
                    while (chk[k])
                        k++;

                result.push_back(k);
                chk[k]= true;
                while (chk[k])
                    k++;
            }
        }
        else
        {
            if(chk[k])
                    while (chk[k])
                        k++;
            result.push_back(k);
            chk[k]= true;
            while (chk[k])
            k++;
        }*/</comment>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <comment type="line">//Ð¸ÑÐµÐ¼ ÑÑÐ¸ Ð½Ð¾Ð¼ÐµÑÐ° Ð¼ÐµÐ½ÑÑÑ  Ð½Ðµ Ð½ÑÐ¶Ð½Ð¾</comment>
    <block>{
        <if>if<condition>(<expr><name><name>elm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator><name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>chk</name><index>[<expr><name><name>elm</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>zam</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <comment type="line">// Ð¼ÐµÐ½ÑÑÑ Ð½Ðµ Ð½Ð°Ð´Ð¾</comment>
                <expr_stmt><expr><name><name>chk</name><index>[<expr><name><name>elm</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>

    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>zam</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>elm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>chk</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><while>while <condition>(<expr><name><name>chk</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
                        <block type="pseudo"><expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block></while></block></then></if>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chk</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <while>while <condition>(<expr><name><name>chk</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block></while>
        }</block></else></if>

    }</block></for>


    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
