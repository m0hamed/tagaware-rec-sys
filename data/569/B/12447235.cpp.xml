<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12447235.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block" format="doxygen">/**
 *    @author     : Dipta Das
 *    @University : CUET CSE 11
 *    @Codeforces : diptadas
 *    @Topcoder   : dipta670
 *    @link       : www.fb.com/dipta.das
 */</comment>

<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iterator&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>LL</name></macro>         <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro>        <value>pair&lt;LL,LL&gt;</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro>         <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fr</name></macro>         <value>first</value></define>
<define>#<directive>define</directive> <macro><name>sc</name></macro>         <value>second</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro>         <value>push_back</value></define>

<define>#<directive>define</directive> <macro><name>read</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>    <value>scanf("%lld",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>mset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></macro>  <value>memset(a,s,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>     <value>a.begin(),a.end()</value></define>

<define>#<directive>define</directive> <macro><name>PI</name></macro>         <value>acos(-1.0)</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro>        <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro>        <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro>        <value>1e9</value></define>
<define>#<directive>define</directive> <macro><name>NN</name></macro>         <value>100009</value></define>

<decl_stmt><decl><type><name>LL</name></type> <name><name>a</name><index>[<expr><name>NN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>NN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>NN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>b</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name><name>d</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>k</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>



    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
