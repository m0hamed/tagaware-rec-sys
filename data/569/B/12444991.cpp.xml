<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12444991.cpp"><comment type="line">//Language: MS C++</comment>


<pragma>#<directive>pragma</directive> <name>region</name> <name>include</name></pragma>

<define>#<directive>define</directive> <macro><name>_CRT_SECURE_NO_WARNINGS</name></macro></define>
<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<pragma>#<directive>pragma</directive> <name>endregion</name></pragma>

<pragma>#<directive>pragma</directive> <name>region</name> <name>define</name></pragma> 
<define>#<directive>define</directive> <macro><name>All</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(), a.end()</value></define>
<define>#<directive>define</directive> <macro><name>_2d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>,<parameter><type><name>type</name></type></parameter>)</parameter_list></macro> <value>type**a=new type*[row]; for (int i=0;i&lt;row;i++) a[i]=new type[col];</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=0;i&lt;int(n);i++)</value></define>
<define>#<directive>define</directive> <macro><name>repd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=n-1;i&gt;=0;i--)</value></define>
<define>#<directive>define</directive> <macro><name>repi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=int(a);i&lt;int(n);i++)</value></define>
<define>#<directive>define</directive> <macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>memset(a, n, sizeof(a));</value></define>
<define>#<directive>define</directive> <macro><name>scn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>rep(i,n) cin&gt;&gt;a[i];</value></define>
<define>#<directive>define</directive> <macro><name>scn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></macro> <value>rep(i,row) rep(j,col) cin&gt;&gt;a[i][j];</value></define>
<define>#<directive>define</directive> <macro><name>prn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>rep(i,n-1) cout&lt;&lt;a[i]&lt;&lt;" "; cout&lt;&lt;a[n-1]&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>prn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></macro> <value>rep(i,row){rep(j,col-1) cout&lt;&lt;a[i][j]&lt;&lt;" "; cout&lt;&lt;a[i][col-1]&lt;&lt;endl;}</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>Odd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x%2!=0</value></define>
<define>#<directive>define</directive> <macro><name>Even</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x%2==0</value></define>
<define>#<directive>define</directive> <macro><name>Pi</name></macro> <value>3.14</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>20000000000</value></define> <comment type="line">// 2 billion</comment>
<define>#<directive>define</directive> <macro><name>read</name></macro> <value>freopen("in.in","r",stdin)</value></define>
<define>#<directive>define</directive> <macro><name>write</name></macro> <value>freopen("out.out","w",stdout)</value></define>
<define>#<directive>define</directive> <macro><name>IOS</name></macro>  <value>ios::sync_with_stdio(false)</value></define>
<pragma>#<directive>pragma</directive> <name>endregion</name></pragma>

<pragma>#<directive>pragma</directive> <name>region</name> <name>typedef</name></pragma>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ul</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument> &gt;</argument_list></name></type> <name>vivi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>is</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<pragma>#<directive>pragma</directive> <name>endregion</name></pragma>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type><name>v</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>ans</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>ans.size()</argument>)</argument_list></macro><block>{
		<while>while <condition>(<expr><name><name>v</name><index>[<expr><name>k</name></expr>]</index></name></expr> )</condition>
			<block type="pseudo"><expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
