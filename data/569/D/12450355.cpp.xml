<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12450355.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_map&gt;</file></include>

<ifdef>#<directive>ifdef</directive> <name>_WIN32</name></ifdef>
<define>#<directive>define</directive> <macro><name>LLD</name></macro> <value>"%I64d"</value></define>
<else>#<directive>else</directive></else>
<define>#<directive>define</directive> <macro><name>LLD</name></macro> <value>"%lld"</value></define>
<endif>#<directive>endif</directive></endif>

<define>#<directive>define</directive> <macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = s; i &lt; n; i++)</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>d_all</name><index>[<expr><literal type="number">5000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>d_good</name><index>[<expr><literal type="number">5000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c_n</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>d_all</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d_good</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d_all</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d_good</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>c_n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c_n</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    
    <macro><name>forn</name> <argument_list>(<argument>n</argument>, <argument><literal type="number">2</literal></argument>, <argument>N + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>d_all</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>d_all</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d_all</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name><name>d_good</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>d_all</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>d_good</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d_good</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>d_all</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>c_n</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>d_all</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d_all</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
            
            <expr_stmt><expr><name><name>d_good</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>c_n</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>*</operator> <name><name>d_good</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d_good</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        
        <expr_stmt><expr><name><name>c_n</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>c_n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>c_n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>c_n</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
        
        <expr_stmt><expr><name><name>c_n</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>d_good</name><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
