<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12469338.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Prime</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>stirl</name><index>[<expr><literal type="number">4001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sum</name><index>[<expr><literal type="number">4001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>combine</name><index>[<expr><literal type="number">4001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>stirl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>combine</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>combine</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name><operator>=</operator><name>i</name></expr>;</init><condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>stirl</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>stirl</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name>j</name><operator>+</operator><name><name>stirl</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>Prime</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>stirl</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>Prime</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>combine</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>combine</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>combine</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>Prime</name></expr>;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>m</name><operator>=</operator><operator>(</operator><name>m</name><operator>+</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>combine</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>Prime</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
