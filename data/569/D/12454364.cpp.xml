<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12454364.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=0;i&lt;(int)(n);i++)</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Mod</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>
  <constructor><name>Mod</name> <parameter_list>()</parameter_list> <member_init_list>: <call><name>num</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{<empty_stmt>;</empty_stmt>}</block></constructor>
  <constructor><name>Mod</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>num</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call> </member_init_list><block>{<empty_stmt>;</empty_stmt>}</block></constructor>
  <function type="operator"><name>operator <name>int</name></name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name>num</name></expr>;</return> }</block></function>
</public>}</block>;</struct>

<function type="operator"><type><name>Mod</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mod</name><argument_list>(<argument><expr><operator>(</operator><name><name>a</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mod</name><argument_list>(<argument><expr><operator>(</operator><name>mod</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>num</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>Mod</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name><name>a</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>Mod</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>Mod</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>Mod</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>Mod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>Mod</name></type> <name>res</name> <init>= <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>Mod</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>^</operator> <operator>(</operator><name>mod</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><type><name>Mod</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>Mod</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Mod</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*</operator> <call><name>inv</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<define>#<directive>define</directive> <macro><name>MAX_N</name></macro> <value>1024000</value></define>

<decl_stmt><decl><type><name>Mod</name></type> <name><name>fact</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>factinv</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Mod</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>factinv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>MAX_N-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <call><name>Mod</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>factinv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>factinv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <call><name>Mod</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
}</block></function>

<function><type><name>Mod</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><name><name>fact</name><index>[<expr><name>a</name></expr>]</index></name> <operator>*</operator> <name><name>factinv</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <name><name>factinv</name><index>[<expr><name>a</name><operator>-</operator><name>b</name></expr>]</index></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name> <init>= <expr><literal type="number">4008</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mod</name></type> <name><name>dp</name><index>[<expr><name>NMAX</name></expr>]</index><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mod</name></type> <name><name>sum</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>n</argument>, <argument>NMAX</argument>)</argument_list></macro> <block>{
    <macro><name>REP</name><argument_list>(<argument>k</argument>, <argument>NMAX</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block>

  <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NMAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NMAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><call><name>Mod</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  
  <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>NMAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Mod</name></type> <name>ans</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>comb</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sum</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
