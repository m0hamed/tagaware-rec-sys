<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12452564.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>fact</name><index>[<expr><literal type="number">4010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inv</name><index>[<expr><literal type="number">4010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>invfact</name><index>[<expr><literal type="number">4010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4010</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name>i</name><operator>*</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4010</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mod</name> <operator>-</operator> <operator>(</operator><name>mod</name><operator>/</operator><name>i</name><operator>)</operator> <operator>*</operator> <name><name>inv</name><index>[<expr><name>mod</name><operator>%</operator><name>i</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
		
	}</block></for>
	<expr_stmt><expr><name><name>invfact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4010</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>invfact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <name><name>invfact</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>(</operator><operator>(</operator><name><name>invfact</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name><operator>*</operator><name><name>invfact</name><index>[<expr><name>k</name></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>count</name><index>[<expr><literal type="number">4050</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">// your code goes here</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>sum</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">4010</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>sum</name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>nCr</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>count</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sum</name><operator>=</operator> <name>sum</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>count</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>sum</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>nCr</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>count</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator> <name>ans</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>ans</name><operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
