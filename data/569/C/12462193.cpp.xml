<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12462193.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>

<define>#<directive>define</directive> <macro><name>ffi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = 0; i &lt; n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>ffj</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int j = 0; j &lt; n; j++)</value></define>
<define>#<directive>define</directive> <macro><name>lli</name></macro> <value>long long int</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Primes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Palindromes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1900000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>getPrimes</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>Primes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>Primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name></decl>;</decl_stmt>
	<macro><name>ffi</name><argument_list>(<argument>k</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<macro><name>ffj</name><argument_list>(<argument>Primes.size()</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>Primes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>Primes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>i</name><operator>+</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator> <operator>%</operator> <name><name>Primes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>flag</name> <operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block>
		<if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>Primes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
}</block></function>

<function><type><name>bool</name></type> <name>isPalin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dig</name></decl>;</decl_stmt> 
	<expr_stmt><expr><call><name><name>dig</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
		<expr_stmt><expr><call><name><name>dig</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name> <operator>%</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<macro><name>ffi</name><argument_list>(<argument>dig.size()</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>dig</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>dig</name><index>[<expr><call><name><name>dig</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>getPalindromes</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>Palindromes</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>ffi</name><argument_list>(<argument>k</argument>)</argument_list></macro> <if>if<condition>(<expr><call><name>isPalin</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>Palindromes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>	
}</block></function>

<function><type><name>int</name></type> <name>ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>palcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pricnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>ffi</name><argument_list>(<argument>k-<literal type="number">10000</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>Primes</name><index>[<expr><name>pricnt</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pricnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>Palindromes</name><index>[<expr><name>palcnt</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>palcnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><operator>(</operator><name>q</name> <operator>*</operator> <name>pricnt</name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>palcnt</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>maxi</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxi</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block>
	<return>return <expr><name>maxi</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>getPrimes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	ffi(100) cout&lt;&lt;Primes[i]&lt;&lt;" "; cout&lt;&lt;"\n";</comment>
	<expr_stmt><expr><call><name>getPalindromes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	ffi(100) cout&lt;&lt;Palindromes[i]&lt;&lt;" "; cout&lt;&lt;"\n";</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>ans</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
