<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12479216.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace<name><operator>::</operator><name>std</name></name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long int</value></define>

<decl_stmt><decl><type><name>ll</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>mark</name><index>[<expr><literal type="number">10000007</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>j</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>mark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>*</operator><name>i</name></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><name>j</name><operator>+</operator><name>i</name></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name><name>mark</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></then></if>
	}</block></for>

	<return>return <expr><name>count</name></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>palin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>reverse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
 
  <comment type="line">//n=10;</comment>
  <decl_stmt><decl><type><name>ll</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  
   <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>reverse</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

   <while>while<condition>( <expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>
     <block>{
       <expr_stmt><expr><name>j</name><operator>=</operator><name>temp</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
       <expr_stmt><expr><name>reverse</name><operator>=</operator><literal type="number">10</literal><operator>*</operator><name>reverse</name><operator>+</operator><name>j</name></expr>;</expr_stmt>
       
       <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
     }</block></while>

   <if>if<condition>( <expr><name>n</name><operator>==</operator><name>reverse</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
 
  <return>return <expr><literal type="boolean">false</literal></expr>;</return>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<comment type="line">//p=6;</comment>
	<comment type="line">//q=4;</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>max</name><init>=<expr><literal type="number">10000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>prime</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>palindrome</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>sieve</name><argument_list>(<argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>mark</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>max</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>prime</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><call><name>palin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>palindrome</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		
		<if>if<condition>(<expr><name>q</name><operator>*</operator><name>prime</name><operator>&lt;=</operator><name>p</name><operator>*</operator><name>palindrome</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>	
	}</block></for>

	<if>if<condition>(<expr><name>ans</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Palindromic tree is better than splay tree"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></else></if>

}</block></function></unit>
