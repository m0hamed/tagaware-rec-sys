<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12470214.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ft</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>sc</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>deb</name></type></parameter> ,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=deb;i&lt;int(n);i++)</value></define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pint</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>borne</name> <init>=<expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>compose</name><index>[<expr><name>borne</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pi</name><index>[<expr><name>borne</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rub</name><index>[<expr><name>borne</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>is_pal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>dec</name></decl>;</decl_stmt>
    <for>for<control>(<init>;</init><condition><expr><name>n</name></expr>;</condition><incr><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>dec</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>deb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fin</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>dec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>deb</name><operator>&lt;=</operator><name>fin</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>dec</name><index>[<expr><name>deb</name></expr>]</index></name><operator>!=</operator><name><name>dec</name><index>[<expr><name>fin</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>deb</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>fin</name><operator>--</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>compose</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>borne</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>compose</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>j</name><operator>&lt;</operator><name>borne</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>compose</name><index>[<expr><name>i</name><operator>*</operator><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
    }</block>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>borne</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pi</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><operator>(</operator><operator>!</operator><name><name>compose</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rub</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>borne</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>rub</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><call><name>is_pal</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>A</name><init>=<expr><operator>(</operator><name>double</name><operator>)</operator><name>p</name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>q</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>borne</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>A</name><operator>*</operator><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
