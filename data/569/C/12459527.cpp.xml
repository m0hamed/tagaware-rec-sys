<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12459527.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">// PrimesOrPalindromes.cpp : Defines the entry point for the console application.</comment>
<comment type="line">//</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>pi</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// primes[i] = no of primes no greater than i </comment>
<decl_stmt><decl><type><name>bool</name></type> <name><name>check</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// check[i] = 0 if i is prime; 1 otherwise</comment>
<decl_stmt><decl><type><name>long</name> <name>long</name></type>	<name><name>rub</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// rub[i] = no of palindromic number no greater than i</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>

	<comment type="line">// primes</comment>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>check</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>maxN</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>check</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<comment type="line">// palindromes</comment>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<comment type="line">// check if i is palindromic</comment>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmp</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
			<expr_stmt><expr><name>rev</name> <operator>=</operator> <name>rev</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>tmp</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><name>rev</name> <operator>==</operator> <name>i</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rub</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rub</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<comment type="block">/*
	cout &lt;&lt; "PRIMES\n";
	for (int i = 0; i &lt; 100; i++) {
		cout &lt;&lt; i &lt;&lt; " - " &lt;&lt; check[i] &lt;&lt; " - " &lt;&lt; pi[i] &lt;&lt; endl;
	}
	cout &lt;&lt; endl;
	cout &lt;&lt; "PALINDROMES\n";
	for (int i = 0; i &lt; 100; i++) {
		cout &lt;&lt; i &lt;&lt; " - " &lt;&lt; rub[i] &lt;&lt; endl;
	}
	*/</comment>
	
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><name>maxN</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> 
		<block type="pseudo"><if>if <condition>(<expr><name>q</name> <operator>*</operator> <name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>p</name> <operator>*</operator> <name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></block></for>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree"</literal></expr>;</expr_stmt>
	
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
