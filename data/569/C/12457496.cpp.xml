<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12457496.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>nump</name><index>[<expr><literal type="number">1199912</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>palin</name><index>[<expr><literal type="number">1199912</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>prime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{	<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ind</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>a</name><operator>&lt;=</operator><name>n</name></expr>)</condition>
	<block>{<decl_stmt><decl><type><name>int</name></type> <name>ch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{	<if>if<condition>(<expr><name>a</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{<expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ind</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>nump</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>ind</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ind</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>prim</name><index>[<expr><literal type="number">1199914</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>prime2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name><operator>/</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{	
			<expr_stmt><expr><name><name>prim</name><index>[<expr><name>i</name><operator>*</operator><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>add</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{	<if>if<condition>(<expr><name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{	<expr_stmt><expr><name>add</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>nump</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>add</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>palin1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{	<decl_stmt><decl><type><name>int</name></type> <name>siz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>save</name><init>=<expr><name>num</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>other</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>save</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
	<block>{	<expr_stmt><expr><name>siz</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>other</name><operator>=</operator><name>other</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>save</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>save</name><operator>=</operator><name>save</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>other</name><operator>==</operator><name>num</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>palindrome</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{	<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ind</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>add</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>num</name><operator>&lt;=</operator><name>n</name></expr>)</condition>
	<block>{	<decl_stmt><decl><type><name>int</name></type> <name>ch</name><init>=<expr><call><name>palin1</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>add</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>palin</name><index>[<expr><name>num</name></expr>]</index></name><operator>=</operator><name>add</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><type><name>double</name></type> <name>ab</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{	<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><name>a</name></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>double</name></type> <name>dif</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{	<return>return <expr><call><name>ab</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>rate</name></decl></parameter>)</parameter_list>
<block>{	<decl_stmt><decl><type><name>int</name></type> <name>numw</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">1199911</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{	<decl_stmt><decl><type><name>double</name></type> <name>numb</name><init>=<expr><name><name>nump</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>numr</name><init>=<expr><name><name>palin</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>rate</name><operator>*</operator><name>numr</name><operator>&gt;=</operator><name>numb</name></expr>)</condition><then>
		<block>{	<if>if<condition>(<expr><name>numw</name><operator>&lt;</operator><name>i</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>numw</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		
	}</block></for>
	<return>return <expr><name>numw</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	<expr_stmt><expr><call><name>palindrome</name><argument_list>(<argument><expr><literal type="number">1199911</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prime2</name><argument_list>(<argument><expr><literal type="number">1199911</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nump</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>palin</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>find</name><argument_list>(<argument><expr><name>p</name><operator>/</operator><name>q</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
