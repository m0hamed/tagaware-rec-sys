<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12452201.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name><name>pi</name><index>[<expr><literal type="number">10000000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rub</name><index>[<expr><literal type="number">10000000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>maxx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name><name>l</name><index>[<expr><literal type="number">10000000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>k</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name>a</name><operator>%</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
	<expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>check2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>a</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>p</name><operator>)</operator><operator>/</operator><name>q</name></expr>;</expr_stmt>
	<comment type="line">//cout &lt;&lt; a &lt;&lt; endl;</comment>
	<expr_stmt><expr><name><name>rub</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>pi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10000000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><call><name>check1</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pi</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pi</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>rub</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>rub</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line">//for(int i=1;i&lt;42;i++)</comment>
	<comment type="line">//	cout &lt;&lt; i &lt;&lt; " "&lt;&lt;pi[i] &lt;&lt; " " &lt;&lt; rub[i] &lt;&lt; endl;</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10000000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>maxx</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
	<comment type="line">//cout &lt;&lt; "1422" &lt;&lt; " "&lt;&lt;pi[1422] &lt;&lt; " " &lt;&lt; rub[1422] &lt;&lt; " " &lt;&lt;l[1422]&lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name>maxx</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>maxx</name><operator>==</operator><literal type="number">9999999</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree"</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>maxx</name></expr>;</expr_stmt></block></else></if>
	<comment type="line">//getchar();getchar();</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
