<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12456273.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<comment type="line">//Definitions</comment>
<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>LLU</name></macro> <value>unsigned long long</value></define>
<define>#<directive>define</directive> <macro><name>fora</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></macro> <value>for(int var=0;var&lt;end;var++)</value></define>
<define>#<directive>define</directive> <macro><name>fore</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></macro> <value>for(int var=start;var&lt;end;var++)</value></define>
<define>#<directive>define</directive> <macro><name>forit</name><parameter_list>(<parameter><type><name>it1</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>for(typeof(a.begin()) it1=a.begin();it1!=a.end();it1++)</value></define>
<define>#<directive>define</directive> <macro><name>pub</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>fst</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>snd</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>mkp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>beg</name></macro> <value>begin</value></define>
<define>#<directive>define</directive> <macro><name>ed</name></macro> <value>end</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>v.begin(),v.end()</value></define>
<define>#<directive>define</directive> <macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "</value></define>
<define>#<directive>define</directive> <macro><name>PNL</name></macro> <value>printf("\n")</value></define>
<define>#<directive>define</directive> <macro><name>vi</name></macro> <value>vector&lt;int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>vpi</name></macro> <value>vector&lt;pair&lt;pair&lt;int,int&gt;,int&gt; &gt;</value></define>
<define>#<directive>define</directive> <macro><name>FL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>fill(a,a+n,x)</value></define>
<comment type="line">//AP_HAWKDOWN from hereon</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>bool</name></type> <name><name>seive</name><index>[<expr><literal type="number">10000000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>pal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pub</name></name><argument_list>(<argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>fora</name><argument_list>(<argument>j</argument>,<argument>sz/<literal type="number">2</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><name><name>v</name><index>[<expr><name>sz</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block>
    <return>return <expr><literal type="number">1</literal></expr>;</return>

}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

<decl_stmt><decl><type><name>LL</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><literal type="number">3000000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{

    <if>if<condition>(<expr><operator>!</operator><name><name>seive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
     <comment type="line">//       ct++;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>j</name><operator>&lt;</operator><literal type="number">3000000</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
    <block>{
     <expr_stmt><expr><name><name>seive</name><index>[<expr><name>i</name><operator>*</operator><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></for>
    }</block></then></if>
}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ct</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>seive</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>fore</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">2000000</literal></argument>)</argument_list></macro>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name><name>seive</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <comment type="line">//cout&lt;&lt;"Prime"&lt;&lt;" "&lt;&lt;i&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><call><name>pal</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="line">//cout&lt;&lt;"pal "&lt;&lt;i&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr><name>q</name><operator>*</operator><name>ct</name><operator>&lt;=</operator><name>p</name><operator>*</operator><name>x</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></then></if>
}</block>
<comment type="line">//cout&lt;&lt;ct&lt;&lt;endl&lt;&lt;x&lt;&lt;endl;</comment>
<if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt></block></then>
<else>else
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Palindromic tree is better than splay tree\n"</literal></expr>;</expr_stmt>
}</block></else></if>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
