<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12451277.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;random&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdarg.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_set&gt;</file></include>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>int</name></macro> <value>long long int</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>bool</name></type> <name>RANDOM</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


<define>#<directive>define</directive> <macro><name>DEBUG</name></macro></define>
<define>#<directive>define</directive> <macro><name>NULL</name></macro> <value>0</value></define>

<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">0.0000000001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000000000.0</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name><name>ostream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>oi</name><argument_list>(<argument><expr><name>cout</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>minInt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxInt</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>minDouble</name> <init>= <expr><operator>-</operator><literal type="number">100000000000.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>maxDouble</name> <init>= <expr><literal type="number">100000000000.0</literal></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>setMaxInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newMax</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>maxInt</name> <operator>=</operator> <name>newMax</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>setMinInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newMin</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>minInt</name> <operator>=</operator> <name>newMin</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>setIntRange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>maxInt</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>minInt</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>setMaxDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>newMax</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>maxDouble</name> <operator>=</operator> <name>newMax</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>setMinDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>newMin</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>minDouble</name> <operator>=</operator> <name>newMin</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>setDoubleRange</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>maxDouble</name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>minDouble</name> <operator>=</operator> <name>min</name></expr>;</expr_stmt>
}</block></function>

<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;"</literal> <operator>&lt;&lt;</operator><name><name>c</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"&gt;"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>



<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>value</name></expr>;</expr_stmt>
}</block></function>


<function><template>template<parameter_list>&lt;&gt;</parameter_list></template>
<type><name>void</name></type> <name><name>print</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>, <parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>value3</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value3</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>, <parameter><type><name>typename</name></type> <name>C</name></parameter>, <parameter><type><name>typename</name></type> <name>D</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>value3</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>value4</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value3</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value4</name></expr>;</expr_stmt>
}</block></function>




<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>value</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>, <parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>value3</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value3</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>, <parameter><type><name>typename</name></type> <name>C</name></parameter>, <parameter><type><name>typename</name></type> <name>D</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>A</name></type> <name>value1</name></decl></parameter>, <parameter><decl><type><name>B</name></type> <name>value2</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>value3</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>value4</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>value1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value2</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value3</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>value4</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>randomint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>max</name><operator>-</operator><name>min</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>min</name></expr>;</return>
}</block></function>

<function><type><name>double</name></type> <name>randomdouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>max</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>RAND_MAX</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>max</name> <operator>-</operator> <name>min</name><operator>)</operator> <operator>+</operator> <name>min</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>E</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>E</name></type> <name>value</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>value</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;&gt;</parameter_list></template>
<type><name>int</name></type> <name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>RANDOM</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><call><name>randomint</name><argument_list>(<argument><expr><name>minInt</name></expr></argument>, <argument><expr><name>maxInt</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><template>template<parameter_list>&lt;&gt;</parameter_list></template>
<type><name>double</name></type> <name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name><parameter_list>()</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>RANDOM</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>value</name></expr>;</expr_stmt>
        <return>return <expr><name>value</name></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><call><name>randomdouble</name><argument_list>(<argument><expr><name>minDouble</name></expr></argument>, <argument><expr><name>maxDouble</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="block">/*
template&lt;typename T&gt;
Array&lt;T&gt; read&lt;Array&lt;T&gt; &gt;()
{
    int n = read&lt;int&gt;();
    Array&lt;T&gt; res(n);
    cin &gt;&gt; res;
    retrun res;
}
*/</comment>

<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>first</name></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>second</name></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>string</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>c</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
class <name>Array</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
    <constructor><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_capacity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name>_capacity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <operator>new</operator> <name><name>E</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>sort</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <constructor><name>Array</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>capacity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <operator>new</operator> <name><name>E</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>Array</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vect</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>_size</name> <init>= <expr><call><name><name>vect</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name>_size</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <operator>new</operator> <name><name>E</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>vect</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <constructor><name>Array</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minBound</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxBound</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_size</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><name>_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name>_size</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <name>_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <operator>new</operator> <name><name>E</name><index>[<expr><name>capacity</name></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomint</name><argument_list>(<argument><expr><name>minBound</name></expr></argument>, <argument><expr><name>maxBound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <function_decl><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>leftBinarySearch</name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>rightBinarySearch</name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>equalRange</name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>bool</name></type> <name>binarySearch</name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>fill</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>E</name><modifier>*</modifier></type> <name>begin</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>E</name><modifier>*</modifier></type> <name>end</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name>toVector</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl type="operator"><type><name>E</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>E</name><modifier>&amp;</modifier></type> <name>index</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>E</name><modifier>*</modifier></type> <name>array</name></decl>;</decl_stmt>
</public><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> <name>ensureCapacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cap</name></decl></parameter>)</parameter_list>;</function_decl>
</private>}</block>;</class>


<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>ensureCapacity</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cap</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name>capacity</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>E</name><modifier>*</modifier></type> <name>newArray</name> <init>= <expr><operator>new</operator> <name><name>E</name><index>[<expr><name>capacity</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newArray</name></expr></argument>, <argument><expr><name>array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>delete</operator><index>[]</index> <name>array</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>array</name> <operator>=</operator> <name>newArray</name></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>fill</name></name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><template>template <parameter_list>&lt;&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>fill</name></name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><template>template <parameter_list>&lt;&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>fill</name></name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>toString</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>stream</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>size</name></expr>)</condition> <block>{
        <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>size</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>stream</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>add</name></name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>capacity</name><operator>&lt;</operator><name>size</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ensureCapacity</name><argument_list>(<argument><expr><name>size</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>array</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>E</name><modifier>*</modifier></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>begin</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>array</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>E</name><modifier>*</modifier></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>end</name></name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><name>array</name> <operator>+</operator> <name>size</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>leftBinarySearch</name></name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>array</name><operator>+</operator><name>size</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>-</operator><name>array</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>rightBinarySearch</name></name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>array</name><operator>+</operator><name>size</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>-</operator><name>array</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>equalRange</name></name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name><modifier>*</modifier></expr></argument>, <argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>equal_range</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>array</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name>array</name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name>array</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>binarySearch</name></name><parameter_list>(<parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>item</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>binary_search</name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name>array</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>toVector</name></name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name>res</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>


<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>entry</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mapToArray</name><parameter_list>(<parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>c</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>entry</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>E</name><modifier>&amp;</modifier></type> <name><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>[]</name></name></name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
<ifdef>#<directive>ifdef</directive> <name>DEBUG</name></ifdef>
    <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>size</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Array index out of bounds, index is "</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">", size is "</literal> <operator>&lt;&lt;</operator> <name>size</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Array is "</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>toString</name><argument_list>(<argument><expr><name>cout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
<endif>#<directive>endif</directive></endif>

<ifndef>#<directive>ifndef</directive> <name>DEBUG</name></ifndef>
    <return>return <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></return>
<endif>#<directive>endif</directive></endif>
}</block></function>

<class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
class <name>Matrix</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name>array</name></decl>;</decl_stmt>

    <function_decl><type><name>E</name><modifier>&amp;</modifier></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>E</name><modifier>&amp;</modifier></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl type="operator"><type><name>E</name><modifier>&amp;</modifier></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name>transpose</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>E</name><modifier>*</modifier></expr></argument>, <argument><expr><name>E</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>getRow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

    <constructor><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>rows</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>columns</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <call><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rows</name><operator>*</operator><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>array</name><operator>.</operator><name>fill</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>array</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>columns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <constructor><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_columns</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_rows</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minBound</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxBound</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>rows</name> <operator>=</operator> <name>_rows</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>columns</name> <operator>=</operator> <name>_columns</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>_rows</name><operator>*</operator><name>_columns</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <call><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>minBound</name></expr></argument>, <argument><expr><name>maxBound</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

</public><private>private:
</private>}</block>;</class>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name></type> <name><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>transpose</name></name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name><argument_list>(<argument><expr><name>rows</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>columns</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>rows</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>b</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>array</name><operator>.</operator><name>array</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>columns</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name>E</name><modifier>&amp;</modifier></type> <name><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>operator<name>()</name></name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
<ifdef>#<directive>ifdef</directive> <name>DEBUG</name></ifdef>
    <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>columns</name> <operator>||</operator> <name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"x must be in range [0; "</literal> <operator>&lt;&lt;</operator> <name>columns</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"], but it is "</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><name>rows</name> <operator>||</operator> <name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"y must be in range [0; "</literal> <operator>&lt;&lt;</operator> <name>rows</name> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"], but it is "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name><name>array</name><operator>.</operator><name>array</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>columns</name></expr>]</index></name></expr>;</return>
<endif>#<directive>endif</directive></endif>
<ifndef>#<directive>ifndef</directive> <name>DEBUG</name></ifndef>
    <return>return <expr><name><name>array</name><operator>.</operator><name>array</name><index>[<expr><name>x</name><operator>+</operator><name>y</name><operator>*</operator><name>columns</name></expr>]</index></name></expr>;</return>
<endif>#<directive>endif</directive></endif>
}</block></function>



<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>columns</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>c</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>


<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>E</name><modifier>*</modifier></expr></argument>, <argument><expr><name>E</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>getRow</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>E</name><modifier>*</modifier></type> <name>f</name> <init>= <expr><name><name>array</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name>columns</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>E</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name><name>array</name><operator>.</operator><name>array</name></name> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>columns</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>E</name><modifier>*</modifier></expr></argument>, <argument><expr><name>E</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>p</name></expr>;</return>
}</block></function>


<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>Matrix</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>  )</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name><name>c</name><operator>.</operator><name>columns</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <call><name>c</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>


<class>class <name>Point</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
    <constructor><name>Point</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>_x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>_y</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>_x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>_y</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>Point</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block>;</class>

<function><type><name>double</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>dx</name> <init>= <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>dy</name> <init>= <expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>dx</name><operator>*</operator><name>dx</name><operator>+</operator><name>dy</name><operator>*</operator><name>dy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>EPS</name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></else></if>
}</block></function>

<class>class <name>Triangle</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>Point</name></type> <name>A</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name></type> <name>B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name></type> <name>C</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>c</name></decl>;</decl_stmt>

    <constructor><name>Triangle</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>_A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_B</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_C</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>_A</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>B</name> <operator>=</operator> <name>_B</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <name>_C</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>dist</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>dist</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>dist</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>Triangle</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function><type><name>double</name></type> <name>S</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><name><name>B</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>C</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>-</operator><operator>(</operator><name><name>C</name><operator>.</operator><name>x</name></name><operator>-</operator><name><name>A</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>B</name><operator>.</operator><name>y</name></name><operator>-</operator><name><name>A</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</class>

<class>class <name>Line</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>double</name></type> <name>A</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>B</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>C</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>xmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>xmax</name></decl>;</decl_stmt>

    <constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>_A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_B</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSegment</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>_A</name></expr></argument>, <argument><expr><name>_B</name></expr></argument>, <argument><expr><name>isSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>_A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_B</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSegment</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>isSegment</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>xmin</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>_A</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>_B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>xmax</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>_A</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>_B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>xmin</name> <operator>=</operator> <operator>-</operator><name>INF</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><operator>(</operator><name><name>_B</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>_A</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name><name>_B</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>_A</name><operator>.</operator><name>x</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><name><name>_A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name>k</name><operator>*</operator><name><name>_A</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">//printf("%lf\n", b);</comment>

        <expr_stmt><expr><name>A</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>B</name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>C</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setSegment</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>_A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_B</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>_A</name></expr></argument>, <argument><expr><name>_B</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setLine</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>_A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>_B</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>set</name><argument_list>(<argument><expr><name>_A</name></expr></argument>, <argument><expr><name>_B</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>double</name></type> <name>getY</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>A</name><operator>*</operator><name>x</name><operator>+</operator><name>C</name></expr>;</return>
    }</block></function>

    <function><type><name>double</name></type> <name>length</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name> <init>= <expr><name>xmin</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name> <init>= <expr><call><name>getY</name><argument_list>(<argument><expr><name>xmin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name> <init>= <expr><name>xmax</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name> <init>= <expr><call><name>getY</name><argument_list>(<argument><expr><name>xmax</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>-</operator><name>x2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>part</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">100000000.0</literal></expr>)</condition><then> <block>{
            <if>if<condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>xmin</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>

            <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <name>xmin</name></expr>)</condition><then> <block>{
                <return>return <expr><literal type="number">1</literal></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
            }</block></else></if>
        }</block></then></if>

        <if>if<condition>(<expr><call><name>cmp</name><argument_list>(<argument><expr><name>A</name><operator>*</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>B</name><operator>*</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>C</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>

        <if>if<condition>(<expr><name>A</name><operator>*</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>B</name><operator>*</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>C</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        }</block></then></if>

        <if>if<condition>(<expr><name>A</name><operator>*</operator><name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name>B</name><operator>*</operator><name><name>p</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name>C</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        }</block></then></if>
    }</block></function>
</public>}</block>;</class>


<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>x</name></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>.</operator><name>y</name></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>x</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>y</name></name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Triangle</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>.</operator><name>A</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>.</operator><name>B</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>.</operator><name>C</name></name></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Triangle</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>A</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>B</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>C</name></name></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Line</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Point</name></type> <name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name></type> <name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>setLine</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Line</name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"y = "</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>A</name></name> <operator>&lt;&lt;</operator> <literal type="string">"*x + "</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>C</name></name></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>bpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then> <else>else <block>{
        <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>half</name> <init>= <expr><call><name>bpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>half</name><operator>*</operator><name>half</name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>bpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>a</name></expr>;</return>
        }</block></else></if>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>fact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><name>n</name><operator>*</operator><call><name>fact</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>factorize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primeList</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>primeList</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>primeList</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>comp</name> <init>= <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>n</name><operator>%</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name><name>comp</name><operator>.</operator><name>second</name></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>n</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <if>if<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>euler</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primeList</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>fact</name> <init>= <expr><call><name>factorize</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>primeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>fact</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>factor</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>res</name><operator>*=</operator><name>factor</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>inversePrime</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>bpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>inverseCoprimes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primeList</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>bpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>euler</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>primeList</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primeList</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>inverseCoprimes</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>primeList</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>enumerateDivisors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>primeList</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>divs</name> <init>= <expr><call><name>factorize</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>primeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>totals</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>divs</name><operator>.</operator><name>size</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>totals</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>divs</name><operator>.</operator><name>size</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>totals</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>totals</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name><name>divs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>totals</name><index>[<expr><call><name><name>totals</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>values</name> <init>= <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>divs</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><name><name>totals</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><operator>(</operator><name><name>divs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>values</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>r</name><operator>*=</operator><call><name>bpow</name><argument_list>(<argument><expr><name><name>divs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>reverse</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>temp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>k</name> <operator>==</operator> <operator>(</operator><name>len</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>count</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>a</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>res</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>itoa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>radix</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>(</operator><name>sign</name> <operator>=</operator> <name>n</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><name>n</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <do>do <block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>%</operator> <name>radix</name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    }</block> while <condition>(<expr><operator>(</operator><name>n</name> <operator>/=</operator> <name>radix</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    <if>if <condition>(<expr><name>sign</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name><modifier>*</modifier></type> <name>vectorToArray</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>a</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>stringToNumber</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>itoa</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>numberToString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>atoi</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>booleanAnswerBinarySearch</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>params</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>f</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>left</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>left</name></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>f</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>right</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>right</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>middle</name> <init>= <expr><operator>(</operator><name>left</name><operator>+</operator><name>right</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>f</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>g</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>booleanAnswerBinarySearch</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>middle</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><call><name>booleanAnswerBinarySearch</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>middle</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>enumerarePermutations</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fac</name> <init>= <expr><call><name>fact</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>fac</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>next_permutation</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>enumerarePermutations</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>array</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fac</name> <init>= <expr><call><name>fact</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>fac</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>next_permutation</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>array</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>array</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>array</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>enumerareTuples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>bpow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tuple</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>tuple</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name><operator>/</operator><call><name>bpow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>k</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>enumerareTuples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>array</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>array</name><operator>.</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>bpow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt; <argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tuple</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>tuple</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><operator>(</operator><name>i</name><operator>/</operator><call><name>bpow</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tuple</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>bool</name><modifier>*</modifier></type> <name>sieve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bound</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>bool</name><index>[<expr><name>bound</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>bound</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>array</name></expr>;</return>
}</block></function>

<function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sieveList</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bound</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>bool</name><index>[<expr><name>bound</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>bound</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>array</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>
	
	<decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bound</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>k</name><operator>&amp;</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>alignLeft</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>length</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>string</name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>a</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>decToRadix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>string</name></type> <name>res</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></then></if>
    <while>while<condition>(<expr><name>n</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>digit</name> <init>= <expr><name>n</name><operator>%</operator><name>radix</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call>(<name>char</name>)<argument_list>(<argument><expr><name>digit</name> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>/=</operator><name>radix</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>radixToDec</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>radix</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>res</name><operator>+=</operator><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator><operator>*</operator><call><name>bpow</name><argument_list>(<argument><expr><name>radix</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<class>class <name>F</name>
<block>{<private type="default">
</private><public>public:
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>f</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>inverse</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>int</name></type> <name>NEUTRAL</name></decl>;</decl_stmt>

    <constructor><name>F</name><parameter_list>(<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>pf</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pinverse</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>f</name> <operator>=</operator> <name>pf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inverse</name> <operator>=</operator> <name>pinverse</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>NEUTRAL</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><name>F</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <function type="operator"><type><name>int</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>inversed</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>inverse</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</class>


<class>class <name>BIT</name>
<block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>F</name></type> <name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tree</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>array</name></decl>;</decl_stmt>

    <constructor><name>BIT</name><parameter_list>(<parameter><decl><type><name>F</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name><name>source</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>source</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>source</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>arr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>array</name> <operator>=</operator> <name>arr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <name>func</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tr</name><argument_list>(<argument><expr><name><name>source</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>tree</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>source</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>u</name><operator>&lt;</operator><name><name>tree</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>u</name> <operator>=</operator> <name>u</name> <operator>|</operator> <operator>(</operator><name>u</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><name>int</name></type> <name>value</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>f</name><operator>.</operator><name>inversed</name></name><argument_list>(<argument><expr><call><name>p</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>p</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>p</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><name><name>tree</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><call><name>f</name><argument_list>(<argument><expr><name><name>tree</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>p</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>&amp;</operator><operator>(</operator><name>v</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>
</public>}</block>;</class>



<class>class <name>Graph</name><block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>adj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>w</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isDirected</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isWeighted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>Graph</name><parameter_list>()</parameter_list><block>{
    }</block></constructor>

    <function><type><name>void</name></type> <name>setDirected</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setWeighted</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>isWeighted</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <constructor><name>Graph</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>_adj</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>_w</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>adj</name> <operator>=</operator> <name>_adj</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>w</name> <operator>=</operator> <name>_w</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>readByMatrix</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>last</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>isWeighted</name></name></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>addWeighted</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else<block>{
                    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></else></if>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>printWeights</name><parameter_list>()</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" {"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name>j</name><operator>!=</operator><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>w</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><name>void</name></type> <name>addWeighted</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>weight</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>w</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>isDirected</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>m</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>adj</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>w</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>weight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>graypath</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>cycles</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>outs</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>color</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>graypath</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>graypath</name></expr></argument>, <argument><expr><name>cycles</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>outs</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if<condition>(<expr><name><name>color</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name><operator>!=</operator><name>u</name></expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cycle</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>bool</name></type> <name>now</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>graypath</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                        <if>if<condition>(<expr><name><name>graypath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>u</name></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        }</block></then></if>

                        <if>if<condition>(<expr><name>now</name></expr>)</condition><then><block>{
                            <expr_stmt><expr><call><name><name>cycle</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>graypath</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>

                        <if>if<condition>(<expr><name><name>graypath</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>now</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></for>
                    <expr_stmt><expr><name>cycles</name> <operator>=</operator> <name>cycle</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name><name>graypath</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>color</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>number</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>color</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>outs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cycles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>path</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>cycles</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>outs</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>findConnectedComponents</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>array</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>component</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>component</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                    <expr_stmt><expr><name><name>array</name><index>[<expr><name><name>component</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>shortestPath</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>res</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name>from</name> <operator>==</operator> <name>to</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>newTo</name> <init>= <expr><name><name>p</name><index>[<expr><name>to</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>shortestPath</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>newTo</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>shortestPath</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>shortestPath</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bfsPath</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dists</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dists</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><call><name>shortestPath</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bfsDists</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dists</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dists</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>dists</name></expr>;</return>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>findCycles</name><parameter_list>()</parameter_list><block>{
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>color</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>outs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cycles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>graypath</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>graypath</name></expr></argument>, <argument><expr><name>cycles</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>outs</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>cycles</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>dists</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>visited</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>visited</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dists</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><operator>!</operator><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dists</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>dists</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></while>
    }</block></function>

    <function><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>toposort</name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>newAdj</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>newAdj</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
           <expr_stmt><expr><call><name><name>this</name><operator>-&gt;</operator><name>add</name></name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>outs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>path</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cycles</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>color</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>pr</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>cycles</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>outs</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name><argument_list>(<argument><expr><name><name>outs</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>outs</name><operator>.</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>outs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>r</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>r</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></for>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
             <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                 <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                 <if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name><name>r</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
                     <decl_stmt><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sh</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                     <return>return <expr><name>sh</name></expr>;</return>
                 }</block></then></if>
             }</block></for>
        }</block></for>

        <return>return <expr><name>p</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><type><name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>INFP</name> <init>= <expr><literal type="number">1000000000</literal><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>


    
    <function><type><name>void</name></type> <name>Dijkstra</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>dists</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>dists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>INF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>dists</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>INF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>used</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>used</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then><block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>newD</name> <init>= <expr><name><name>dists</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>w</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>newD</name> <operator>&lt;</operator> <name><name>dists</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>dists</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>newD</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>newV</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>minDist</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>INF</name></name><operator>+</operator><name><name>this</name><operator>-&gt;</operator><name>INF</name></name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>minDist</name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>newV</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>minDist</name> <operator>=</operator> <name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><name>v</name> <operator>=</operator> <name>newV</name></expr>;</expr_stmt>
        }</block></for>
    }</block></function>
    

	<comment type="block">/*
    void Dijkstra(Array&lt;int&gt;&amp; p, Array&lt;int&gt;&amp; d, int s){
        for(int i = 0; i&lt;n; i++){
            d.add(this-&gt;INF);
        }
        d[s] = 0;

        for(int i = 0; i&lt;n; i++){
            p.add(this-&gt;INF);
        }
        p[s] = s;

        set &lt; pair&lt;int,int&gt; &gt; q;
        q.insert (make_pair (d[s], s));
        while (!q.empty()) {
            int v = q.begin()-&gt;second;
            q.erase (q.begin());
            for (size_t j=0; j&lt;adj[v].size(); ++j) {
                int to = adj[v][j];
                int len = w[v][j];
                if (d[v] + len &lt; d[to]) {
                    q.erase (make_pair (d[to], to));
                    d[to] = d[v] + len;
                    p[to] = v;
                    q.insert (make_pair (d[to], to));
                }
            }
        }
    }
	 * */</comment>
</public>}</block>;</class>

<function><type><name>int</name></type> <name>clp2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ 
	<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>p</name><operator>&lt;&lt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt></block></for>
	<return>return <expr><operator>++</operator><name>x</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>fillArray</name><parameter_list>(<parameter><decl><type><name><name>Array</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><call><name>clp2</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>a</name><operator>.</operator><name>size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>need</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>sumOfDigits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr></incr>)</control><block>{
		<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>numOfDigits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr></incr>)</control><block>{
		<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>Graph</name><modifier>&amp;</modifier></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Graph</name></type> <name>graph</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>graph</name><operator>.</operator><name>isDirected</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>isDirected</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>graph</name><operator>.</operator><name>isWeighted</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>isWeighted</name></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>graph</name><operator>.</operator><name>isWeighted</name></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>addWeighted</name></name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>g</name> <operator>=</operator> <name>graph</name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Graph</name><modifier>&amp;</modifier></type> <name>g</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">" {"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>g</name><operator>.</operator><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>j</name><operator>!=</operator><name><name>g</name><operator>.</operator><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>g</name><operator>.</operator><name>adj</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>g</name><operator>.</operator><name>adj</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>pot</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>isPol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>itoa</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>len</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>


<undef>#<directive>undef</directive> <name>int</name></undef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
<define>#<directive>define</directive> <macro><name>int</name></macro> <value>long long int</value></define>
<expr_stmt><expr><name>RANDOM</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<expr_stmt><expr><call><name>srand</name> <argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//freopen("enchanted.in", "r", stdin);</comment>
<comment type="line">//freopen("enchanted.out", "w", stdout);</comment>
<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		
	<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>bound</name> <init>= <expr><literal type="number">6000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type> <name>primes</name> <init>= <expr><call><name>sieve</name><argument_list>(<argument><expr><name>bound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>summsPrimes</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>bound</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>summsPol</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name>bound</name></expr>]</index></name><operator>(</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>primes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>summsPrimes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>summsPrimes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name><name>summsPrimes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>summsPrimes</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
		
		<if>if<condition>(<expr><call><name>isPol</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>summsPol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>summsPol</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name><name>summsPol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>summsPol</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>MAX_MAX</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bound</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><name>q</name><operator>*</operator><name><name>summsPrimes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>p</name> <operator>*</operator> <name><name>summsPol</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; summsPrimes[i] &lt;&lt; " " &lt;&lt; summsPol[i] &lt;&lt; " " &lt;&lt; f &lt;&lt;  endl;</comment>
		
		<if>if<condition>(<expr><name>f</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>max</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	
	<if>if<condition>(<expr><name>max</name> <operator>&gt;</operator> <name>MAX_MAX</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree"</literal></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

</unit>
