<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12452787.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//mehulagarwal</comment>
<define>#<directive>define</directive> <macro><name>ll</name></macro>         <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>S</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>       <value>scanf("%d", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>Sl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>scanf("%lld", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>Sd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>scanf("%lf", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>       <value>printf("%d\n", x)</value></define>
<define>#<directive>define</directive> <macro><name>Pl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>printf("%lld\n", x)</value></define>
<define>#<directive>define</directive> <macro><name>Pd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>printf("%lf\n", x)</value></define>
<define>#<directive>define</directive> <macro><name>Pblank</name><parameter_list>()</parameter_list></macro>   <value>printf(" ")</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro>   <value>memset(x,y,sizeof(x))</value></define>
<define>#<directive>define</directive> <macro><name>F</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></macro> <value>for (x = y; x &lt; z; x = x + i)</value></define>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>

<decl_stmt><decl><type><name>int</name></type> <name><name>dppa</name><index>[<expr><literal type="number">1500005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dppr</name><index>[<expr><literal type="number">1500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>isprime</name><index>[<expr><literal type="number">1500005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>,<decl><type ref="prev"/><name>te</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>isprime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>isprime</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><literal type="number">1500004</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">1500004</literal></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>isprime</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name><name>dppr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1500003</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>isprime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>dppr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dppr</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>dppr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dppr</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>stack</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sta</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dppa</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1500005</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s1</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>temp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name>te</name> <operator>=</operator> <name>temp</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>te</name> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sta</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>sta</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>sta</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sta</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>s1</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>dppa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dppa</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>dppa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dppa</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1500000</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>q</name><operator>*</operator><name><name>dppr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>p</name><operator>*</operator><name><name>dppa</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Palindromic tree is better than splay tree\n"</literal></expr>;</expr_stmt>
    }</block></then></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
