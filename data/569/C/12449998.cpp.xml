<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12449998.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>size</name></macro> <value>1200000</value></define>
<decl_stmt><decl><type><name>int</name></type> <name><name>rub</name><index>[<expr><name>size</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>prim</name><index>[<expr><name>size</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{

	<decl_stmt><decl><type><name>stringstream</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>x</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>x</name><index>[<expr><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	

	<decl_stmt><decl><type><name>string</name></type> <name>x2</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x2</name> <operator>==</operator> <name>x</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>


<function><type><name>void</name></type> <name>markMultiples</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <name>i</name><operator>*</operator><name>a</name><operator>)</operator> <operator>&lt;=</operator> <name>n</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// minus 1 because index starts from 0.</comment>
		<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<comment type="line">// A function to print all prime numbers smaller than n</comment>
<function><type><name>void</name></type> <name>SieveOfEratosthenes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<comment type="line">// There are no prime numbers smaller than 2</comment>
	<if>if <condition>(<expr><name>n</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<comment type="line">// Create an array of size n and initialize all elements as 0</comment>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

		<comment type="block">/* Following property is maintained in the below for loop
		arr[i] == 0 means i + 1 is prime
		arr[i] == 1 means i + 1 is not prime */</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<comment type="line">//(i+1) is prime, print it and mark its multiples</comment>
				<comment type="line">//printf("%d ", i + 1);</comment>
				<expr_stmt><expr><name><name>prim</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>markMultiples</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></then></if>
}</block></function>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>


	<expr_stmt><expr><call><name>SieveOfEratosthenes</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>rub</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator> <expr><name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>prim</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{

		<if>if <condition>(<expr><name>a</name><operator>*</operator><name><name>rub</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>b</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>n</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<comment type="line">//cout &lt;&lt; prim[size - 1] / rub[size - 1];</comment>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
