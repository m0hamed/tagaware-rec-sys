<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12454239.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>

<class>class <name>bunsu</name> <block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

    <constructor><name>bunsu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>u</name></name> <operator>=</operator> <name>u</name> <operator>/</operator> <name>g</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>d</name> <operator>/</operator> <name>g</name></expr>;</expr_stmt>
    }</block></constructor>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{
        <return>return <expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{
        <return>return <expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name> <operator>&gt;</operator> <name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bunsu</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>bunsu</name><argument_list>(<argument><expr><operator>(</operator><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name><operator>)</operator></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bunsu</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>bunsu</name><argument_list>(<argument><expr><operator>(</operator><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name><operator>)</operator></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bunsu</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>bunsu</name><argument_list>(<argument><expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bunsu</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>bunsu</name><argument_list>(<argument><expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function type="operator"><type><name>void</name></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>bunsu</name><argument_list>(<argument><expr><operator>(</operator><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name><operator>)</operator></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>void</name></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>bunsu</name><argument_list>(<argument><expr><operator>(</operator><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>p</name><operator>.</operator><name>u</name></name><operator>*</operator><name>d</name><operator>)</operator></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>void</name></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>bunsu</name><argument_list>(<argument><expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function type="operator"><type><name>void</name></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bunsu</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <call><name>bunsu</name><argument_list>(<argument><expr><name>u</name><operator>*</operator><name><name>p</name><operator>.</operator><name>d</name></name></expr></argument>, <argument><expr><name>d</name><operator>*</operator><name><name>p</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>static</specifier> <type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><name>a</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>

    }</block></function>


</public>}</block>;</class>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>T</name> <operator>&gt;</operator> <name>S</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>S</name> <operator>*=</operator> <name>q</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


}</block></function></unit>
