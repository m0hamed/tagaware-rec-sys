<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12459481.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>listen</name></decl>,<decl><type ref="prev"/><name>down</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>listen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>down</name> <operator>=</operator> <name>S</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>down</name> <operator>&lt;</operator> <name>T</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>down</name> <operator>+=</operator> <name>q</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>listen</name> <operator>+=</operator> <name>q</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>down</name> <operator>&gt;=</operator> <name>T</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>listen</name> <operator>&gt;=</operator> <name>down</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>listen</name> <operator>=</operator> <name>listen</name><operator>-</operator><name>down</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
