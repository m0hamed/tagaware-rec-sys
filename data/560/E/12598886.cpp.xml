<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12598886.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Maxn</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>Max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>Mod</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Mul_inv</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>coor</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>coor</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><name>x</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name> <operator>||</operator> <operator>(</operator><name>x</name><operator>==</operator><name><name>b</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block> <decl><name><name>a</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>;</struct>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>gcd_extended</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>q</name><init>=<expr><name>x</name><operator>/</operator><name>y</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name><init>=<expr><name>x</name> <operator>%</operator> <name>y</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name><init>=<expr><operator>(</operator><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>q</name><operator>)</operator> <operator>%</operator> <name>Maxn</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>r</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>t</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt>
	<return>return <expr><call><name>gcd_extended</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><name>k1</name><operator>+</operator><name>k2</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name><name>Mul_inv</name><index>[<expr><name>k2</name></expr>]</index></name> <operator>*</operator> <name><name>Mul_inv</name><index>[<expr><name>k1</name></expr>]</index></name> <operator>%</operator> <name>Maxn</name><operator>)</operator> <operator>*</operator> <name><name>Mod</name><index>[<expr><name>n</name></expr>]</index></name> <operator>%</operator> <name>Maxn</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Mod</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Mul_inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>Max</name><operator>=</operator><name>m</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>Max</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>Mod</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>Mod</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name> <operator>%</operator> <name>Maxn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Mul_inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>gcd_extended</name><argument_list>(<argument><expr><name><name>Mod</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>Maxn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>combination</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator> <operator>and</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&gt;=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><call><name>combination</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>Maxn</name></expr>;</expr_stmt></block></then></if></block></for>
		<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name>Maxn</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
<comment type="line">//	if (f[k-1]&lt;0) f[k-1]+=Maxn;</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
