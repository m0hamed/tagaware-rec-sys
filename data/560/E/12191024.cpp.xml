<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12191024.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<define>#<directive>define</directive> <macro><name>L_L</name></macro> <value>"%I64d"</value></define>
<define>#<directive>define</directive> <macro><name>M</name></macro> <value>100010</value></define>
<define>#<directive>define</directive> <macro><name>LY</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></macro> <value>freopen (p".in", "r", stdin); freopen (p".out", "w", stdout)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fac</name><index>[<expr><name>M</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>inv</name><index>[<expr><name>M</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>mo</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>, <decl><type ref="prev"/><name><name>s</name><index>[<expr><literal type="number">2010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>w</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>mod</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>mo</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>mo</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>Inv</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>mo</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name>o</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>mod</name> <argument_list>(<argument><expr><name>s</name> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>mod</name> <argument_list>(<argument><expr><name>t</name> <operator>*</operator> <name>t</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>s</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>pre</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">200000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mod</name> <argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Inv</name> <argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>C</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>mod</name> <argument_list>(<argument><expr><call><name>mod</name> <argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>n</name> <operator>+</operator> <name>m</name></expr>]</index></name> <operator>*</operator> <name><name>inv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>inv</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//LY("e");</comment>
	<expr_stmt><expr><call><name>pre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><operator>++</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>w</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr><operator>,</operator> <expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr><operator>,</operator> <expr><name><name>y</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name> <argument_list>(<argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>w</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>C</name> <argument_list>(<argument><expr><name><name>x</name><index>[ <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>y</name><index>[ <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>y</name><index>[ <expr><name><name>w</name><index>[<expr><name>j</name></expr>]</index></name></expr> ]</index></name> <operator>&lt;=</operator> <name><name>y</name><index>[ <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mod</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <call><name>mod</name> <argument_list>(<argument><expr><call><name>C</name> <argument_list>(<argument><expr><name><name>x</name><index>[ <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>-</operator> <name><name>x</name><index>[ <expr><name><name>w</name><index>[<expr><name>j</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[ <expr><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name> <operator>-</operator> <name><name>y</name><index>[ <expr><name><name>w</name><index>[<expr><name>j</name></expr>]</index></name></expr> ]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><name>L_L</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
