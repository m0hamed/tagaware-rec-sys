<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12587703.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block" format="doxygen">/*************************************************************************
    &gt; File Name: code/cf/#313/EE.cpp
    &gt; Author: 111qqz
    &gt; Email: rkz2013@126.com 
    &gt; Created Time: 2015å¹´08æ18æ¥ ææäº 18æ¶43å18ç§
 ************************************************************************/</comment>

<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<define>#<directive>define</directive> <macro><name>y0</name></macro> <value>abc111qqz</value></define>
<define>#<directive>define</directive> <macro><name>y1</name></macro> <value>hust111qqz</value></define>
<define>#<directive>define</directive> <macro><name>yn</name></macro> <value>hez111qqz</value></define>
<define>#<directive>define</directive> <macro><name>j1</name></macro> <value>cute111qqz</value></define>
<define>#<directive>define</directive> <macro><name>tm</name></macro> <value>crazy111qqz</value></define>
<define>#<directive>define</directive> <macro><name>lr</name></macro> <value>dying111qqz</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i=0;i&lt;int(n);++i)</value></define>  
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x7fffffff</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2E3</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1E9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1E5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fac</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>quickpow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <return>return <expr><name><name>fac</name><index>[<expr><name>a</name></expr>]</index></name><operator>*</operator><call><name>quickpow</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>b</name></expr>]</index></name><operator>*</operator><name><name>fac</name><index>[<expr><name>a</name><operator>-</operator><name>b</name></expr>]</index></name><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>lucas</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><call><name>C</name><argument_list>(<argument><expr><name>a</name><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>b</name><operator>%</operator><name>mod</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>lucas</name><argument_list>(<argument><expr><name>a</name><operator>/</operator><name>mod</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><name>mod</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
<comment type="line">//      int x,y;  cin&gt;&gt;x&gt;&gt;y;</comment>
<comment type="line">//      p[i].first=x; p[i].second=y;</comment>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><name>h</name></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>=</operator><name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>lucas</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> 
            <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><call><name>lucas</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator> <name>mod</name> <operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
