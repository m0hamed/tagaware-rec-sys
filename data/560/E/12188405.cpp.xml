<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12188405.cpp"><comment type="line">//Language: GNU C++11</comment>


<define>#<directive>define</directive> <macro><name>_CRT_SECURE_NO_WARNINGS</name></macro></define>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type>       <name>ll</name>;</typedef>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro>          <value>A.begin(),A.end()</value></define>
<define>#<directive>define</directive> <macro><name>rall</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro>         <value>A.rbegin(),A.rend()</value></define>
<define>#<directive>define</directive> <macro><name>SP</name></macro>              <value>setprecision</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></macro>        <value>memset(A,B,sizeof A)</value></define>
<define>#<directive>define</directive> <macro><name>sorta</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro>        <value>sort(all(A))</value></define>
<define>#<directive>define</directive> <macro><name>sortd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro>        <value>sort(rall(A))</value></define>
<define>#<directive>define</directive> <macro><name>sortf</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>F</name></type></parameter>)</parameter_list></macro>      <value>sort(all(A),F)</value></define>
<define>#<directive>define</directive> <macro><name>Get</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>bit</name></type></parameter>)</parameter_list></macro>   <value>(mask&amp;(1LL&lt;&lt;bit))</value></define>
<define>#<directive>define</directive> <macro><name>Set</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>bit</name></type></parameter>)</parameter_list></macro>   <value>(mask|(1LL&lt;&lt;bit))</value></define>
<define>#<directive>define</directive> <macro><name>Reset</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>bit</name></type></parameter>)</parameter_list></macro> <value>(mask&amp;(~(1LL&lt;&lt;bit)))</value></define>
<define>#<directive>define</directive> <macro><name>Flib</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>bit</name></type></parameter>)</parameter_list></macro>  <value>(mask^(1LL&lt;&lt;bit))</value></define>
<define>#<directive>define</directive> <macro><name>LowOn</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>,<parameter><type><name>bit</name></type></parameter>)</parameter_list></macro> <value>(mask&amp;-mask)</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro>              <value>(acos(0.) * 2)</value></define>
<define>#<directive>define</directive> <macro><name>exp</name></macro>             <value>2.71828182845904523536028747135266249775724709369995</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro>             <value>.000000001</value></define>
<define>#<directive>define</directive> <macro><name>oo</name></macro>              <value>1000000000</value></define>
<define>#<directive>define</directive> <macro><name>endl</name></macro>            <value>'\n'</value></define>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>remax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>A</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt></block></then></if> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>remin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>A</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt></block></then></if> }</block></function>
<function><type><name>string</name></type> <name>ToString</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>string</name></type> <name>ret</name></decl>;</decl_stmt> <do>do<block>{ <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>num</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>num</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt> }</block> while <condition>(<expr><name>num</name></expr>)</condition>;</do> <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>ToNumber</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <name>p</name></expr><operator>,</operator> <expr><name>p</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>r</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>Gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <while>while <condition>(<expr><name>a</name> <operator>%=</operator> <name>b</name> <operator>^=</operator> <name>a</name> <operator>^=</operator> <name>b</name> <operator>^=</operator> <name>a</name></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>  <return>return <expr><name>b</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>Power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>power</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>power</name></expr>)</condition><block>{ <if>if <condition>(<expr><name>power</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>power</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>base</name> <operator>*=</operator> <name>base</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>PowerMod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{ <if>if <condition>(<expr><operator>!</operator><name>power</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> <if>if <condition>(<expr><name>power</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>base</name> <operator>*</operator> <call><name>PowerMod</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>power</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return></block></then></if> <return>return <expr><call><name>PowerMod</name><argument_list>(<argument><expr><operator>(</operator><name>base</name> <operator>*</operator> <name>base</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>, <argument><expr><name>power</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>Log</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>num</name></expr>)</condition><block>{ <expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt> <expr_stmt><expr><name>num</name> <operator>/=</operator> <name>base</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>Count</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>mask</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>mask</name></expr>)</condition><block>{ <if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ret</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ret</name></expr>;</return> }</block></function>


<define>#<directive>define</directive> <macro><name>point</name></macro> <value>pair &lt;int , int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<decl_stmt><decl><type><name>int</name></type> <name><name>fact</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>inv</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>INV</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><operator>~</operator><name><name>inv</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>inv</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return></block></then></if>
    <return>return <expr><name><name>inv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>PowerMod</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name>ll</name><operator>)</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><call><name>INV</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><call><name>INV</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>arr</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2001</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <block>{ <expr><name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>w</name> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">200000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>i</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>inv</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>nCr</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>&lt;=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>ll</name><operator>)</operator><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><call><name>nCr</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>X</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if></block></for>
    }</block></for>
    <expr_stmt><expr><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>mod</name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>
    <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<endif>#<directive>endif</directive></endif>
    <while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
        <expr_stmt><expr><call><name>run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<else>#<directive>else</directive></else>
        <break>break;</break>
<endif>#<directive>endif</directive></endif>
    }</block></while>
<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="string">"\n\nTime: %d ms\n"</literal></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>clock</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000.</literal> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<endif>#<directive>endif</directive></endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
