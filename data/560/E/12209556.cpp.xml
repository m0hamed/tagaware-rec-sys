<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12209556.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctype.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>tomod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>extgcd</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>d</name></decl></parameter>,<parameter><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>d</name><operator>=</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <expr_stmt><expr><call><name>extgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>-=</operator><name>x</name><operator>*</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>LL</name></type> <name>mod_inv</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<comment type="line">//aå¨æ¨¡næä¹ä¸çéå</comment>
    <decl_stmt><decl><type><name>LL</name></type> <name>d</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>extgcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>d</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>+</operator><name>n</name><operator>)</operator><operator>%</operator><name>n</name></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>LL</name></type> <name><name>frac</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>inv</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>comb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>take</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><name><name>frac</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name><name>inv</name><index>[<expr><name>take</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name><name>inv</name><index>[<expr><name>c</name><operator>-</operator><name>take</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<struct>struct <name>Point</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Point</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
        <if>if<condition>(<expr><name>x</name><operator>!=</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
        <return>return <expr><name>y</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>;</return>
    }</block></function>
</public>}</block><decl><name><name>p</name><index>[<expr><literal type="number">10005</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>LL</name></type> <name><name>f</name><index>[<expr><literal type="number">10005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>frac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>frac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">200000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>frac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>frac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>mod_inv</name><argument_list>(<argument><expr><name><name>frac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>tomod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><call><name>comb</name><argument_list>(<argument><expr><name>h</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>comb</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&amp;&amp;</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><call><name>comb</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>-</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><call><name>comb</name><argument_list>(<argument><expr><name>h</name><operator>-</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><name>w</name><operator>-</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><name>tomod</name><operator>)</operator><operator>%</operator><name>tomod</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
