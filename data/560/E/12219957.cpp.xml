<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12219957.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>

<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>debug</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></macro> <value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x).begin() , (x).end()</value></define>
<define>#<directive>define</directive> <macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x).rbegin() , (x).rend()</value></define>
<define>#<directive>define</directive> <macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a ; i &lt; b ; i++)</value></define>
<define>#<directive>define</directive> <macro><name>fst</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>snd</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1E-9</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>2000000000</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name> ;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>


<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>inv</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>fastExpo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pot</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>pot</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

    <if>if<condition>(<expr><name>pot</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
        <return>return <expr><operator>(</operator><call><name>fastExpo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>pot</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>n</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
    }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>fastExpo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>pot</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>k</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name><name>inv</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name><name>inv</name><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>vii</name></type> <name>puntos</name></decl>,<decl><type ref="prev"/><name>puntos2</name></decl>;</decl_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>puntos</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument> ,<argument><literal type="number">200010</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>fastExpo</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>puntos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>puntos</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>puntos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>snd</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><name><name>puntos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fst</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><call><name>C</name><argument_list>(<argument><expr><name>col</name><operator>+</operator><name>row</name></expr></argument>,<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rr</name> <init>= <expr><name><name>puntos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>snd</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cc</name> <init>= <expr><name><name>puntos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fst</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>invalid</name> <init>= <expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>trans</name> <init>= <expr><call><name>C</name><argument_list>(<argument><expr><name>row</name><operator>-</operator><name>rr</name><operator>+</operator><name>col</name><operator>-</operator><name>cc</name></expr></argument>,<argument><expr><name>col</name><operator>-</operator><name>cc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>-</operator> <operator>(</operator><name>invalid</name><operator>*</operator><name>trans</name><operator>)</operator><operator>%</operator><name>MOD</name> <operator>+</operator> <name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
