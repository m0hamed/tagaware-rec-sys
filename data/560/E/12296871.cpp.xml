<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12296871.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include> 

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<comment type="line">//#define size(x) ((int)(x).size())</comment>
<define>#<directive>define</directive> <macro><name>error</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</value></define>
<comment type="line">//#define push_back pb</comment>
<define>#<directive>define</directive> <macro><name>setprecision</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout &lt;&lt; fixed &lt;&lt; setprecision((x))</value></define>
<define>#<directive>define</directive> <macro><name>read_fast</name></macro> <value>ios_base::sync_with_stdio(false) , cin.tie(0)</value></define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>h</name></decl> , <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXI</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>d</name><index>[<expr><name>MAXI</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MAXI</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>MAXI</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>help</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter> , <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr>)</condition><then>    <block type="pseudo"><return>return  <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr>)</condition><then>  <block type="pseudo"><return>return  <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return  <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>tavan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return  <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return  <expr><name>a</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>tavan</name><argument_list>(<argument><expr><name>a</name></expr></argument> , <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>ret</name></expr>;</expr_stmt>
        <return>return  <expr><name>ret</name> <operator>%</operator> <name>q</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>tavan</name><argument_list>(<argument><expr><name>a</name></expr></argument> , <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>ret</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>q</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return  <expr><name>ret</name> <operator>%</operator> <name>q</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>MAXI</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <comment type="line">//if (vec.size() &gt; 3)    cout &lt;&lt; i &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>t</name> <operator>*=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>%=</operator> <name>q</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tavan</name><argument_list>(<argument><expr><name>t</name></expr></argument> , <argument><expr><name>q</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>ll</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>   <block type="pseudo"><return>return  <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>d</name><index>[<expr><name>a</name> <operator>-</operator> <name>b</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>q</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>d</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return  <expr><name>ret</name> <operator>%</operator> <name>q</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>temp</name> <operator>*=</operator> <call><name>cal</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument> , <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>temp</name> <operator>%=</operator> <name>q</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>+</operator> <name>temp</name><operator>)</operator> <operator>%</operator> <name>q</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cal</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>q</name> <operator>-</operator> <name>sum</name><operator>)</operator> <operator>%</operator> <name>q</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>read_fast</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr> , <expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>h</name></expr> , <expr><name>w</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
