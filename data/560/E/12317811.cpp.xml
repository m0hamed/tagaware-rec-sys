<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12317811.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>onlylove</name></macro> <value>"My Sky"</value></define>
<define>#<directive>define</directive> <macro><name>mysky</name></macro> <value>"TT"</value></define>

<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro> <value>int(A.size())</value></define>
<define>#<directive>define</directive> <macro><name>mpair</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>LL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x &lt;&lt; 1)</value></define>
<define>#<directive>define</directive> <macro><name>RR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x &lt;&lt; 1) | 1 )</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>


<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pt</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>OnlineJudge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxc</name> <init>= <expr><literal type="number">200000</literal><operator>+</operator><literal type="number">1912</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1000</literal><operator>+</operator><literal type="number">1912</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>md</name> <init>= <expr><literal type="number">1000LL</literal><operator>*</operator><literal type="number">1000</literal><operator>*</operator><literal type="number">1000</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pt</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>gt</name><index>[<expr><name>maxc</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl> , <decl><type ref="prev"/><name>w</name></decl> , <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>moduloReverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>xa</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>xb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>xr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>md</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>/</operator> <name>m</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name>a</name> <operator>%</operator> <name>m</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>xr</name> <operator>=</operator> <name>xa</name> <operator>-</operator> <name>q</name><operator>*</operator><name>xb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>xa</name> <operator>=</operator> <name>xb</name></expr>;</expr_stmt><expr_stmt><expr><name>xb</name> <operator>=</operator> <name>xr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>xa</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Init</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>gt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">200000</literal><operator>+</operator><literal type="number">19</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>gt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>gt</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><call><name>ll</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>md</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name><name>gt</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <call><name>moduloReverse</name><argument_list>(<argument><expr><name><name>gt</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>gt</name><index>[<expr><name>k</name></expr>]</index></name> <operator>%</operator> <name>md</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>md</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>j</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>X</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>C</name><argument_list>(<argument><expr><name>dx</name></expr></argument> , <argument><expr><name>dx</name> <operator>+</operator> <name>dy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>pt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>pt</name><argument_list>(<argument><expr><name>h</name></expr></argument> , <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument> , <argument><expr><name>a</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
           <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>Y</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument> , <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>%</operator><name>md</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>%=</operator><name>md</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument> , <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>%</operator><name>md</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>%=</operator><name>md</name></expr>;</expr_stmt>
           }</block></then></if></block></for>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>f</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>f</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>md</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator> <name>md</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name> <operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>OnlineJudge</name></expr>)</condition><then><block>{
    }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.inp"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>X</name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
