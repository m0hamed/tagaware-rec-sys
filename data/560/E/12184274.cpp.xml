<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12184274.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>"assert.h"</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<if>#<directive>if</directive> <expr><name>LOCAL</name></expr></if>
	<define>#<directive>define</directive> <macro><name>DO_NOT_SEND</name></macro></define>
<endif>#<directive>endif</directive></endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>IntMaxVal</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1e20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>IntMinVal</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <operator>-</operator><literal type="number">1e20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>LongMaxVal</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator> <literal type="number">1e20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>LongMinVal</name> <init>= <expr><operator>(</operator><name>LL</name><operator>)</operator> <operator>-</operator><literal type="number">1e20</literal></expr></init></decl>;</decl_stmt>

<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a; i &lt; b ; ++i)</value></define>
<define>#<directive>define</directive> <macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a; i &gt;= b; --i)</value></define>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>minimize</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>maximize</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument> , <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></function>

<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>v.begin(),v.end()</value></define>

<define>#<directive>define</directive> <macro><name>endl</name></macro> <value>'\n'</value></define>
<struct_decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>argument_type</name>;</struct_decl>
<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> struct <name><name>argument_type</name><argument_list type="generic">&lt;<argument><expr><name>T</name><operator>(</operator><name>U</name><operator>)</operator></expr></argument>&gt;</argument_list></name> <block>{<public type="default"> <typedef>typedef <type><name>U</name></type> <name>type</name>;</typedef> </public>}</block>;</struct>
<define>#<directive>define</directive> <macro><name>next</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></macro> <value>argument_type&lt;void(t)&gt;::type i; cin &gt;&gt; i;</value></define>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ <if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> }</block></for> <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>t</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>readVector</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> <return>return <expr><name>res</name></expr>;</return> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>mod_num</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	
	<constructor><name>mod_num</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{ }</block></constructor>
	<constructor><name>mod_num</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>MOD</name></expr> ?</condition><then> <expr><name>x</name> <operator>%</operator> <name>MOD</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr></argument>)</argument_list></call> </member_init_list><block>{ }</block></constructor>
	
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>res</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>+=</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt> <if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>res</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>x</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>this</name> <operator>+=</operator> <name>MOD</name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>x</name> <operator>*</operator> <operator>(</operator><name>LL</name><operator>)</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>mod_num</name></type> <name>operator <name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>LL</name><operator>)</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
		
	<function><type><name>mod_num</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>auto</name></type> <name>res</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>res</name> <operator>*=</operator> <name>res</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <operator>*</operator><name>this</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
	
	<function><type><name>mod_num</name></type> <name>rev</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><call><name>pow</name><argument_list>(<argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function type="operator"><type><name>mod_num</name></type> <name>operator <name>+</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mod_num</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>b</name></expr>;</return> }</block></function>
<function type="operator"><type><name>mod_num</name></type> <name>operator <name>*</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mod_num</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return> }</block></function>
<function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>mod_num</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
<function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mod_num</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>

<struct>struct <name>datum</name> <block>{<public type="default">

</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mod_num</name></expr></argument>&gt;</argument_list></name></type> <name>fact</name><argument_list>(<argument><expr><literal type="number">200</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mod_num</name></expr></argument>&gt;</argument_list></name></type> <name>fact_rev</name><argument_list>(<argument><expr><call><name><name>fact</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>mod_num</name></type> <name>c</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>fact_rev</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>fact_rev</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>mod_num</name></type> <name>c</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>ps</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>ps</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name><name>ps</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>ps</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>dx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><call><name>c</name><argument_list>(<argument><expr><name>dx</name> <operator>+</operator> <name>dy</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>srand</name> <argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>FOR</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>fact.size()</argument>)</argument_list></macro> <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
	<macro><name>FOR</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>fact.size()</argument>)</argument_list></macro> <expr_stmt><expr><name><name>fact_rev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact_rev</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><call><name>mod_num</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>rev</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>next</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>auto</name></type> <name>ps</name> <init>= <expr><call><name><name>readVector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mod_num</name></expr></argument>&gt;</argument_list></name></type> <name>good_ways</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>good_ways</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>FOR</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name><name>good_ways</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>c</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>FOR</name> <argument_list>(<argument>first_fail</argument>, <argument><literal type="number">1</literal></argument>, <argument>i</argument>)</argument_list></macro> <expr_stmt><expr><name><name>good_ways</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>good_ways</name><index>[<expr><name>first_fail</name></expr>]</index></name> <operator>*</operator> <call><name>c</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>first_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>good_ways</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
