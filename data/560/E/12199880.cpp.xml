<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12199880.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fac</name><index>[<expr><literal type="number">500009</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>fp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>p</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><name>b</name><operator>*</operator><call><name>fp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>fp</name><argument_list>(<argument><expr><operator>(</operator><name>b</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>p</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>bt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name><init>=<expr><operator>(</operator><name><name>fac</name><index>[<expr><name>h</name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>w</name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>*</operator><call><name>fp</name><argument_list>(<argument><expr><operator>(</operator><name><name>fac</name><index>[<expr><name>h</name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>*</operator><name><name>fac</name><index>[<expr><name>w</name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>f</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>&gt;=</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>&gt;=</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name>f</name><operator>!=</operator><name>i</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><operator>(</operator><name>sum</name><operator>-</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>*</operator><call><name>fp</name><argument_list>(<argument><expr><operator>(</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>*</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><call><name>bt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>sum</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>f</name><operator>&lt;</operator><literal type="number">500009</literal></expr>;</condition><incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>f</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>f</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>f</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>f</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name><init>=<expr><operator>(</operator><name><name>fac</name><index>[<expr><name>h</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>*</operator><call><name>fp</name><argument_list>(<argument><expr><operator>(</operator><name><name>fac</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>fac</name><index>[<expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>f</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>f</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><operator>(</operator><name>sum</name><operator>-</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>+</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><call><name>fp</name><argument_list>(<argument><expr><operator>(</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><call><name>bt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>sum</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
