<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12240526.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>FilesX</name></macro></define>
<define>#<directive>define</directive> <macro><name>TimeX</name></macro></define>
<define>#<directive>define</directive> <macro><name>DEBUG</name></macro></define>

<ifdef>#<directive>ifdef</directive> <name>DEBUG</name></ifdef>
<define>#<directive>define</directive> <macro><name>DBG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;s&lt;&lt;": "#x"="&lt;&lt;x&lt;&lt;"\n";</value></define>
<else>#<directive>else</directive></else>
<define>#<directive>define</directive> <macro><name>DBG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></macro></define>
<endif>#<directive>endif</directive></endif>
<define>#<directive>define</directive> <macro><name>P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;#x&lt;&lt;" = { "&lt;&lt;x&lt;&lt;" }\n"</value></define>
<define>#<directive>define</directive> <macro><name>All</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>(a).begin(), (a).end()</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=0;i&lt;int(n);i++)</value></define>
<define>#<directive>define</directive> <macro><name>repd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=n-1;i&gt;=0;i--)</value></define>
<define>#<directive>define</directive> <macro><name>repi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=int(a);i&lt;int(n);i++)</value></define>
<define>#<directive>define</directive> <macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>memset(a, n, sizeof(a));</value></define>
<define>#<directive>define</directive> <macro><name>scn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>rep(i,n) cin&gt;&gt;a[i];</value></define>
<define>#<directive>define</directive> <macro><name>scn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></macro> <value>rep(i,row) rep(j,col) cin&gt;&gt;a[i][j];</value></define>
<define>#<directive>define</directive> <macro><name>prn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>rep(i,n-1) cout&lt;&lt;a[i]&lt;&lt;" "; cout&lt;&lt;a[n-1]&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>prn2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>row</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></macro> <value>rep(i,row){rep(j,col-1) cout&lt;&lt;a[i][j]&lt;&lt;" "; cout&lt;&lt;a[i][col-1]&lt;&lt;endl;}</value></define>
<define>#<directive>define</directive> <macro><name>dri</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;(x))</value></define>
<define>#<directive>define</directive> <macro><name>drii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d",&amp;(x),&amp;(y))</value></define>
<define>#<directive>define</directive> <macro><name>drl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%I64d",&amp;(x))</value></define>
<define>#<directive>define</directive> <macro><name>drll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>scanf("%I64d%I64d",&amp;(x),&amp;(y))</value></define>
<define>#<directive>define</directive> <macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>make_pair(a, b)</value></define>
<define>#<directive>define</directive> <macro><name>Odd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x%2!=0</value></define>
<define>#<directive>define</directive> <macro><name>Even</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x%2==0</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>3.1415926535897932384626433832795</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>20000000000</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><operator>(</operator><literal type="number">1e-7</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>dcmp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{  <return>return <expr><ternary><condition><expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>EPS</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>   }</block></function>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ul</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>is</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>

<comment type="line">//*---------------------------*/</comment>

<function><type><name>void</name></type> <name>solution</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>All</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
}</block></function>

<comment type="line">//*---------------------------*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<ifdef>#<directive>ifdef</directive> <name>Files</name></ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<endif>#<directive>endif</directive></endif>
	<decl_stmt><decl><type><name>double</name></type> <name>beg</name><init>=<expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solution</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<ifdef>#<directive>ifdef</directive> <name>Time</name></ifdef>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>end</name><init>=<expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*** Total time = %.3f sec ***"</literal></expr></argument>, <argument><expr><operator>(</operator><name>end</name> <operator>-</operator> <name>beg</name><operator>)</operator> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<endif>#<directive>endif</directive></endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
