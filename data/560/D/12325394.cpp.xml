<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12325394.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Iterator</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>same_string</name><parameter_list>(<parameter><decl><type><name>Iterator</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Iterator</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>same</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>a</name><operator>+</operator><name>i</name><operator>)</operator> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>b</name><operator>+</operator><name>i</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>same</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt> <break>break;</break> }</block></then></if>
	}</block></for>
	<return>return <expr><name>same</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Iterator</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>is_the_same</name><parameter_list>(<parameter><decl><type><name>Iterator</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Iterator</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><call><name>same_string</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{<return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if>
	<if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><call><name>is_the_same</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_the_same</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>b</name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>is_the_same</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>is_the_same</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>same</name> <init>= <expr><call><name>is_the_same</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>same</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
