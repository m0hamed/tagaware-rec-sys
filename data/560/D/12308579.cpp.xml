<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12308579.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>proc</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>from</name><operator>-</operator><name>to</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>to</name> <operator>-</operator> <name>from</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>from</name></expr></argument>,<argument><expr><name>from</name><operator>+</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>to</name><operator>-</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><name>from</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>from</name><operator>+</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>from</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>from</name> <operator>+</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>
</unit>
