<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12185174.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1600010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>T</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ss</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>se</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ts</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>te</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ss</name><operator>==</operator><name>se</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>S</name><index>[<expr><name>ss</name></expr>]</index></name><operator>==</operator><name><name>T</name><index>[<expr><name>ts</name></expr>]</index></name></expr>;</return></block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>se</name><operator>-</operator><name>ss</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name><operator>+</operator><name>ss</name></expr>]</index></name><operator>!=</operator><name><name>T</name><index>[<expr><name>ts</name><operator>+</operator><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name>se</name><operator>-</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>se</name><operator>-</operator><name>ss</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>ss</name></expr></argument>,<argument><expr><name>ss</name><operator>+</operator><name>mid</name></expr></argument>,<argument><expr><name>ts</name></expr></argument>,<argument><expr><name>ts</name><operator>+</operator><name>mid</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator>
       <call><name>dfs</name><argument_list>(<argument><expr><name>ss</name><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>se</name></expr></argument>,<argument><expr><name>ts</name><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><name>ss</name></expr></argument>,<argument><expr><name>ss</name><operator>+</operator><name>mid</name></expr></argument>,<argument><expr><name>ts</name><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>te</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator>
       <call><name>dfs</name><argument_list>(<argument><expr><name>ss</name><operator>+</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>se</name></expr></argument>,<argument><expr><name>ts</name></expr></argument>,<argument><expr><name>ts</name><operator>+</operator><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>,<argument><expr><name>S</name></expr></argument>,<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>S</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
