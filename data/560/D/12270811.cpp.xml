<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12270811.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>pb</name></macro>          <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro>          <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name></macro>         <value>105</value></define>
<define>#<directive>define</directive> <macro><name>read</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro>  <value>for ( int i = 0; i &lt; n; ++i ) cin &gt;&gt; a[i]</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>cmp</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter> )</parameter_list> <block>{
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name>c</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><operator>++</operator><name>j</name></expr></incr> )</control>
        <block type="pseudo"><if>if <condition>( <expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>go</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter> )</parameter_list> <block>{
    <if>if <condition>( <expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>( <expr><operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m2</name> <init>= <expr><operator>(</operator><name>c</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>( <expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>go</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if <condition>( <expr><call><name>cmp</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>go</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if <condition>( <expr><call><name>cmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>go</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if <condition>( <expr><call><name>cmp</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>go</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

    <return>return <expr><operator>(</operator> <call><name>go</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>go</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>||</operator>
           <operator>(</operator> <call><name>go</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>, <argument><expr><name>m2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>go</name><argument_list>(<argument><expr><name>m1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>( )</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator> <ternary><condition><expr><call><name>go</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>x</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>y</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>
}</block></function>
</unit>
