<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12186648.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>int(s.size())</value></define>
<define>#<directive>define</directive> <macro><name>ull</name></macro> <value>unsigned long long</value></define>
<define>#<directive>define</directive> <macro><name>sc</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;s)</value></define>
<define>#<directive>define</directive> <macro><name>pr</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>printf("%d ",s)</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>s.begin(),s.end()</value></define>
<define>#<directive>define</directive> <macro><name>only_cin</name></macro> <value>ios_base::sync_with_stdio(0);cin.tie(0)</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>nxt</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>in</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>Q</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>Q</name> <operator>+=</operator> <literal type="string">".in"</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><call><name><name>Q</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>out</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>Q</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>Q</name> <operator>+=</operator> <literal type="string">".out"</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><call><name><name>Q</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>open_file</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>Q</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>in</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>q</name> <operator>==</operator> <name>w</name></expr>)</condition><then> <block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><call><name>sz</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><call><name>sz</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>check</name> <argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>check</name> <argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<elseif>else <if>if <condition>(<expr><call><name>check</name> <argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>check</name> <argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>w</name><operator>.</operator><name>substr</name></name> <argument_list>(<argument><expr><name>mid</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<ifdef>#<directive>ifdef</directive> <name>accepted</name></ifdef>
		<expr_stmt><expr><call><name>in</name> <argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<endif>#<directive>endif</directive></endif>
	<expr_stmt><expr><name>only_cin</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

	<if>if <condition>(<expr><call><name>check</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
