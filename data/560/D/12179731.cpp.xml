<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12179731.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">993</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>X</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ha</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>hb</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>hash_substra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name><name>ha</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>ha</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>(</operator><name>x</name><operator>*</operator><name><name>X</name><index>[<expr><name>n</name><operator>-</operator><name>l</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>hash_substrb</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name><name>hb</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>hb</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>(</operator><name>x</name><operator>*</operator><name><name>X</name><index>[<expr><name>n</name><operator>-</operator><name>l</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>fun</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ra</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rb</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><call><name>hash_substra</name><argument_list>(<argument><expr><name>la</name></expr></argument>, <argument><expr><name>ra</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>hash_substrb</name><argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ma</name><init>=<expr><operator>(</operator><name>la</name><operator>+</operator><name>ra</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mb</name><init>=<expr><operator>(</operator><name>lb</name><operator>+</operator><name>rb</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>(</operator><name>ra</name><operator>-</operator><name>la</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><call><name>fun</name><argument_list>(<argument><expr><name>la</name></expr></argument>,<argument><expr><name>ma</name></expr></argument>,<argument><expr><name>lb</name></expr></argument>,<argument><expr><name>mb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fun</name><argument_list>(<argument><expr><name>ma</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ra</name></expr></argument>,<argument><expr><name>mb</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>fun</name><argument_list>(<argument><expr><name>ma</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ra</name></expr></argument>,<argument><expr><name>lb</name></expr></argument>,<argument><expr><name>mb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>fun</name><argument_list>(<argument><expr><name>la</name></expr></argument>,<argument><expr><name>ma</name></expr></argument>,<argument><expr><name>mb</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>rb</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//ifstream cin("in.txt");</comment>
    <comment type="line">//ofstream cout("out.txt");</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>X</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>X</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">31</literal><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>ha</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name><name>hb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>ha</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>ha</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>X</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr><operator>,</operator><expr><name><name>hb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>hb</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>X</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><call><name>fun</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
