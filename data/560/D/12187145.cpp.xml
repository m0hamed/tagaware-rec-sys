<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12187145.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>FILE</name></macro>    <value>0</value></define>
<define>#<directive>define</directive> <macro><name>INPUT</name></macro>   <value>"input"</value></define>
<define>#<directive>define</directive> <macro><name>OUTPUT</name></macro>  <value>"output"</value></define>

<define>#<directive>define</directive> <macro><name>MP</name></macro>      <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>MT</name></macro>      <value>make_tuple</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro>      <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>FI</name></macro>      <value>first</value></define>
<define>#<directive>define</directive> <macro><name>SE</name></macro>      <value>second</value></define>

<define>#<directive>define</directive> <macro><name>MAX</name></macro>     <value>int( 2010 )</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro>     <value>INT_MAX</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro>     <value>int(1e-7)</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro>     <value>int(1e7+7)</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro>      <value>acos(-1)</value></define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>s</name> <operator>&amp;&amp;</operator> <name>can</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>can</name> <operator>&amp;=</operator> <operator>(</operator> <name><name>a</name><index>[ <expr><name>fa</name><operator>+</operator><name>d</name></expr> ]</index></name> <operator>==</operator> <name><name>b</name><index>[ <expr><name>fb</name><operator>+</operator><name>d</name></expr> ]</index></name> <operator>)</operator></expr>;</expr_stmt></block></for>
    <if>if<condition>( <expr><name>can</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if<condition>( <expr><name>s</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator> <call><name>check</name><argument_list>( <argument><expr><name>fa</name></expr></argument>, <argument><expr><name>fa</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fb</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>( <argument><expr><name>fa</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><name>fb</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>
           <operator>(</operator> <call><name>check</name><argument_list>( <argument><expr><name>fa</name></expr></argument>, <argument><expr><name>fa</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fb</name></expr></argument>, <argument><expr><name>fb</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>( <argument><expr><name>fa</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>ta</name></expr></argument>, <argument><expr><name>fb</name><operator>+</operator><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>tb</name></expr></argument>, <argument><expr><name>s</name><operator>/</operator><literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( )</parameter_list> <block>{

    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if>if<condition>( <expr><name>FILE</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><name>INPUT</name></expr></argument> , <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>  )</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>( <expr><name>FILE</name> <operator>&amp;</operator> <literal type="number">2</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>freopen</name><argument_list>( <argument><expr><name>OUTPUT</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>int</name><argument_list>( <argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>( )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator> <ternary><condition><expr><call><name>check</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"YES\n"</literal></expr> </then><else>: <expr><literal type="string">"NO\n"</literal></expr></else></ternary> <operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
