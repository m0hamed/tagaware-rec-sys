<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12188156.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>h1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>h2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>h1</name> <operator>=</operator> <operator>(</operator><name>h1</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>l2</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>h2</name> <operator>=</operator> <operator>(</operator><name>h2</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name>h1</name> <operator>==</operator> <name>h2</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><operator>(</operator><name>r1</name> <operator>-</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></elseif>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>sz1</name> <init>= <expr><name>r1</name> <operator>-</operator> <name>l1</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sz2</name> <init>= <expr><name>r2</name> <operator>-</operator> <name>l2</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><call><name>solve</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l1</name> <operator>+</operator> <name>sz1</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l2</name> <operator>+</operator> <name>sz2</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l1</name> <operator>+</operator> <name>sz1</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l2</name> <operator>+</operator> <name>sz2</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l1</name> <operator>+</operator> <name>sz1</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>l2</name> <operator>+</operator> <name>sz2</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l1</name> <operator>+</operator> <name>sz1</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>l2</name> <operator>+</operator> <name>sz2</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("in.txt", "r", stdin);</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>s</name> <operator>==</operator> <name>t</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
    <block>{
        <if>if<condition>(<expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
