<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12192023.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>char</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>N</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>*</operator><name>s</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>N</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>change</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>l</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><name>l</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>temp</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>l</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>temp</name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>l</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><name>l</name></expr>]</index></name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>
    <return>return <expr><operator>*</operator><name>s</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><name>s1</name><operator>=</operator><call><name>change</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>s2</name><operator>=</operator><call><name>change</name><argument_list>(<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>s1</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function></unit>
