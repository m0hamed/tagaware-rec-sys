<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12414801.cpp"><comment type="line">//Language: GNU C++11</comment>


<if>#<directive>if</directive> <expr><literal type="number">1</literal></expr></if>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;locale&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>PROBLEM</name></macro> <value>"problem"</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LD</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define> 
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF64</name> <init>= <expr><literal type="number">1LL</literal> <operator>*</operator> <name>INF</name> <operator>*</operator> <name>INF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name> <init>= <expr><name>INF</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">200001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>eq</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>res</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x1</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>y1</name> <operator>&amp;&amp;</operator> <name>res</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>&amp;=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name> <operator>-</operator> <name>x1</name> <operator>+</operator> <name>x2</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></for>

	<if>if <condition>(<expr><name>res</name></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></then>
	<else>else
	<block>{
		<if>if <condition>(<expr><operator>(</operator><name>y1</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<return>return <expr><literal type="boolean">false</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>ha</name> <init>= <expr><name>x1</name> <operator>+</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <name>x1</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>hb</name> <init>= <expr><name>x2</name> <operator>+</operator> <operator>(</operator><name>y2</name> <operator>-</operator> <name>x2</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><call><name>eq</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>ha</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>hb</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>eq</name><argument_list>(<argument><expr><name>ha</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>hb</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><call><name>eq</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>ha</name></expr></argument>, <argument><expr><name>hb</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>eq</name><argument_list>(<argument><expr><name>ha</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s\n%s\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><call><name>eq</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<ifdef>#<directive>ifdef</directive> <name>_DEBUG</name></ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//freopen("output.txt", "w", stdout);</comment>
<else>#<directive>else</directive></else>
	<comment type="line">//freopen(PROBLEM".in", "r", stdin); freopen(PROBLEM".out", "w", stdout);</comment>
<endif>#<directive>endif</directive></endif>

	<comment type="line">//cout.precision(10);</comment>
	<comment type="line">//cout.setf(ios_base::fixed);</comment>

	<comment type="line">//ios_base::sync_with_stdio(false);</comment>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<endif>#<directive>endif</directive></endif></unit>
