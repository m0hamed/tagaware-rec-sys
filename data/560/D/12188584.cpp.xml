<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12188584.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>equal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    
    <decl_stmt><decl><type><name>bool</name></type> <name>suc</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name> <operator>&amp;&amp;</operator> <name>suc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>suc</name> <operator>&amp;=</operator> <name><name>s1</name><index>[<expr><name>start1</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>start2</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    
    <return>return <expr><name>suc</name></expr>;</return>
    
}</block></function>

<function><type><name>bool</name></type> <name>equiv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    
    <if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>s1</name><index>[<expr><name>start1</name></expr>]</index></name> <operator>==</operator> <name><name>s2</name><index>[<expr><name>start2</name></expr>]</index></name></expr>;</return></block></then></if>
    
    <return>return <expr><call><name>equal</name><argument_list>(<argument><expr><name>start1</name></expr></argument>, <argument><expr><name>start2</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator>
                <operator>(</operator><name>length</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator>
                        <operator>(</operator><call><name>equiv</name><argument_list>(<argument><expr><name>start1</name></expr></argument>, <argument><expr><name>start2</name></expr></argument>, <argument><expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equiv</name><argument_list>(<argument><expr><name>start1</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>start2</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                        <operator>(</operator><call><name>equiv</name><argument_list>(<argument><expr><name>start1</name></expr></argument>, <argument><expr><name>start2</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>equiv</name><argument_list>(<argument><expr><name>start1</name> <operator>+</operator> <name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>start2</name></expr></argument>, <argument><expr><name>length</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator>
                <operator>)</operator>
            <operator>)</operator></expr>;</return>
    
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name> <operator>&gt;&gt;</operator> <name>s2</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>equiv</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    
    <return>return  <expr><literal type="number">0</literal></expr>;</return>
    
}</block></function></unit>
