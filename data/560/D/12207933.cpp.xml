<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12207933.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>__int64</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>0x3fffffff</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name><name>s1</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s2</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>(</operator><name>r1</name><operator>-</operator><name>l1</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l1</name></expr></init></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><name>l2</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>r1</name></expr>)</condition><block>{
            <if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s2</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        }</block></while>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
        <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
    }</block></then>
    <else>else<block>{
        <return>return <expr><operator>(</operator><call><name>dfs</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><operator>(</operator><name>r1</name><operator>+</operator><name>l1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><operator>(</operator><name>r2</name><operator>+</operator><name>l2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><operator>(</operator><name>r1</name><operator>+</operator><name>l1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><operator>(</operator><name>r2</name><operator>+</operator><name>l2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>)</operator><operator>||</operator><operator>(</operator><call><name>dfs</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><operator>(</operator><name>r1</name><operator>+</operator><name>l1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><operator>(</operator><name>r2</name><operator>+</operator><name>l2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>dfs</name><argument_list>(<argument><expr><operator>(</operator><name>r1</name><operator>+</operator><name>l1</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>,<argument><expr><operator>(</operator><name>r2</name><operator>+</operator><name>l2</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("d:\\Test.txt","r",stdin);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
