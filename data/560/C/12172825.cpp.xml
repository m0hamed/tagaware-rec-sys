<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12172825.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/* ***********************************************
Author        :zyc
Created Time  :2015/7/22 22:12:59
File Name     :c.cpp
************************************************ */</comment>

<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("in.txt","r",stdin);</comment>
    <comment type="line">//freopen("out.txt","w",stdout);</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>*</operator><name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>x2</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>x3</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sum</name><operator>+=</operator><name>x1</name><operator>*</operator><name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sum</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
