<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12176788.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>double</name></type> <name><name>x</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>sq3</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><name>x</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><name>area</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator><operator>(</operator><name>double</name><operator>)</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>sq3</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>x</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>S</name> <operator>=</operator> <operator>(</operator><name>A</name><operator>+</operator><name>B</name><operator>+</operator><name>C</name><operator>)</operator><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>area</name> <operator>+=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>S</name> <operator>*</operator> <operator>(</operator><name>S</name> <operator>-</operator> <name>A</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>S</name> <operator>-</operator> <name>B</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>S</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>round</name><argument_list>(<argument><expr><operator>(</operator><name>area</name> <operator>/</operator> <name>sq3</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
