<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12602697.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<while>while <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition>
		<block>{
			<if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else
			<block>{
				<if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>--</operator></expr>;</expr_stmt></block></then></if>
			}</block></else></if>

			<if>if <condition>(<expr><name>level</name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else
			<block>{
				<if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>--</operator></expr>;</expr_stmt></block></then></if>
			}</block></else></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>level</name> <operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
