<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12212441.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/*
ID: lisa.va1
PROG: test
LANG: C++11
*/</comment>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = (a); i &lt; int(b); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>trav</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>for(auto it = (v).begin(); it != (v).end(); ++it)</value></define>
 
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
 

<function><type><name>double</name></type> <name>degsin</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>/</operator><literal type="number">180</literal><operator>*</operator><name>M_PI</name></expr>;</expr_stmt>
	<return>return <expr><call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>double</name></type> <name>degcos</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>/</operator><literal type="number">180</literal><operator>*</operator><name>M_PI</name></expr>;</expr_stmt>
	<return>return <expr><call><name>cos</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>double</name></type> <name>getArea</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>double</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>area</name> <operator>+=</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>area</name> <operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<return>return <expr><name>area</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
     <decl_stmt><decl><type><name>vi</name></type> <name>side</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
     <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>side</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
     }</block>
     <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
     <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>y</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>double</name></type> <name>curx</name></decl>, <decl><type ref="prev"/><name>cury</name></decl>, <decl><type ref="prev"/><name>angle</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>curx</name> <operator>=</operator> <name>cury</name> <operator>=</operator> <name>angle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
     	<expr_stmt><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>curx</name></expr>;</expr_stmt>
     	<expr_stmt><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cury</name></expr>;</expr_stmt>
     	<expr_stmt><expr><name>curx</name> <operator>=</operator> <name>curx</name> <operator>+</operator> <name><name>side</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><call><name>degcos</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     	<expr_stmt><expr><name>cury</name> <operator>=</operator> <name>cury</name> <operator>+</operator> <name><name>side</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><call><name>degsin</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     	<expr_stmt><expr><name>angle</name> <operator>+=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
     }</block>

     <decl_stmt><decl><type><name>double</name></type> <name>area</name> <init>= <expr><call><name>getArea</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

     <decl_stmt><decl><type><name>double</name></type> <name>triangle</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><name>area</name> <operator>=</operator> <operator>-</operator><name>area</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>int</name><argument_list>(<argument><expr><call><name>round</name><argument_list>(<argument><expr><name>area</name><operator>/</operator><name>triangle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
