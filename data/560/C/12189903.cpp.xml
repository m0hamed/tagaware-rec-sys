<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12189903.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//freopen( "input.txt", "r", stdin );</comment>
<comment type="line">//freopen( "output.txt", "w", stdout );</comment>
<comment type="line">//fflush( stdin );</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1000000000</value></define> <comment type="line">//1 Billon</comment>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>WHITE</name></macro> <value>-1</value></define>
<define>#<directive>define</directive> <macro><name>BLACK</name></macro> <value>1</value></define>
<define>#<directive>define</directive> <macro><name>GRAY</name></macro> <value>2</value></define>

<comment type="line">//int num_length( int n ) { return int( log10( n ) ) + 1; }</comment>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>lcm</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list><block>{ <return>return <expr><name>a</name> <operator>*</operator> <operator>(</operator> <name>b</name> <operator>/</operator> <call><name>gcd</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return> }</block></function>
<comment type="line">//int toi( string a ){ int ans;  sscanf(a.c_str(),"%d",&amp;ans);  return ans;  }</comment>
<comment type="line">//string tos( int a ){ ostringstream st; st&lt;&lt;a; string ans = st.str(); return ans; }</comment>

<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=(a), _b=(b);i&lt;=_b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>DOW</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>for(int i=(b), _a=(a);i&gt;=_a;i--)</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FOR(i,0,(n)-1)</value></define>
<define>#<directive>define</directive> <macro><name>DEP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>DOW(i,(n)-1,0)</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>memset(A, x, sizeof A)</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro> <value>A.begin(),A.end()</value></define>
<define>#<directive>define</directive> <macro><name>sci</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>scs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>gets(x);</value></define>

<decl_stmt><decl><type><name>int</name></type> <name><name>cx</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cy</name><index>[]</index></name> <init>= <expr><block>{  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,     <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>v</name><index>[ <expr><literal type="number">7</literal></expr> ]</index></name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>( <argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><operator>(</operator> <name><name>v</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>v</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <name><name>v</name><index>[ <expr><literal type="number">6</literal></expr> ]</index></name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name><name>v</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>v</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>+</operator> <name><name>v</name><index>[ <expr><literal type="number">6</literal></expr> ]</index></name> <operator>)</operator> <operator>-</operator> <name><name>v</name><index>[ <expr><literal type="number">6</literal></expr> ]</index></name> <operator>*</operator> <name><name>v</name><index>[ <expr><literal type="number">6</literal></expr> ]</index></name> <operator>-</operator> <name><name>v</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>*</operator> <name><name>v</name><index>[ <expr><literal type="number">2</literal></expr> ]</index></name> <operator>-</operator> <name><name>v</name><index>[ <expr><literal type="number">4</literal></expr> ]</index></name> <operator>*</operator> <name><name>v</name><index>[ <expr><literal type="number">4</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
