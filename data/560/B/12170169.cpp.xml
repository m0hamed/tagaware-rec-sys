<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12170169.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<define>#<directive>define</directive> <macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 1; i &lt;= n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>ForK</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>k</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = k; i &lt;= n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>ForD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = n; i &gt;= 0; i--)</value></define>
<define>#<directive>define</directive> <macro><name>Rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; i &lt; n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>RepD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = n; i &gt;= 0; i--)</value></define>
<define>#<directive>define</directive> <macro><name>MemI</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a, 0, sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>MemC</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a, '\0', sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>acos(-1)</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro> <value>1e-8</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>0x3f3f3f3f</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>a1</name> <operator>&lt;</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>a2</name> <operator>&lt;</operator> <name>b2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>a3</name> <operator>&lt;</operator> <name>b3</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator>
            <operator>||</operator> <name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator>
            <operator>||</operator> <name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator>
            <operator>||</operator> <name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a2</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator>
            <operator>||</operator> <name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator>
            <operator>||</operator> <name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>a2</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator>
            <operator>||</operator> <name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
