<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12170412.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>PRINT_VAR</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>format</name></type></parameter>)</parameter_list></macro> <value>printf (#var "=" format "\n", (var))</value></define>
<define>#<directive>define</directive> <macro><name>LOCAL</name></macro> <value>0</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_sum</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <if>#<directive>if</directive> <expr><name>LOCAL</name> <operator>==</operator> <literal type="number">1</literal></expr></if>
      <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"wt"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <endif>#<directive>endif</directive></endif>
    
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>a1</name> <operator>&gt;=</operator> <name>a2</name> <operator>&amp;&amp;</operator> <name>b1</name> <operator>&gt;=</operator> <name>b2</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>da</name> <init>= <expr><name>a1</name> <operator>-</operator> <name>a2</name></expr></init></decl>,
            <decl><type ref="prev"/><name>db</name> <init>= <expr><name>b1</name> <operator>-</operator> <name>b2</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>a3</name> <operator>&lt;=</operator> <name>da</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>||</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>da</name> <operator>||</operator>
            <name>a3</name> <operator>&lt;=</operator> <name>db</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>||</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>db</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a1</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>a1</name> <operator>&gt;=</operator> <name>a2</name> <operator>&amp;&amp;</operator> <name>b1</name> <operator>&gt;=</operator> <name>b2</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>da</name> <init>= <expr><name>a1</name> <operator>-</operator> <name>a2</name></expr></init></decl>,
            <decl><type ref="prev"/><name>db</name> <init>= <expr><name>b1</name> <operator>-</operator> <name>b2</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>a3</name> <operator>&lt;=</operator> <name>da</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>||</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>da</name> <operator>||</operator>
            <name>a3</name> <operator>&lt;=</operator> <name>db</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>||</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>b3</name> <operator>&lt;=</operator> <name>db</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
