<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12191351.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>   <block>{
    <if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then>   <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <else>else    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>  <block>{
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d%d%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>ok</name> <argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>a3</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>b3</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
        <call><name>ok</name> <argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>b3</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>a3</name></expr></argument>, <argument><expr><call><name>max</name> <argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>   <block>{
        <expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else    <block type="pseudo"><expr_stmt><expr><call><name>puts</name> <argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
