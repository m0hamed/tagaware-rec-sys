<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12171333.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen ("combo.in", "r", stdin);freopen ("combo.out", "w", stdout);</comment>
    <comment type="line">//freopen ("input.txt", "r", stdin);freopen ("output.txt", "w", stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>l</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>k</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>k</name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>y</name> <operator>+</operator> <name>l</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>y</name> <operator>+</operator> <name>l</name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>y</name> <operator>+</operator> <name>k</name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>y</name> <operator>+</operator> <name>k</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>l</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>l</name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
