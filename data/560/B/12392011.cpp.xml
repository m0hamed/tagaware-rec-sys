<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12392011.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<namespace>namespace
<block>{
    <struct>struct <name>Pos</name>
    <block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
    </public>}</block>;</struct>

    <function><type><name>bool</name></type> <name>fit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pos</name> <modifier>&amp;</modifier></type><name>board</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pos</name> <modifier>&amp;</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pos</name> <modifier>&amp;</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name><name>ar1</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>p1</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>p1</name><operator>.</operator><name>y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>ar2</name><index>[]</index></name> <init>= <expr><block>{<expr><name><name>p2</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>p2</name><operator>.</operator><name>y</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>s1</name> <init>= <expr><name><name>ar1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>ar2</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>s2</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>ar1</name><index>[<expr><operator>!</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ar2</name><index>[<expr><operator>!</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>board</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>board</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <call><name>max</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>board</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>board</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
            }</block></for>
        }</block></for>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
}</block></namespace>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Pos</name></type> <name>board</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pos</name></type> <name>p1</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pos</name></type> <name>p2</name><argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>board</name><operator>.</operator><name>x</name></name><operator>&gt;&gt;</operator><name><name>board</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p1</name><operator>.</operator><name>x</name></name><operator>&gt;&gt;</operator><name><name>p1</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>p2</name><operator>.</operator><name>x</name></name><operator>&gt;&gt;</operator><name><name>p2</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><call><name>fit</name><argument_list>(<argument><expr><name>board</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="string">"YES"</literal></expr></then><else>:<expr><literal type="string">"NO"</literal></expr></else></ternary><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
