<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12197792.cpp"><comment type="line">//Language: MS C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a1</name> <operator>&gt;&gt;</operator> <name>b1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a2</name> <operator>&gt;&gt;</operator> <name>b2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a3</name> <operator>&gt;&gt;</operator> <name>b3</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a3</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a3</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>b3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>b3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
