<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12171054.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>,<decl><type ref="prev"/><name>b1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>a1</name><operator>&gt;&gt;</operator><name>b1</name><operator>&gt;&gt;</operator><name>a2</name><operator>&gt;&gt;</operator><name>b2</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l1</name><init>=<expr><name>a1</name><operator>+</operator><name>a2</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>l1</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>b1</name><operator>&lt;=</operator><name>b</name> <operator>&amp;&amp;</operator> <name>b2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>l2</name><init>=<expr><name>a1</name><operator>+</operator><name>b2</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>l2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>b1</name><operator>&lt;=</operator><name>b</name> <operator>&amp;&amp;</operator> <name>a2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
         <expr_stmt><expr><name>l1</name><operator>=</operator><name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l1</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>a1</name><operator>&lt;=</operator><name>b</name> <operator>&amp;&amp;</operator> <name>a2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
         <expr_stmt><expr><name>l2</name><operator>=</operator><name>b1</name><operator>+</operator><name>a2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>a1</name><operator>&lt;=</operator><name>b</name> <operator>&amp;&amp;</operator> <name>b2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>l1</name><operator>=</operator><name>a1</name><operator>+</operator><name>a2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l1</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>b1</name><operator>&lt;=</operator><name>a</name> <operator>&amp;&amp;</operator> <name>b2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>l2</name><operator>=</operator><name>a1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>b1</name><operator>&lt;=</operator><name>a</name> <operator>&amp;&amp;</operator> <name>a2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
         <expr_stmt><expr><name>l1</name><operator>=</operator><name>b1</name><operator>+</operator><name>b2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l1</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>a1</name><operator>&lt;=</operator><name>a</name> <operator>&amp;&amp;</operator> <name>a2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
         <expr_stmt><expr><name>l2</name><operator>=</operator><name>b1</name><operator>+</operator><name>a2</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l2</name><operator>&lt;=</operator><name>b</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>a1</name><operator>&lt;=</operator><name>a</name> <operator>&amp;&amp;</operator> <name>b2</name><operator>&lt;=</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>


    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
