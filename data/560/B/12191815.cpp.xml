<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12191815.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block" format="doxygen">/*************************************************************************
  &gt; File Name: bb.cpp
  &gt; Author: chbug
  &gt; Created Time: 2015/7/23 ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 8:59:53
*************************************************************************/</comment>

<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><operator>(</operator><name>a1</name> <operator>&gt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>b1</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b1</name> <operator>&gt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a1</name> <operator>&gt;=</operator> <name>b</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a1</name> <operator>&gt;&gt;</operator> <name>b1</name> <operator>&gt;&gt;</operator> <name>a2</name> <operator>&gt;&gt;</operator> <name>b2</name> <operator>&gt;&gt;</operator> <name>a3</name> <operator>&gt;&gt;</operator> <name>b3</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>a3</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>a2</name><operator>+</operator><name>b3</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>a3</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>b2</name><operator>+</operator><name>b3</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
