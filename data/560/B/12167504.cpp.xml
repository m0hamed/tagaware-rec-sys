<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12167504.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"inp.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <endif>#<directive>endif</directive></endif> <comment type="line">// ONLINE_JUDGE</comment>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a1</name> <operator>&gt;&gt;</operator> <name>b1</name> <operator>&gt;&gt;</operator> <name>a2</name> <operator>&gt;&gt;</operator> <name>b2</name> <operator>&gt;&gt;</operator> <name>a3</name> <operator>&gt;&gt;</operator> <name>b3</name></expr>;</expr_stmt>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a3</name> <operator>+</operator> <name>b2</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>a3</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <if>if<condition>(<expr><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
