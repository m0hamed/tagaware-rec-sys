<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12171192.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//</comment>
<comment type="line">//  main.cpp</comment>
<comment type="line">//  yes</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Irina Korneeva on 22/07/15.</comment>
<comment type="line">//  Copyright (c) 2015 Irina Korneeva. All rights reserved.</comment>
<comment type="line">//</comment>

<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name><operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator><name>e</name> <operator>&gt;&gt;</operator><name>f</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>d</name> <operator>&gt;</operator> <name>c</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>f</name> <operator>&gt;</operator> <name>e</name></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>f</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    }</block></then></if>
   
    <if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>c</name> <operator>+</operator> <name>e</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <name>c</name> <operator>+</operator> <name>f</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&gt;=</operator> <name>c</name> <operator>+</operator> <name>e</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&gt;=</operator> <name>c</name> <operator>+</operator> <name>e</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator>
       <operator>||</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument> , <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <name>d</name><operator>+</operator> <name>f</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>a</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b</name> <operator>&gt;=</operator><operator>(</operator><name>d</name><operator>+</operator> <name>e</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name>b</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument> , <argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>a</name> <operator>&gt;=</operator> <operator>(</operator><name>d</name><operator>+</operator> <name>f</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument> , <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;=</operator> <operator>(</operator><name>d</name><operator>+</operator><name>f</name><operator>)</operator><operator>)</operator></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt></block></else></if>
    
}</block></function></unit>
