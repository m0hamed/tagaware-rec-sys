<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12186493.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>, <decl><type ref="prev"/><name>a3</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>temp1</name></decl>, <decl><type ref="prev"/><name>temp2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>temp1</name><operator>&gt;&gt;</operator><name>temp2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>temp1</name><operator>&gt;&gt;</operator><name>temp2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>temp1</name><operator>&gt;&gt;</operator><name>temp2</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>a3</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>temp1</name></expr></argument>, <argument><expr><name>temp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>b3</name> <operator>&gt;</operator> <name>b1</name> <operator>||</operator> <name>b2</name> <operator>&gt;</operator> <name>b1</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><name>a3</name> <operator>&gt;</operator> <name>a1</name> <operator>||</operator> <name>a2</name> <operator>&gt;</operator> <name>a1</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><operator>(</operator><name>a1</name><operator>*</operator><name>b1</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>a2</name><operator>*</operator><name>b2</name> <operator>+</operator> <name>a3</name><operator>*</operator><name>b3</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><operator>(</operator><name>b2</name> <operator>+</operator> <name>b3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    
    <if>if<condition>(<expr><operator>(</operator><name>b2</name> <operator>+</operator> <name>a3</name> <operator>&lt;=</operator> <name>b1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>max</name><argument_list>(<argument><expr><name>a2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><operator>(</operator><name>b3</name> <operator>+</operator> <name>a2</name><operator>)</operator> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>a3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if<condition>(<expr><operator>(</operator><name>a2</name> <operator>+</operator> <name>a3</name><operator>)</operator> <operator>&lt;=</operator> <name>b1</name> <operator>&amp;&amp;</operator> <call><name>max</name><argument_list>(<argument><expr><name>b2</name></expr></argument>, <argument><expr><name>b3</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>a1</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    

}</block></function>
</unit>
