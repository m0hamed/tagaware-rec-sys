<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12587277.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen("data.in","r",stdin);</comment>
	<comment type="line">//freopen("data.out","w",stdout);</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>a</name><operator>*</operator><name>b</name><operator>+</operator><name>c</name><operator>*</operator><name>d</name><operator>&gt;</operator><name>x</name><operator>*</operator><name>y</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then><else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>a</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>b</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>c</name><operator>+</operator><name>a</name><operator>&gt;</operator><name>x</name><operator>&amp;&amp;</operator><name>d</name><operator>+</operator><name>b</name><operator>&gt;</operator><name>y</name><operator>)</operator><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>d</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>d</name><operator>+</operator><name>a</name><operator>&gt;</operator><name>x</name><operator>&amp;&amp;</operator><name>c</name><operator>+</operator><name>b</name><operator>&gt;</operator><name>y</name><operator>)</operator><operator>&amp;&amp;</operator><name>d</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>a</name><operator>&lt;=</operator><name>y</name><operator>&amp;&amp;</operator><name>b</name><operator>&lt;=</operator><name>x</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>c</name><operator>+</operator><name>b</name><operator>&gt;</operator><name>x</name><operator>&amp;&amp;</operator><name>a</name><operator>+</operator><name>d</name><operator>&gt;</operator><name>y</name><operator>)</operator><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>d</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>d</name><operator>+</operator><name>b</name><operator>&gt;</operator><name>x</name><operator>&amp;&amp;</operator><name>a</name><operator>+</operator><name>c</name><operator>&gt;</operator><name>y</name><operator>)</operator><operator>&amp;&amp;</operator><name>d</name><operator>&lt;=</operator><name>x</name><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><name>y</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
		<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
