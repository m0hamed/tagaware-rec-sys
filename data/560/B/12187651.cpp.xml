<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12187651.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">// 2015-07-22</comment>
<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;array&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;forward_list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_set&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<ifndef>#<directive>ifndef</directive> <name>LOCAL</name></ifndef>
<comment type="line">//#define LOCAL</comment>
<endif>#<directive>endif</directive></endif>

<define>#<directive>define</directive> <macro><name>SET_BIT</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></macro> <value>(mask |= (1 &lt;&lt; index))</value></define>
<define>#<directive>define</directive> <macro><name>TEST_BIT</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></macro> <value>(mask &amp; (1 &lt;&lt; index))</value></define>
<define>#<directive>define</directive> <macro><name>CLEAR_BIT</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></macro> <value>(mask &amp;= ~(1 &lt;&lt; index))</value></define>
<define>#<directive>define</directive> <macro><name>TOGGLE_BIT</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>index</name></type></parameter>)</parameter_list></macro> <value>(mask ^= (1 &lt;&lt; index))</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1.0e-11</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NO_VALUE</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<using>using <name>ii</name> <init>= <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type></init> ;</using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<struct>struct <name>sc</name> <block>{<public type="default"> <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <specifier>static</specifier> <type><name>T</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt> <return>return <expr><name>n</name></expr>;</return> }</block></function> </public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>r</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    
<function><type><name>bool</name></type> <name>fits</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("output.txt", "w+", stdout);</comment>
<endif>#<directive>endif</directive></endif>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>sc</name><operator>::</operator><name><name>next</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>sc</name><operator>::</operator><name><name>next</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    
    <decl_stmt><decl><type><name>bool</name></type> <name>answer</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>answer</name> <operator>|=</operator> <call><name>fits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>answer</name> <operator>|=</operator> <call><name>fits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>answer</name> <operator>|=</operator> <call><name>fits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>answer</name> <operator>|=</operator> <call><name>fits</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>answer</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
