<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12381928.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define> 
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%d", &amp;x);</value></define>
<define>#<directive>define</directive> <macro><name>sii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d", &amp;x, &amp;y);</value></define>
<define>#<directive>define</directive> <macro><name>sll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%lld", &amp;x);</value></define>
<define>#<directive>define</directive> <macro><name>pi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>printf("%d\n", x);</value></define>
<define>#<directive>define</directive> <macro><name>pll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>printf("%lld\n", x);</value></define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<macro><name>si</name><argument_list>(<argument>n</argument>)</argument_list></macro>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num</name></decl>, <decl><type ref="prev"/><name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">1000010</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>sign</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxc</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxc</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>num</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>maxc</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>pi</name><argument_list>(<argument><expr><name>maxc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
