<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12433901.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctype.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<define>#<directive>define</directive> <macro><name>read</name><parameter_list>()</parameter_list></macro> <value>freopen("input.txt","r",stdin)</value></define>
<define>#<directive>define</directive> <macro><name>write</name><parameter_list>()</parameter_list></macro> <value>freopen("output.txt","w",stdout)</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>memset(a, b, sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>mx</name></macro> <value>100005</value></define>
<define>#<directive>define</directive> <macro><name>lli</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>psi</name></macro> <value>pair&lt;string,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>uu</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>vv</name></macro> <value>second</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>pch</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>id</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>check</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ch</name><operator>&gt;&gt;</operator><name>id</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'+'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>check</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>i</name> <operator>and</operator> <name>pch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>a</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tmp</name><operator>=</operator><name>p</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <if>if<condition>(<expr><name><name>check</name><index>[<expr><name>id</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>a</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
                }</block></else></if>
                <comment type="line">//check[id]=0;</comment>
            }</block></else></if>
            <expr_stmt><expr><name>pch</name><operator>=</operator><name>ch</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>a</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>a</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>&lt;</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>=</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
