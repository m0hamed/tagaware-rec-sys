<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12359675.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>onlylove</name></macro> <value>"My Sky"</value></define>
<define>#<directive>define</directive> <macro><name>mysky</name></macro> <value>"TT"</value></define>

<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></macro> <value>int(A.size())</value></define>
<define>#<directive>define</directive> <macro><name>mpair</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>LL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x &lt;&lt; 1)</value></define>
<define>#<directive>define</directive> <macro><name>RR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x &lt;&lt; 1) | 1 )</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter> , <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = 0 , _a = n ; i &lt; _a ; i++)</value></define>
<define>#<directive>define</directive> <macro><name>For</name><parameter_list>( <parameter><type><name>i</name></type></parameter> , <parameter><type><name>a</name></type></parameter> , <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int _a = a , _b = b , i = _a ; i &lt;= b ; i++)</value></define>


<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pt</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>OnlineJudge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">109</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>se</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>was</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>cur</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name> <operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>OnlineJudge</name></expr>)</condition><then><block>{
    }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.inp"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument> , <argument><literal type="number">1</literal></argument> , <argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>type</name> <operator>&gt;&gt;</operator> <name>id</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><call><name><name>se</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>se</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                    <macro><name>For</name><argument_list>(<argument>j</argument> , <argument><literal type="number">1</literal></argument> , <argument>i</argument> )</argument_list></macro> <expr_stmt><expr><name><name>was</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>se</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>se</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cur</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block>

    <macro><name>For</name><argument_list>(<argument>i</argument> , <argument><literal type="number">1</literal></argument>,  <argument>n</argument>)</argument_list></macro>
       <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument> , <argument><expr><name><name>cur</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>was</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
