<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12364805.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/* Copyright 2015 Fyodor Dmitrievich Listvin */</comment>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>pname</name></macro> <value>"b_lib"</value></define>
<ifdef>#<directive>ifdef</directive> <name>DBG</name></ifdef>
<define>#<directive>define</directive> <macro><name>WR</name><parameter_list>(<parameter><type><name>smth</name></type></parameter>)</parameter_list></macro> <value>smth</value></define>
<else>#<directive>else</directive></else>
<define>#<directive>define</directive> <macro><name>WR</name><parameter_list>(<parameter><type><name>smth</name></type></parameter>)</parameter_list></macro></define>
<endif>#<directive>endif</directive></endif>
<define>#<directive>define</directive> <macro><name>DB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>#a " == " &lt;&lt; (a) &lt;&lt; ";	"</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; i &lt; (int)(n); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; i &lt; (int)(n); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fst</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>snd</name></macro> <value>second</value></define>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>

<comment type="line">//~ int sum(int x){</comment>
	<comment type="line">//~ int R = 0;</comment>
	<comment type="line">//~ for (int i = x; i &gt;= 0; i = (i &amp; (i+1)) - 1)</comment>
		<comment type="line">//~ result += t[i];</comment>
	<comment type="line">//~ return R;</comment>
<comment type="line">//~ }</comment>
<comment type="line">//~ </comment>
<comment type="line">//~ void inc(int x, int delta){</comment>
	<comment type="line">//~ for (int i = x; i &lt; N; i = (i | (i+1)))</comment>
		<comment type="line">//~ t[i] += delta;</comment>
<comment type="line">//~ }</comment>

<function><type><name>int</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>known</name><argument_list>(<argument><expr><name>NMAX</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>history</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>id</name></expr><operator>,</operator> <expr><call><name><name>history</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>N</argument>)</argument_list></macro>
		<if>if <condition>(<expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>known</name><index>[<expr><operator>-</operator><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>+=</operator> <operator>!</operator><name><name>known</name><index>[<expr><operator>-</operator><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
				<comment type="line">//~ history[i] = 0;</comment>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>known</name><index>[<expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if>
			
	<decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>N</argument>)</argument_list></macro><block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <macro><name>DB</name><argument_list>(<argument>cur</argument>)</argument_list></macro> <call><name>DB</name><argument_list>(<argument><expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <if>if <condition>(<expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>M</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>M</name></expr></argument>, <argument><expr><name>cur</name> <operator>+=</operator> <ternary><condition><expr><name><name>history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> }</block>
	
	<return>return <expr><name>M</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<ifdef>#<directive>ifdef</directive> <name>DBG</name></ifdef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>pname</name><literal type="string">".in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"	DBG defined, output will appear here\n\n"</literal></expr>;</expr_stmt>
	<endif>#<directive>endif</directive></endif>

	<while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></while>

	<if>#<directive>if</directive> <expr><operator>(</operator><name>defined</name> <name>STRESS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>defined</name> <name>DBG</name><operator>)</operator></expr></if>
		<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <call><name>clock</name><argument_list>()</argument_list></call><operator>/</operator><operator>(</operator><name>CLOCKS_PER_SEC</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="string">"ms.\n"</literal></expr>;</expr_stmt>
	<endif>#<directive>endif</directive></endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>	
}</block></function>
</unit>
