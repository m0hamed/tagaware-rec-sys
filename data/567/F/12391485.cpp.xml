<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12391485.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>NSIZ</name></macro> <value>110</value></define>
<define>#<directive>define</directive> <macro><name>MSIZ</name></macro> <value>1000010</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>1010580540</value></define>
<define>#<directive>define</directive> <macro><name>mxint</name></macro> <value>2147483647</value></define>
<define>#<directive>define</directive> <macro><name>mxll</name></macro> <value>9223372036854775807LL</value></define>
<define>#<directive>define</directive> <macro><name>prime15</name></macro> <value>1000000000000037LL</value></define>
<define>#<directive>define</directive> <macro><name>prime16</name></macro> <value>10000000000000061LL</value></define>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007LL</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>vit</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>vector&lt;T&gt;::iterator</value></define>
<define>#<directive>define</directive> <macro><name>lit</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>list&lt;T&gt;::iterator</value></define>
<define>#<directive>define</directive> <macro><name>lrit</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>list&lt;T&gt;::reverse_iterator</value></define>
<define>#<directive>define</directive> <macro><name>sit</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>set&lt;T&gt;::iterator</value></define>
<define>#<directive>define</directive> <macro><name>mit</name><parameter_list>(<parameter><type><name>T1</name></type></parameter>,<parameter><type><name>T2</name></type></parameter>)</parameter_list></macro> <value>map&lt;T1,T2&gt;::iterator</value></define>
<define>#<directive>define</directive> <macro><name>MAXPQ</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>priority_queue&lt;T&gt;</value></define>
<define>#<directive>define</directive> <macro><name>MINPQ</name><parameter_list>(<parameter><type><name>T</name></type></parameter>)</parameter_list></macro> <value>priority_queue&lt;T,vector&lt;T&gt;,greater&lt;T&gt; &gt;</value></define>
<define>#<directive>define</directive> <macro><name>ab</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)&lt;0?-(x):(x))</value></define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pip</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ppp</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>o</name></decl>, <decl><type ref="prev"/><name>re</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>NSIZ</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>NSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name><name>lis</name><index>[<expr><name>NSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><name>NSIZ</name></expr>]</index><index>[<expr><name>NSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>chk</name><index>[<expr><name>NSIZ</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>d</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
        <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name><operator>!=</operator><name>e</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&gt;=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><return>return ;</return>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return ;</return>
    }</block></then></if>
<comment type="line">//    printf("---- %d %d ----\n", d, e);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><operator>(</operator><name>n</name><operator>-</operator><name>d</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ch</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line" format="doxygen">///case 11...</comment>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>==</operator><name>e</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&gt;=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>&gt;</operator><name>e</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;=</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
<comment type="line">//    printf(".%d\n", ch);</comment>
    <if>if<condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line" format="doxygen">///case ...11</comment>
    <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>==</operator><name>f</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&gt;=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>f</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>f</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>f</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
<comment type="line">//    printf(".%d\n", ch);</comment>
    <if>if<condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line" format="doxygen">///case 1...1</comment>
    <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>==</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&gt;=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>f</name> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
    <for>for<control>(<init><expr><macro><name>lit</name><argument_list>(<argument>pii</argument>)</argument_list></macro> <name>it</name><operator>=</operator><name><name>lis</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>it</name><operator>!=</operator><name><name>lis</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>k</name><argument_list type="generic">&lt;<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name>k</name></expr></argument>&gt;</argument_list></name><name>f</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name><operator>&lt;=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ch</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><break>break;</break>
    }</block></for>
<comment type="line">//    printf(".%d\n", ch);</comment>
    <if>if<condition>(<expr><operator>!</operator><name>ch</name></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>d</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
<comment type="line">//    printf("%d %d = %I64d\n", d,e, dp[d][e]);</comment>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ll</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rr</name><init>=<expr><name>mxll</name></expr></init></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>j</name><operator>==</operator><name>k</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>l</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>lis</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lis</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><operator>-</operator><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
