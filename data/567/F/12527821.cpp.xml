<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12527821.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<class>class <name>sp</name><block>{<private type="default">
  </private><public>public:
  <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>,<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sp</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>
  <constructor><name>sp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q1</name></decl></parameter>,<parameter><decl><type><name>sp</name> <modifier>*</modifier></type><name>w1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>e1</name></decl></parameter>)</parameter_list><block>{
   <expr_stmt><expr><name>q</name><operator>=</operator><name>q1</name></expr>;</expr_stmt><expr_stmt><expr><name>w</name><operator>=</operator><name>w1</name></expr>;</expr_stmt><expr_stmt><expr><name>e</name><operator>=</operator><name>e1</name></expr>;</expr_stmt>}</block></constructor>
</public>}</block>;</class>
<decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">70</literal></expr>]</index><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sp</name> <modifier>*</modifier></type><name><name>a1</name><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>l</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><operator>(</operator><name>q</name><operator>&lt;</operator><name>c</name><operator>)</operator><operator>||</operator><operator>(</operator><name>v</name><operator>&lt;</operator><name>q</name><operator>)</operator></expr>)</condition><then>
   <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <comment type="line">//freopen("input.txt","r",stdin);</comment>
  <comment type="line">//freopen("output.txt","w",stdout);</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>w</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>w</name><operator>++</operator></expr></incr>)</control>
   <block type="pseudo"><expr_stmt><expr><name><name>a1</name><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>w</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block>{
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>e</name><operator>&gt;&gt;</operator><name>g</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>e</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
   <if>if<condition>(<expr><name>e</name><operator>==</operator><name>r</name></expr>)</condition><then><block>{
    <if>if<condition>(<expr><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'='</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'='</literal><operator>)</operator></expr>)</condition><then><block>{
     <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
     <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <continue>continue;</continue>}</block></then></if>
   <if>if<condition>(<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><operator>new</operator> <call><name>sp</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a1</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><operator>new</operator> <call><name>sp</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name><name>a1</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if>
   <if>if<condition>(<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr>)</condition><then><block>{
    <expr_stmt><expr><name>v</name><operator>=</operator><name>e</name></expr>;</expr_stmt><expr_stmt><expr><name>e</name><operator>=</operator><name>r</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'&lt;'</literal></expr>;</expr_stmt>}</block></then></if>
   <if>if<condition>(<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal></expr>)</condition><then>
    <block type="pseudo"><if>if<condition>(<expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><operator>new</operator> <call><name>sp</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
     <block type="pseudo"><expr_stmt><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><operator>new</operator> <call><name>sp</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>a1</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></then></if>}</block></for>
  <expr_stmt><expr><name>q</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>w</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>w</name><operator>++</operator></expr></incr>)</control>
   <block type="pseudo"><for>for<control>(<init><expr><name>e</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>e</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
  <decl_stmt><decl><type><name>bool</name></type> <name>b1</name></decl>,<decl><type ref="prev"/><name>b2</name></decl>,<decl><type ref="prev"/><name>b3</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sp</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>w</name><operator>&lt;</operator><name>q</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block>{
   <expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
   <for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>||</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>!=</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
     <expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
     <break>break;</break>}</block></then></if></block></for>
   <for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>w</name><operator>)</operator><operator>)</operator><operator>||</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>!=</operator><name>w</name><operator>)</operator></expr>)</condition><then><block>{
     <expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
     <break>break;</break>}</block></then></if></block></for>
   <if>if<condition>(<expr><name>b1</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>w</name></expr>]</index><index>[<expr><name>w</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>}</block></for>
  <for>for<control>(<init><expr><name>w</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>w</name><operator>&lt;</operator><name>q</name></expr>;</condition><incr><expr><name>w</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control>
   <block type="pseudo"><for>for<control>(<init><expr><name>e</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>e</name><operator>+</operator><name>w</name><operator>&lt;=</operator><name>q</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name>b1</name><operator>=</operator><name>b2</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>e</name><operator>-</operator><literal type="number">1</literal><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
    <else>else
     <block type="pseudo"><for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>+</operator><name>w</name></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><call><name>l</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name></expr></argument>,<argument><expr><name>e</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>}</block></for></block></else></if>
    <if>if<condition>(<expr><name>e</name><operator>-</operator><literal type="number">2</literal><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
    <else>else
     <block type="pseudo"><for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><call><name>l</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name></expr></argument>,<argument><expr><name>e</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>}</block></for></block></else></if>
    <if>if<condition>(<expr><name>e</name><operator>+</operator><name>w</name><operator>&gt;=</operator><name>q</name></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
    <else>else
     <block type="pseudo"><for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>e</name><operator>+</operator><name>w</name></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>+</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><call><name>l</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name></expr></argument>,<argument><expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>=</operator><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>}</block></for></block></else></if>
    <if>if<condition>(<expr><name>e</name><operator>+</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name>q</name></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
    <else>else
     <block type="pseudo"><for>for<control>(<init><expr><name>c</name><operator>=</operator><name><name>a1</name><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</init><condition><expr><name>c</name></expr>;</condition><incr><expr><name>c</name><operator>=</operator><name><name>c</name><operator>-&gt;</operator><name>w</name></name></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name><operator>==</operator><name>e</name><operator>+</operator><name>w</name></expr>)</condition><then><block>{
       <if>if<condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>e</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
       <continue>continue;</continue>}</block></then></if>
      <if>if<condition>(<expr><call><name>l</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>w</name><operator>+</operator><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
       <block type="pseudo"><expr_stmt><expr><name>b3</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>}</block></for></block></else></if>
    <if>if<condition>(<expr><name>b1</name></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>a</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>b2</name></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name></expr>]</index></name><operator>+=</operator><name><name>a</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>b3</name></expr>)</condition><then>
     <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>a</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>e</name><operator>+</operator><name>w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>}</block></for></block></for>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>q</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
</unit>
