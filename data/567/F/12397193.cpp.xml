<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12397193.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>Int</name>;</typedef>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>Larger</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>LargerOrEqual</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>Equal</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Int</name></type> <name><name>F</name><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vv</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>chk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>Equal</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name><name>vv</name><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><name><name>vv</name><index>[ <expr><name><name>Equal</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>LargerOrEqual</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name><name>vv</name><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;</operator><name><name>vv</name><index>[ <expr><name><name>LargerOrEqual</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>Larger</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name><name>vv</name><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;=</operator><name><name>vv</name><index>[ <expr><name><name>Larger</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>Int</name></type> <name>Solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>val</name><operator>&gt;</operator><name>n</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>R</name><operator>-</operator><name>L</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>chk</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>chk</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr>;</expr_stmt>
        <return>return <expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>Int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><name><name>vv</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
    <if>if <condition>( <expr><call><name>chk</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>chk</name><argument_list>(<argument><expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>Solve</name><argument_list>(<argument><expr><name>L</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>,<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr><operator>,</operator><expr><name><name>vv</name><index>[<expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><name><name>vv</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
    <if>if <condition>( <expr><call><name>chk</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>chk</name><argument_list>(<argument><expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>Solve</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr><operator>,</operator><expr><name><name>vv</name><index>[<expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
    <if>if <condition>( <expr><call><name>chk</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>chk</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr> )</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>Solve</name><argument_list>(<argument><expr><name>L</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>L</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr><operator>,</operator><expr><name><name>vv</name><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr>;</expr_stmt>
    <return>return <expr><name><name>F</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>F</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>op</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>Equal</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>Equal</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>Larger</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif> <else>else <block type="pseudo"><expr_stmt><expr><name><name>Larger</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else<block>{
            <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>LargerOrEqual</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name><name>LargerOrEqual</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">999</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>Solve</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
