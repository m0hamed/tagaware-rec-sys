<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12592646.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>int(a.size())</value></define>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">75</literal></expr></init></decl>, <decl><type ref="prev"/><name>MAXK</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>require</name> <block>{<public type="default">
   <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
   <constructor><name>require</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>_s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_y</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>s</name><argument_list>(<argument><expr><name>_s</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>_y</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>require</name></expr></argument>&gt;</argument_list></name></type> <name><name>req</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><name><name>req</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>req</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"="</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>r</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>v</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>r</name><operator>)</operator> <operator>||</operator> <name>v</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>r</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif></if>
   }</block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name><name>req</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><name><name>req</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>req</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"="</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>r</name><operator>)</operator><operator>)</operator> <operator>||</operator> <name>v</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>r</name><operator>)</operator> <operator>||</operator> <name>v</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>l</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>r</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      }</block></then></if></elseif></if>
   }</block></for>
   <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//   freopen("input.txt", "r", stdin);</comment>

   <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>req</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>require</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;"</literal></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;"</literal></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&gt;="</literal></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">"&lt;="</literal></expr>;</expr_stmt></block></then></if></elseif></if>
      <expr_stmt><expr><name><name>req</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>require</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></for>

   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
         <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
   }</block></for>

   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>next</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
         <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>next</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>l</name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control> <block>{
         <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
         <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>ok</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>next</name></expr>]</index><index>[<expr><name>l</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
         <if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ok</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>next</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
         <if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>*</operator><name>n</name> <operator>&amp;&amp;</operator> <call><name>ok</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>next</name></expr>]</index><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
      }</block></for></block></for>
   }</block></for>

   <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
