<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12366100.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>MAX</name></macro>   <value>227</value></define>
<define>#<directive>define</directive> <macro><name>EQUAL</name></macro>   <value>4</value></define>
<define>#<directive>define</directive> <macro><name>LESS</name></macro>   <value>0</value></define>
<define>#<directive>define</directive> <macro><name>MORE</name></macro>   <value>1</value></define>
<define>#<directive>define</directive> <macro><name>NOMORE</name></macro>   <value>2</value></define>
<define>#<directive>define</directive> <macro><name>NOLESS</name></macro>   <value>3</value></define>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for (int i=(a),_b=(b);i&lt;=_b;i=i+1)</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i=0,_n=(n);i&lt;_n;i=i+1)</value></define>
<define>#<directive>define</directive> <macro><name>FORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>for (__typeof((v).begin()) i=(v).begin();i!=(v).end();i++)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name><name>sign</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="string">"&lt;"</literal></expr>,<expr><literal type="string">"&gt;"</literal></expr>,<expr><literal type="string">"&lt;="</literal></expr>,<expr><literal type="string">"&gt;="</literal></expr>,<expr><literal type="string">"="</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>rela</name><index>[<expr><name>MAX</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><name>MAX</name></expr>]</index><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>strID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">5</literal></argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>sign</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>s</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>i</name><operator>)</operator></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>love</argument>,<argument>m</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>strID</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>u</name><operator>==</operator><name>v</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>t</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>rela</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rela</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>rela</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rela</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>t</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
}</block></function>
<function><type><name>bool</name></type> <name>okEqual</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <macro><name>FORE</name><argument_list>(<argument>it</argument>,<argument>rela[x][i]</argument>)</argument_list></macro> <if>if <condition>(<expr><operator>*</operator><name>it</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
        <macro><name>FORE</name><argument_list>(<argument>it</argument>,<argument>rela[y][i]</argument>)</argument_list></macro> <if>if <condition>(<expr><operator>*</operator><name>it</name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
    }</block>
    <return>return <expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>okLess</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>x</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal> <operator>||</operator> <name>x</name></expr></argument>&gt;</argument_list></name><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
    <macro><name>FORE</name><argument_list>(<argument>it</argument>,<argument>rela[x][<literal type="number">1</literal>]</argument>)</argument_list></macro> <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><operator>*</operator><name>it</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
    <macro><name>FORE</name><argument_list>(<argument>it</argument>,<argument>rela[x][<literal type="number">3</literal>]</argument>)</argument_list></macro> <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><operator>*</operator><name>it</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
    <macro><name>FORE</name><argument_list>(<argument>it</argument>,<argument>rela[x][<literal type="number">4</literal>]</argument>)</argument_list></macro> <if>if <condition>(<expr><name>l</name><operator>&lt;=</operator><operator>*</operator><name>it</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>it</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <if>if <condition>(<expr><call><name>okEqual</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <macro><name>REP</name><argument_list>(<argument>d</argument>,<argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>l</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><name>l</name><operator>+</operator><name>d</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><call><name>okEqual</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name>okEqual</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name>okEqual</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>okLess</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>process</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
