<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12373561.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a; i &lt;= (b); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a; i &gt;= (b); --i)</value></define>
<define>#<directive>define</directive> <macro><name>RI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FOR(i,1,(n))</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FOR(i,0,(n)-1)</value></define>
<define>#<directive>define</directive> <macro><name>mini</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>a=min(a,b)</value></define>
<define>#<directive>define</directive> <macro><name>maxi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>a=max(a,b)</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>st</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>nd</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></macro> <value>(int) w.size()</value></define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nax</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>nax</name></expr>]</index><index>[<expr><name>nax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>r</name><index>[<expr><name>nax</name></expr>]</index><index>[<expr><name>nax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>L</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>G</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>E</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>LE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>GE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>me</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>odw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>G</name></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>G</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>L</name></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>E</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>E</name></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>LE</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>GE</name></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>GE</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>LE</name></expr>;</return></block></then></if></elseif></if>
	<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>inpu</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <name>what</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>what</name></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>me</name><index>[<expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>what</name></expr>]</index></name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name>bool</name></type> <name>czy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>what</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>what</name> <operator>=</operator> <call><name>odw</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <name>what</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>low</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>high</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>==</operator> <name>L</name> <operator>||</operator> <name><name>r</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name> <operator>==</operator> <name>G</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<macro><name>REP</name><argument_list>(<argument>tries</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
		<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>low + <literal type="number">1</literal></argument>, <argument>high - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>r</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>odw</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			<if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>G</name> <operator>||</operator> <name>a</name> <operator>==</operator> <name>GE</name> <operator>||</operator> <name>a</name> <operator>==</operator> <name>E</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block>
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>me</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>LE</name></expr>]</index></name> <operator>=</operator> <name><name>me</name><index>[<expr><name>LE</name></expr>]</index><index>[<expr><name>L</name></expr>]</index></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>me</name><index>[<expr><name>G</name></expr>]</index><index>[<expr><name>GE</name></expr>]</index></name> <operator>=</operator> <name><name>me</name><index>[<expr><name>GE</name></expr>]</index><index>[<expr><name>G</name></expr>]</index></name> <operator>=</operator> <name>G</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>me</name><index>[<expr><name>E</name></expr>]</index><index>[<expr><name>LE</name></expr>]</index></name> <operator>=</operator> <name><name>me</name><index>[<expr><name>LE</name></expr>]</index><index>[<expr><name>E</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>me</name><index>[<expr><name>E</name></expr>]</index><index>[<expr><name>GE</name></expr>]</index></name> <operator>=</operator> <name><name>me</name><index>[<expr><name>GE</name></expr>]</index><index>[<expr><name>E</name></expr>]</index></name> <operator>=</operator> <name>E</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>k</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>char</name></type> <name><name>sl</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>what</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>what</name> <operator>=</operator> <name>G</name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>what</name> <operator>=</operator> <name>L</name></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>what</name> <operator>=</operator> <name>E</name></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>what</name> <operator>=</operator> <name>GE</name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>what</name> <operator>=</operator> <name>LE</name></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
		<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>inpu</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>what</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>inpu</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>odw</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
	<comment type="line">//printf("%d\n", r[2][3]);</comment>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <name>i</name> <operator>+</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>me</name> <init>= <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>me</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal> <operator>==</operator> <name>j</name></expr>)</condition><then> <block>{
				<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>me</name></expr>;</expr_stmt>
					<comment type="line">//printf("%d %d\n", i, j);</comment>
				}</block></then></if>
				<continue>continue;</continue>
			}</block></then></if>
			<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>me</name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>me</name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>me</name></expr>;</expr_stmt></block></then></if>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
