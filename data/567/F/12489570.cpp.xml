<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12489570.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;memory&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lli</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name><name>signs</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * sign1: -2 'a &lt; b', -1 'a &lt;= b', 0 'a == b', 1 'a &gt;= b', 2 'a &gt; b'
 * sign2: 1 'a &lt; b', 0 'b == a', -1 'a &gt; b'
 */</comment>
<function><type><name>bool</name></type> <name>valid_signs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sign1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign2</name></decl></parameter>)</parameter_list> <block>{
  <switch>switch <condition>(<expr><name>sign1</name></expr>)</condition> <block>{
    <case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case> <return>return <expr><name>sign2</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return>
    <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case> <return>return <expr><name>sign2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</return>
    <case>case  <expr><literal type="number">0</literal></expr>:</case> <return>return <expr><name>sign2</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
    <case>case  <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name>sign2</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
    <case>case  <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name>sign2</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
    <default>default:</default> <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></switch>
}</block></function>

<function><type><name>bool</name></type> <name>is_sign_valid</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>left_interval</name></decl></parameter>, <parameter><decl><type><name>pii</name></type> <name>right_interval</name></decl></parameter>, <parameter><decl><type><name>pii</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>left_interval</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <name><name>left_interval</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>left_interval</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name><name>right_interval</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <name><name>right_interval</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></then></if>

  <if>if <condition>(<expr><name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name><name>right_interval</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator> <name><name>sign</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><call><name>valid_signs</name><argument_list>(<argument><expr><name><name>sign</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>is_valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <comment type="line">// [1, left) &lt; current.</comment>
  <comment type="line">// [left, shifted left) == current.</comment>
  <decl_stmt><decl><type><name>pii</name></type> <name>left_interval</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>left</name> <operator>+</operator> <name>shift</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <comment type="line">// (shifted right, right] == current.</comment>
  <comment type="line">// (right, 2 * n] &lt; current.</comment>
  <decl_stmt><decl><type><name>pii</name></type> <name>right_interval</name><argument_list>(<argument><expr><name>right</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>shift</name><operator>)</operator></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>left_interval</name><operator>.</operator><name>first</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>left_interval</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>sign</name> <range>: <expr><name><name>signs</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>is_sign_valid</name><argument_list>(<argument><expr><name>left_interval</name></expr></argument>, <argument><expr><name>right_interval</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
    }</block></for>
  }</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>right_interval</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>right_interval</name><operator>.</operator><name>second</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>sign</name> <range>: <expr><name><name>signs</name><index>[<expr><name>j</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>is_sign_valid</name><argument_list>(<argument><expr><name>left_interval</name></expr></argument>, <argument><expr><name>right_interval</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
    }</block></for>
  }</block></for>

  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>lli</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">1LL</literal></expr>;</return>
  }</block></then></if>

  <decl_stmt><decl><type><name>lli</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>dp</name><index>[<expr><name>left</name></expr>]</index><index>[<expr><name>right</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>ans</name> <operator>!=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>)</condition><then> <block>{
    <return>return <expr><name>ans</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><call><name>is_valid</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>go</name><argument_list>(<argument><expr><name>block</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>left</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>right</name> <operator>-</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <if>if <condition>(<expr><name>block</name> <operator>==</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <ternary><condition><expr><name>ans</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr> ?</condition><then> <expr><literal type="number">1LL</literal></expr> </then><else>: <expr><literal type="number">0LL</literal></expr></else></ternary></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>get_int</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block>{
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  }</block></then> <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block>{
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"="</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>s</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  }</block></then></if></elseif> <else>else <block>{
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>signs</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><call><name>get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>signs</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><call><name>get_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1LL</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>go</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
