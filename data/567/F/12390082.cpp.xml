<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12390082.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>

<struct>struct <name>rule</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>sign</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>rule</name></expr></argument>&gt;</argument_list></name></name></type> <name>rules</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>h</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>rule</name></type> <name>r</name> <init>= <expr><name><name>rules</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>a</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>.</operator><name>a</name></name> <operator>&lt;=</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>.</operator><name>b</name></name> <operator>&amp;&amp;</operator> <name><name>r</name><operator>.</operator><name>b</name></name> <operator>&lt;=</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>r</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name>a</name> <operator>||</operator> <name><name>r</name><operator>.</operator><name>a</name></name> <operator>==</operator> <name>b</name> <operator>||</operator> <name><name>r</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>a</name> <operator>||</operator> <name><name>r</name><operator>.</operator><name>b</name></name> <operator>==</operator> <name>b</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>&lt;</operator> <name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>b</name></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>b</name></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>&lt;=</operator> <name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>b</name></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>&gt;=</operator> <name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>b</name></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>==</operator> <literal type="string">"="</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>==</operator> <name><name>h</name><index>[<expr><name><name>r</name><operator>.</operator><name>b</name></name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		}</block></then></if></elseif></if>
	}</block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>sign</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>rule</name></type> <name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>r</name><operator>.</operator><name>sign</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>string</name></name><argument_list>(<argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rules</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>k</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>c1</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>, <decl><type ref="prev"/><name>c3</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c2</name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c3</name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
			<comment type="line">//printf("%d %d %d f[%d][%d] = %I64d\n", c1, c2, c3, i, j, f[i][j]);</comment>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<comment type="line">//ans /= 3;</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>ans</name> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
