<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12370478.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>string</name></type> <name><name>co</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>tab</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>lew</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>pra</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">107</literal></expr>]</index><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>czy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'&lt;'</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'&lt;'</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>co</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'&gt;'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&amp;&amp;</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="string">"="</literal> <operator>&amp;&amp;</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="string">"&gt;="</literal> <operator>&amp;&amp;</operator> <name><name>co</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="string">"&lt;="</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>lew</name><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pra</name><index>[<expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>lew</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>u</name><operator>=</operator><name><name>lew</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>czy</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>kon</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>kon</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>kon</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>pocz</name><init>=<expr><name>kon</name></expr></init></decl>;</init> <condition><expr><name>pocz</name></expr>;</condition> <incr><expr><name>pocz</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><operator>(</operator><name>kon</name><operator>-</operator><name>pocz</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>pocz</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><operator>(</operator><name>pocz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if <condition>(<expr><name>czy</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>kon</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>pocz</name></expr>]</index><index>[<expr><name>kon</name></expr>]</index></name></expr>;</expr_stmt>
                    <comment type="line">//printf("z %d %d do %d %d\n", pocz, kon, pocz-2, kon);</comment>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>pocz</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>kon</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>lew</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><operator>(</operator><name>kon</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if <condition>(<expr><name>czy</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>pocz</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>kon</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>pocz</name></expr>]</index><index>[<expr><name>kon</name></expr>]</index></name></expr>;</expr_stmt>
                    <comment type="line">//printf("z %d %d do %d %d\n", pocz, kon, pocz-1, kon+1);</comment>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>kon</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><operator>(</operator><name>kon</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&gt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>u</name><operator>=</operator><name><name>pra</name><index>[<expr><name>kon</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;=</operator><name>pocz</name> <operator>&amp;&amp;</operator> <name><name>tab</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>kon</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"="</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;"</literal> <operator>||</operator> <name><name>co</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="string">"&lt;="</literal><operator>)</operator></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <if>if <condition>(<expr><name>czy</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>pocz</name></expr>]</index><index>[<expr><name>kon</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>pocz</name></expr>]</index><index>[<expr><name>kon</name></expr>]</index></name></expr>;</expr_stmt>
                    <comment type="line">//printf("z %d %d do %d %d\n", pocz, kon, pocz, kon+2);</comment>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
