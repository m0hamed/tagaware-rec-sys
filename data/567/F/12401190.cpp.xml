<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12401190.cpp"><comment type="line">//Language: GNU C++11</comment>


<include># <directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include># <directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include># <directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include># <directive>include</directive> <file>&lt;string&gt;</file></include>
<include># <directive>include</directive> <file>&lt;vector&gt;</file></include>
<include># <directive>include</directive> <file>&lt;queue&gt;</file></include>
<include># <directive>include</directive> <file>&lt;map&gt;</file></include>
<include># <directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include># <directive>include</directive> <file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_N</name> <init>= <expr><literal type="number">204</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_K</name> <init>= <expr><literal type="number">37</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><name>MAX_N</name></expr>]</index><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ch</name><index>[<expr><name>MAX_N</name></expr>]</index><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ok</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>   
        <if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>   
        <if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>   
        <if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>   
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>                    
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>go</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>curr</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>n</name><operator>)</operator> <operator>-</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>ok</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
        <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>ok</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>go</name> <argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    
    
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>ok</name> <argument_list>(<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>go</name> <argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    
    
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>ok</name> <argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ok</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>go</name> <argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
    
    <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>type</name><index>[<expr><literal type="number">204</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strlen</name> <argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name><name>ch</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name><name>ch</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name><name>ch</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
        <block>{
            <if>if <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr><operator>,</operator> <expr><name><name>ch</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr><operator>,</operator> <expr><name><name>ch</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></for>
    
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>go</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
