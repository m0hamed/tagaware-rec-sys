<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12548978.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
    <constructor><name>node</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>, <call><name>type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>node</name></type> <name><name>p</name><index>[<expr><name>maxm</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>==</operator> <name>inf</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name> <operator>==</operator> <name>inf</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>!=</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>Dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <name>r</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1LL</literal></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0LL</literal></expr>;</return>
        }</block></else></if>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>Dp</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>Dp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>Dp</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt>
    <return>return <expr><name><name>f</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>inf</name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>node</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>Dp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
