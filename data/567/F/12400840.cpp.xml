<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12400840.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//BISMILLAHIR RAHMANIR RAHIM</comment>
<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<define>#<directive>define</directive> <macro><name>N</name></macro> <value>1000000</value></define>
<define>#<directive>define</directive> <macro><name>sn</name></macro> <value>scanf</value></define>
<define>#<directive>define</directive> <macro><name>pf</name></macro> <value>printf</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>T</name><block>{<public type="default">
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>op</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">75</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">75</literal></expr>]</index><index>[<expr><literal type="number">75</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ckk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lf</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ckkr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lf</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>lf</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>rt</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ckklr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>l</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>l</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>l</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>r</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
     <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>l</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>r</name><operator>&amp;&amp;</operator><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>arr</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>||</operator><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then>
         <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ret</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//left-right</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fl</name><init>=<expr><call><name>ckklr</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>+</operator><call><name>rec</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="line">//Both left</comment>
     <expr_stmt><expr><name>fl</name><operator>=</operator><call><name>ckk</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>+</operator><call><name>rec</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <comment type="line">//Both right</comment>
    <expr_stmt><expr><name>fl</name><operator>=</operator><call><name>ckkr</name><argument_list>(<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>+</operator><call><name>rec</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>cs</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

    <comment type="line">//freopen(".txt","r",stdin);</comment>
    <expr_stmt><expr><call><name>sn</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>st</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sn</name><argument_list>(<argument><expr><literal type="string">"%d %s %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>st</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name><operator>&amp;&amp;</operator><name><name>st</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'='</literal><operator>&amp;&amp;</operator><call><name>strlen</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>


    }</block></for><expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>pf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>rec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

}</block></function>

<comment type="block">/*
#include &lt;bits/stdc++.h&gt;
  #define _ ios_base::sync_with_stdio(0);cin.tie(0);
*/</comment>
</unit>
