<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12582940.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>req</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LL</name></type> <name><name>d</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>G</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>G</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name><name>req</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>R</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>R</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <else>else
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></else></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>G</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>G</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><name><name>req</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>R</name> <operator>||</operator> <name>v</name> <operator>==</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>R</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>!=</operator> <name>l</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></then></if></elseif>
        <else>else
        <block>{
            <if>if<condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        }</block></else></if>
    }</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>LL</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>d</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>d</name><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>R</name></expr>]</index></name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>L</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>R</name></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>L</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>L</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>R</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("in.txt", "r", stdin);</comment>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>eq</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="string">"&lt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="string">"&lt;="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="string">"&gt;="</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>eq</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1234</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <if>if<condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
            <else>else <block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
        }</block></then></if>

        <expr_stmt><expr><name><name>req</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>req</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>-</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
