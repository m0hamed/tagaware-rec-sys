<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12408578.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">35</literal> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXK</name> <init>= <expr><literal type="number">100</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<struct>struct <name>Condition</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <enum>enum <name>Relation</name> <block>{
        <decl><name>EQ</name></decl>, <decl><name>LT</name></decl>, <decl><name>GT</name></decl>, <decl><name>LE</name></decl>, <decl><name>GE</name></decl>
    }</block> <decl><name>r</name></decl>;</enum>
    <function><type><name>void</name></type> <name>input</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{
            <case>case <expr><literal type="char">'='</literal></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>EQ</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'&lt;'</literal></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>LT</name></expr>;</expr_stmt> <break>break;</break>
            <case>case <expr><literal type="char">'&gt;'</literal></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>GT</name></expr>;</expr_stmt> <break>break;</break>
            }</block></switch>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> ?</condition><then> <expr><name>LE</name></expr> </then><else>: <expr><name>GE</name></expr></else></ternary></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name>reverse</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>r</name></expr>)</condition> <block>{
        <case>case <expr><name>LT</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>GT</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>GT</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>LT</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>LE</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>GE</name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>GE</name></expr>:</case> <expr_stmt><expr><name>r</name> <operator>=</operator> <name>LE</name></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default> <break>break;</break>
        }</block></switch>
    }</block></function>
</public>}</block> <decl><name><name>cond</name><index>[<expr><name>MAXK</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name><name>relate</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXK</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>checkSingle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>==</operator> <name>a</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>reverse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <switch>switch <condition>(<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition> <block>{
    <case>case <expr><name><name>Condition</name><operator>::</operator><name>EQ</name></name></expr>:</case>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    <case>case <expr><name><name>Condition</name><operator>::</operator><name>LT</name></name></expr>:</case>
    <case>case <expr><name><name>Condition</name><operator>::</operator><name>LE</name></name></expr>:</case>
        <return>return <expr><name>l</name> <operator>&lt;=</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&amp;&amp;</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;=</operator> <name>r</name></expr>;</return>
    <case>case <expr><name><name>Condition</name><operator>::</operator><name>GT</name></name></expr>:</case>
    <case>case <expr><name><name>Condition</name><operator>::</operator><name>GE</name></name></expr>:</case>
        <return>return <expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name>l</name> <operator>||</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name>r</name></expr>;</return>
    }</block></switch>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>relate</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>relate</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>Condition</name><operator>::</operator><name>LT</name></name> <operator>||</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>Condition</name><operator>::</operator><name>GT</name></name></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>relate</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>checkSingle</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>relate</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>checkSingle</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then></if></elseif></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name> <operator>+=</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
<comment type="line">//        cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; dp[l][r] &lt;&lt; endl;</comment>
    }</block></then></if>
    <return>return <expr><name><name>dp</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>==</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>Condition</name><operator>::</operator><name>LT</name></name> <operator>||</operator> <name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>==</operator> <name><name>Condition</name><operator>::</operator><name>GT</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>relate</name><index>[<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>relate</name><index>[<expr><name><name>cond</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>calc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
