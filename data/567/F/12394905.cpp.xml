<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12394905.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>fan</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><name>maxn</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>con</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		}</block></then> <else>else <block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block></then></if>
		}</block></else></if>
		<expr_stmt><expr><name><name>con</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>con</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name><name>fan</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>==</operator> <name>y</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>&lt;=</operator> <name>y</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>&gt;=</operator> <name>y</name></expr>;</return></block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>nleft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ky</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>i</name><operator>+</operator><name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>left</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>right</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>n</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>i</name> <operator>-</operator> <name>j</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>q</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>q</name></expr></incr>)</control> <block>{
					<if>if <condition>(<expr><operator>(</operator><name>i</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>q</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					<if>if <condition>(<expr><name>q</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>x</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>y</name> <operator>=</operator> <name>right</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<if>if <condition>(<expr><name>q</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name>x</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>y</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><name>x</name> <operator>=</operator> <name>right</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
							<expr_stmt><expr><name>y</name> <operator>=</operator> <name>right</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						}</block></else></if>
					}</block></else></if>
					<expr_stmt><expr><name>ky</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<comment type="line">// check constraint</comment>
					<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name><name>con</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
						<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>con</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>con</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
						<if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>&lt;=</operator> <name>left</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>p</name> <operator>&gt;=</operator> <name>right</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then>
						<elseif>else <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then></if></elseif>
						<else>else <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></else></if>
					}</block></for>
					<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name><name>con</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
						<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>con</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>con</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
						<if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>&lt;=</operator> <name>left</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>p</name> <operator>&gt;=</operator> <name>right</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then>
						<elseif>else <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then></if></elseif>
						<else>else <block type="pseudo"><expr_stmt><expr><name>ky</name> <operator>=</operator> <operator>(</operator><name>ky</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></else></if>
					}</block></for>
					<if>if <condition>(<expr><name>q</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
					<elseif>else <if>if <condition>(<expr><name>q</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>left</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
					<else>else <block type="pseudo"><expr_stmt><expr><name>nleft</name> <operator>=</operator> <name>left</name></expr>;</expr_stmt></block></else></if>
					<if>if <condition>(<expr><name>ky</name></expr>)</condition><then> <block>{
						<comment type="line">// printf("i+1=%d nleft=%d\n",i+1, nleft);</comment>
						<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>nleft</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>left</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block></then></if></block></for></block></for>
}</block></function>

<function><type><name>void</name></type> <name>output</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<comment type="line">//	freopen("F.in", "r", stdin);</comment>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>output</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
