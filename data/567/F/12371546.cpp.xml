<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12371546.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>e</name><index>[<expr><literal type="number">150</literal></expr>]</index><index>[<expr><literal type="number">150</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>d</name><index>[<expr><literal type="number">150</literal></expr>]</index><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>v</name><index>[<expr><literal type="number">150</literal></expr>]</index><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>l</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>r</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>laske</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>d</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>a</name><operator>+</operator><literal type="number">1</literal> <operator>==</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>ok</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>laske</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>laske</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>laske</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>d</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="string">"="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="string">"&lt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="string">"&gt;"</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="string">"&lt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="string">"&gt;="</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>e</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>laske</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>
</unit>
