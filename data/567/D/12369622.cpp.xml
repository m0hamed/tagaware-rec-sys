<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12369622.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Interval</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>lo</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
	<constructor><name>Interval</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>_hi</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>lo</name> <argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>hi</name> <argument_list>(<argument><expr><name>_hi</name></expr></argument>)</argument_list></call> </member_init_list><block>{
		<return>return;</return>
	}</block></constructor>
	<constructor><name>Interval</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>_lo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>_hi</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>lo</name> <argument_list>(<argument><expr><name>_lo</name></expr></argument>)</argument_list></call>, <call><name>hi</name> <argument_list>(<argument><expr><name>_hi</name></expr></argument>)</argument_list></call> </member_init_list><block>{
		<return>return;</return>
	}</block></constructor>
</public>}</block>;</struct>

<function type="operator"><specifier>inline</specifier> <type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Interval</name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Interval</name> <modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>hi</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>hi</name></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>a</name><operator>.</operator><name>hi</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>hi</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>a</name><operator>.</operator><name>lo</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>lo</name></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>, <decl><type ref="prev"/><name>MAXM</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>Interval</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>Interval</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>iter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name> <index>[<expr><name>MAXM</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>hit</name> <index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>remove_segment</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>Interval</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>iter</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>c</name> <operator>-=</operator> <operator>(</operator><name><name>iter</name> <operator>-&gt;</operator> <name>hi</name></name> <operator>-</operator> <name><name>iter</name> <operator>-&gt;</operator> <name>lo</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>add_segment</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>lo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>hi</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>hi</name> <operator>-</operator> <name>lo</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name> <argument_list>(<argument><expr><call><name>Interval</name> <argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>add_segment</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name><name>st</name><operator>.</operator><name>lower_bound</name></name> <argument_list>(<argument><expr><call><name>Interval</name> <argument_list>(<argument><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>iter</name> <operator>-&gt;</operator> <name>lo</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>iter</name> <operator>-&gt;</operator> <name>hi</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>remove_segment</name> <argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_segment</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_segment</name> <argument_list>(<argument><expr><name><name>x</name> <index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
