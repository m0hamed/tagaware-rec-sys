<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12375635.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>llong</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>v.begin(), v.end()</value></define>
<define>#<directive>define</directive> <macro><name>pr</name></macro> <value>pair&lt;int, int&gt;</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MXN</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>llong</name></type> <name>hm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>deleted</name><index>[<expr><name>MXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pr</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pr</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">1</literal></expr>, <expr><name>n</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hm</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>deleted</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name><name>deleted</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>MXN</name></expr>}</block></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>hm</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name><name>it</name> <operator>-&gt;</operator> <name>S</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>it</name> <operator>-&gt;</operator> <name>F</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>hm</name> <operator>+=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><name><name>it</name> <operator>-&gt;</operator> <name>F</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>hm</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>it</name> <operator>-&gt;</operator> <name>S</name></name><operator>)</operator> <operator>-</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>it</name> <operator>-&gt;</operator> <name>F</name></name></expr>, <expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>it</name> <operator>-&gt;</operator> <name>S</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>hm</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
