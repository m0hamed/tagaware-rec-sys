<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12376679.cpp"><comment type="line">//Language: MS C++</comment>


<pragma>#<directive>pragma</directive> <name>comment</name><name>(</name><name>linker</name><name>,</name><literal>"/stack:67108864"</literal><name>)</name></pragma>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cfloat&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;typeinfo&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = 0; i &lt; int(n); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>forn1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = 1; i &lt;= int(n); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = int(n) - 1; i &gt;= 0; --i)</value></define>
<define>#<directive>define</directive> <macro><name>ford1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = int(n); i &gt; 0; --i)</value></define>
<define>#<directive>define</directive> <macro><name>foran</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = int(a); i &lt;= int(n); ++i)</value></define>

<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x)*(x)</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>(v).begin(),(v).end()</value></define>

<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><literal type="number">3.1415926535897932384626433832795</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>multiset</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>shot</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cin</name> <operator>&gt;&gt;</operator><name>n</name> <operator>&gt;&gt;</operator><name>k</name> <operator>&gt;&gt;</operator><name>a</name><operator>)</operator></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>cin</name> <operator>&gt;&gt;</operator><name>m</name><operator>)</operator></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{   
    <expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cur</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"NO"</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>bool</name></type> <name>t</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>multiset</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>pos</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <throw>throw;</throw>
        }</block></then></if>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pos</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>-=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <operator>(</operator><name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>l</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name><name>shot</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>t</name><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ifstream</name></type> <name>ifile</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ifile</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"rt"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<ifdef>#<directive>ifdef</directive> <name>ONLINE_JUDGE</name></ifdef>
    <if>if <condition>(<expr><name>ifile</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"wt"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<endif>#<directive>endif</directive></endif>
    <while>while<condition>(<expr><call><name>read</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
