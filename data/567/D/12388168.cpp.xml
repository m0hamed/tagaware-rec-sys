<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12388168.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>s</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>a</name></decl> ;</decl_stmt>

<function><type><name>int</name></type> <name>check</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list>
<block>{
  <return>return <expr><operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <operator>(</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name>i</name></decl> , <decl><type ref="prev"/><name>tmp</name></decl> , <decl><type ref="prev"/><name>flag</name></decl> , <decl><type ref="prev"/><name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl> ;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>m</name></expr> ;</expr_stmt>

  <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>

  <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>check</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> ;</expr_stmt>

  <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>

  <for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr> ;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr> ;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr> )</control>
  <block>{
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name> <argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>--</operator> <name>it</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name>l</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr> ;</expr_stmt>
    <expr_stmt><expr><operator>++</operator> <name>it</name></expr> <operator>,</operator> <expr><operator>++</operator> <name>it</name></expr> ;</expr_stmt>

    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr> ;</expr_stmt>

    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <call><name>check</name> <argument_list>( <argument><expr><name>r</name> <operator>-</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>check</name> <argument_list>( <argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>check</name> <argument_list>( <argument><expr><name>r</name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <if>if <condition>( <expr><name>tmp</name> <operator>&lt;</operator> <name>k</name></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt> <break>break ;</break>
    }</block></then></if>

  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>flag</name></expr> ;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
