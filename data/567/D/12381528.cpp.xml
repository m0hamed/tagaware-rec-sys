<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12381528.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>READ</name><parameter_list>(<parameter><type><name>in</name></type></parameter>)</parameter_list></macro>      <value>freopen(in, "r", stdin)</value></define>
<define>#<directive>define</directive> <macro><name>WRITE</name><parameter_list>(<parameter><type><name>out</name></type></parameter>)</parameter_list></macro>    <value>freopen(out, "w", stdout)</value></define>

<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></macro>  <value>for(int i=s; i&lt;=e; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FOREACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>  <value>for(__typeof(n.begin()) i=n.begin();i!=n.end();i++)</value></define>
<define>#<directive>define</directive> <macro><name>SCI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>        <value>scanf("%d", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>SCII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro>    <value>scanf("%d %d", &amp;x, &amp;y)</value></define>
<define>#<directive>define</directive> <macro><name>SCIII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d %d", &amp;x, &amp;y, &amp;z)</value></define>

<define>#<directive>define</directive> <macro><name>SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro>     <value>memset(x, y, sizeof(x))</value></define>
<define>#<directive>define</directive> <macro><name>SORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>       <value>sort(x.begin(), x.end());</value></define>
<define>#<directive>define</directive> <macro><name>REVERSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>    <value>reverse(x.begin(), x.end())</value></define>

<define>#<directive>define</directive> <macro><name>pb</name></macro>            <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro>            <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro>            <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro>            <value>second</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro>           <value>pair&lt;int, int&gt;</value></define>

<define>#<directive>define</directive> <macro><name>DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>         <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</value></define>
<define>#<directive>define</directive> <macro><name>DBII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro>      <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; '\t' &lt;&lt; #y &lt;&lt; " = " &lt;&lt; y &lt;&lt; endl;</value></define>
<define>#<directive>define</directive> <macro><name>DBIII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></macro>   <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; '\t' &lt;&lt; #y &lt;&lt; " = " &lt;&lt; y &lt;&lt; '\t' &lt;&lt; #z &lt;&lt; " = " &lt;&lt; z &lt;&lt; endl;</value></define>

<define>#<directive>define</directive> <macro><name>MOD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x%10000007</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name></macro> <value>(long long unsigned) (1e18) + 7</value></define>
<define>#<directive>define</directive> <macro><name>Min</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>(x&lt;=y) ? x : y</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//READ("in.txt");</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>a</name></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>myset</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>myset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>myset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>save</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>myset</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>auto</name></type> <name>in</name> <init>= <expr><call><name><name>myset</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>auto</name></type> <name>be</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>auto</name></type> <name>af</name> <init>= <expr><name>in</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>be</name><operator>--</operator></expr><operator>,</operator> <expr><name>af</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>-=</operator> <operator>(</operator><operator>*</operator><name>af</name><operator>-</operator><operator>*</operator><name>be</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>af</name><operator>-</operator><operator>*</operator><name>in</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>in</name><operator>-</operator><operator>*</operator><name>be</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>save</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if>
                <comment type="line">//DB(cnt);</comment>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>save</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
