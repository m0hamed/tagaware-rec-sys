<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12377639.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="line">//techwiz911</comment>
<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>(int)(a.size())</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(),a.end()</value></define>
<define>#<directive>define</directive> <macro><name>gcd</name></macro> <value>__gcd</value></define>
<define>#<directive>define</directive> <macro><name>b_c</name></macro> <value>__builtin_popcount</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&gt;=b;i--)</value></define>
<define>#<directive>define</directive> <macro><name>tr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>it</name></type></parameter>)</parameter_list></macro> <value>for(typeof(c).begin() it=(c).begin();it!=(c).end();it++)</value></define> 
<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>init</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>memset(a,b,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>n_p</name></macro> <value>next_permutation</value></define>
<define>#<directive>define</directive> <macro><name>b_s</name></macro> <value>binary_search</value></define>
<define>#<directive>define</directive> <macro><name>endl</name></macro> <value>'\n'</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>INT_MAX</value></define>
<define>#<directive>define</directive> <macro><name>INFL</name></macro> <value>LLONG_MAX</value></define>
<define>#<directive>define</directive> <macro><name>sd</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>pd</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%d\n",n);</value></define>
<define>#<directive>define</directive> <macro><name>slf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf",&amp;n);</value></define>
<define>#<directive>define</directive> <macro><name>plf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%lf",n);</value></define>
<define>#<directive>define</directive> <macro><name>ss</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%s",n)</value></define>
<define>#<directive>define</directive> <macro><name>ps</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%s",n);</value></define>
<define>#<directive>define</directive> <macro><name>sp</name><parameter_list>()</parameter_list></macro> <value>printf(" ");</value></define>
<define>#<directive>define</directive> <macro><name>ln</name><parameter_list>()</parameter_list></macro> <value>printf("\n");</value></define>
<define>#<directive>define</directive> <macro><name>TC</name><parameter_list>()</parameter_list></macro> <value>int t;sd(t);while(t--)</value></define>
<define>#<directive>define</directive> <macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>                <value>cerr &lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro>             <value>cerr &lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt; endl;</value></define>
<define>#<directive>define</directive> <macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></macro>          <value>cerr &lt;&lt;#x&lt;&lt;": "&lt;&lt;x&lt;&lt;" | "&lt;&lt;#y&lt;&lt;": "&lt;&lt;y&lt;&lt;" | "&lt;&lt;#z&lt;&lt;": "&lt;&lt;z&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></macro>       <value>cerr &lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>trace5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></macro>    <value>cerr &lt;&lt;#a&lt;&lt;": "&lt;&lt;a&lt;&lt;" | "&lt;&lt;#b&lt;&lt;": "&lt;&lt;b&lt;&lt;" | "&lt;&lt;#c&lt;&lt;": "&lt;&lt;c&lt;&lt;" | "&lt;&lt;#d&lt;&lt;": "&lt;&lt;d&lt;&lt;" | "&lt;&lt;#e&lt;&lt;": "&lt;&lt;e&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>die</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro>  <value>cout&lt;&lt;s&lt;&lt;endl; exit(0);</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>VLL</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>SI</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>SLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>

<function><type><name>void</name></type> <name>FastIO</name><parameter_list>()</parameter_list>
<block>{<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>LL</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{<decl_stmt><decl><type><name>LL</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>p</name></expr>)</condition><block>{<if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ret</name></expr>;</return>}</block></function>
<function><type><name>LL</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<decl_stmt><decl><type><name>LL</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>p</name></expr>)</condition><block>{<if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>a</name><operator>)</operator></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ret</name></expr>;</return>}</block></function>
<comment type="line">//Template Ends Here</comment>

<decl_stmt><decl><type><name>LL</name></type> <name><name>mov</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>FastIO</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>mn</name><init>=<expr><name>INF</name></expr></init></decl>;</decl_stmt>       
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>LL</name></type> <name>pos</name><init>=<expr><operator>(</operator><operator>(</operator><name>n</name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fi</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>fi</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>PII</name></type> <name>p</name><init>=<expr><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>||</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>p</name><operator>.</operator><name>Y</name></name></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>-=</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>X</name></name><operator>==</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>p</name><operator>.</operator><name>Y</name></name><operator>==</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>X</name></name><operator>==</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>pos</name><operator>+=</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>Y</name></name><operator>==</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>pos</name><operator>+=</operator><operator>(</operator><operator>(</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>X</name></name></expr></argument>,<argument><expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else
        <block>{
            <expr_stmt><expr><name>pos</name><operator>+=</operator><operator>(</operator><operator>(</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>p</name><operator>.</operator><name>X</name></name><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>pos</name><operator>+=</operator><operator>(</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>a</name><operator>)</operator><operator>/</operator><operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>Y</name></name><operator>-</operator><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name>a</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>X</name></name></expr></argument>,<argument><expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>mov</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>Y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>pos</name><operator>&lt;</operator><name>k</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
