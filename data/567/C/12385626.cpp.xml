<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12385626.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/* Supto
   Dept. Of CSE
   University Of Dhaka
*/</comment>
<comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>ins</name></macro> <value>insert</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long int</value></define>
<define>#<directive>define</directive> <macro><name>llu</name></macro> <value>long long unsigned</value></define>
<define>#<directive>define</directive> <macro><name>sss</name></macro> <value>stringstream</value></define>
<define>#<directive>define</directive> <macro><name>oss</name></macro> <value>ostringstream</value></define>
<define>#<directive>define</directive> <macro><name>iss</name></macro> <value>istringstream</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>_sq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>
<define>#<directive>define</directive> <macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a)*((b)/gcd(a,b)))</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>_set</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,-1,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>popcount</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>__builtin_popcount(n)</value></define>
<define>#<directive>define</directive> <macro><name>popcountl</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>__builtin_popcountll(n)</value></define>
<define>#<directive>define</directive> <macro><name>ctz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>__builtin_ctz(x)</value></define> <comment type="line">//number of trailing zeroes in a digit</comment>
<define>#<directive>define</directive> <macro><name>ctzl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>__builtin_ctzll(x)</value></define>
<define>#<directive>define</directive> <macro><name>clz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>__builtin_clz(x)</value></define>
<define>#<directive>define</directive> <macro><name>clzl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>__builtin_clzll(x)</value></define> <comment type="line">//number of leading zeroes in a digit</comment>
<comment type="line">//If Long Long (mask &amp; (1LL &lt;&lt; k))</comment>
<define>#<directive>define</directive> <macro><name>check</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></macro> <value>(mask &amp; (1 &lt;&lt; k))</value></define>
<define>#<directive>define</directive> <macro><name>set1</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></macro> <value>(mask | (1 &lt;&lt; k))</value></define>
<define>#<directive>define</directive> <macro><name>set0</name><parameter_list>(<parameter><type><name>mask</name></type></parameter> ,<parameter><type><name>k</name></type></parameter>)</parameter_list></macro> <value>(mask &amp; (~(1&lt;&lt;k)))</value></define>
<define>#<directive>define</directive> <macro><name>READ</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></macro> <value>freopen(f, "r", stdin)</value></define>
<define>#<directive>define</directive> <macro><name>WRITE</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></macro> <value>freopen(f, "w", stdout)</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>pi</name></macro> <value>acos(-1.0)</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>(1&lt;&lt;30)</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro> <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name></macro> <value>200005</value></define>
<define>#<directive>define</directive> <macro><name>MAXL</name></macro> <value>15</value></define>

<comment type="line">//const ll mod = 1000003;</comment>
<comment type="line">//int dx[] = {0,0,1,-1};</comment>
<comment type="line">//int dy[] = {1,-1,0,0};</comment>
<comment type="line">//int dx[] = {-1,-1,-1,0,0,1,1,1};</comment>
<comment type="line">//int dy[] = {-1,0,1,-1,1,-1,0,1};</comment>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>_map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ar</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>lft</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rgt</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//READ("input.txt");</comment>
    <comment type="line">//WRITE("output.txt");</comment>
    <comment type="line">//ios_base::sync_with_stdio(false);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>lft</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>_map</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>_map</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>_map</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>rgt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>_map</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>_map</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name><name>lft</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>rgt</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

	 				  					  	  			 	  	  	</unit>
