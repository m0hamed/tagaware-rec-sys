<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12373871.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>pli</name></macro> <value>pair&lt;ll, int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>x</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1000000000LL</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro> <value>1E-9</value></define>
<define>#<directive>define</directive> <macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout &lt;&lt; #x &lt;&lt; " : " &lt;&lt; x &lt;&lt; endl;</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pli</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pli</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>begin</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>%</operator> <name>K</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>K</name> <operator>&gt;</operator> <name>INF</name> <operator>||</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>K</name> <operator>&lt;</operator> <operator>-</operator><name>INF</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pli</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>/</operator> <name>K</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pli</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>/</operator> <name>K</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>cnt1</name> <init>= <expr><name>end</name> <operator>-</operator> <name>begin</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>begin</name> <operator>=</operator> <call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pli</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>K</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>end</name> <operator>=</operator> <call><name>upper_bound</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pli</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>*</operator> <name>K</name></expr></argument>, <argument><expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>cnt2</name> <init>= <expr><name>end</name> <operator>-</operator> <name>begin</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cnt1</name> <operator>*</operator> <name>cnt2</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
