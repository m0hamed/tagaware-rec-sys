<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12548576.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>full</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,63,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>pi</name></macro> <value>2*acos(0.0)</value></define>
<define>#<directive>define</directive> <macro><name>sf1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>sf2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d",&amp;a,&amp;b)</value></define>
<define>#<directive>define</directive> <macro><name>sf3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d%d",&amp;a,&amp;b,&amp;c)</value></define>
<define>#<directive>define</directive> <macro><name>sf1d</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>sf2d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf%lf",&amp;a,&amp;b)</value></define>
<define>#<directive>define</directive> <macro><name>sf3d</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf%lf%lf",&amp;a,&amp;b,&amp;c)</value></define>
<define>#<directive>define</directive> <macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>min(a,min(b,c))</value></define>
<define>#<directive>define</directive> <macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>max(a,max(b,c))</value></define>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp1</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>mp2</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>i</name><operator>==</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>l</name><init>=<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>lcount</name><init>=<expr><name><name>mp2</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>l</name><operator>==</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>lcount</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>r</name><init>=<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>k</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>rcount</name><init>=<expr><name><name>mp1</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>mp2</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name>rcount</name><operator>*</operator><name>lcount</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

      	 	 	 			  	 		 	 	  	</unit>
