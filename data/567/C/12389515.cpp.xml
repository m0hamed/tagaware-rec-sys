<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12389515.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt;ll,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pdd</name></macro> <value>pair&lt;double,double&gt;</value></define>
<define>#<directive>define</directive> <macro><name>FILL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>memset(a,x,sizeof(a))</value></define>
<define>#<directive>define</directive>	<macro><name>foreach</name><parameter_list>( <parameter><type><name>gg</name></type></parameter>,<parameter><type><name>ii</name></type></parameter> )</parameter_list></macro> <value>for( typeof(gg.begin()) ii=gg.begin();ii!=gg.end();ii++)</value></define>
<define>#<directive>define</directive>	<macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive>	<macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>int((a).size())</value></define>
<define>#<directive>define</directive>	<macro><name>debug</name><parameter_list>(<parameter><type><name>ccc</name></type></parameter>)</parameter_list></macro>	<value>cout &lt;&lt; #ccc &lt;&lt; " = " &lt;&lt; ccc &lt;&lt; endl;</value></define>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>input</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>neg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>t</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>(</operator><name><name>t</name><argument_list type="generic">&lt;<argument><expr><literal type="number">48</literal> <operator>||</operator> <name>t</name></expr></argument>&gt;</argument_list></name><literal type="number">57</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>t</name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then>
		<block>{<expr_stmt><expr><name>neg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></then></if>
    <while>while<condition>(<expr><name>t</name><operator>&gt;=</operator><literal type="number">48</literal> <operator>&amp;&amp;</operator> <name>t</name><operator>&lt;=</operator><literal type="number">57</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>t</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
	<if>if<condition>(<expr><name>neg</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt>}</block></then></if>
	<if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">48</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">200010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>ii</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{
	<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>ii</name><operator>=</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ii</name><operator>!=</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>ii</name><operator>=</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>find</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ii</name><operator>!=</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>output</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
