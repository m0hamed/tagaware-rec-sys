<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12399824.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>sz</name></macro> <value>211111</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>sz</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>chk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>bit</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>sz</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><name>pos</name><operator>&lt;</operator><name>sz</name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>bit</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name><operator>+=</operator><name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>+=</operator><operator>(</operator><name>pos</name><operator>&amp;</operator><operator>-</operator><name>pos</name><operator>)</operator></expr>;</expr_stmt>

    }</block></while>
}</block></function>

<function><type><name>ll</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lvl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>pos</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>bit</name><index>[<expr><name>lvl</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name><operator>-=</operator><operator>(</operator><name>pos</name><operator>&amp;</operator><operator>-</operator><name>pos</name><operator>)</operator></expr>;</expr_stmt>

    }</block></while>
    <return>return <expr><name>sum</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <endif>#<directive>endif</directive></endif> <comment type="line">// ONLINE_JUDGE</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>idx</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>chk</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>chk</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>num</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        }</block></then></if>


    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name>num</name><operator>+</operator><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>idx</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>chk</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{

        <decl_stmt><decl><type><name>ll</name></type> <name>cur0</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cur1</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>k</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cur2</name><init>=<expr><name>cur1</name><operator>*</operator><name>k</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>id0</name><init>=<expr><name><name>chk</name><index>[<expr><name>cur0</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id1</name><init>=<expr><name><name>chk</name><index>[<expr><name>cur1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id2</name><init>=<expr><name><name>chk</name><index>[<expr><name>cur2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>id1</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>id1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

       <comment type="line">// cout&lt;&lt;"i:"&lt;&lt;i&lt;&lt;"\tans:"&lt;&lt;ans&lt;&lt;"\tcur0:"&lt;&lt;cur0&lt;&lt;"\tid0:"&lt;&lt;id0&lt;&lt;"\tcur1:"&lt;&lt;cur1&lt;&lt;"\tid1:"&lt;&lt;id1&lt;&lt;"\tcur2:"&lt;&lt;cur2&lt;&lt;"\tid2:"&lt;&lt;id2&lt;&lt;endl;</comment>


        <if>if<condition>(<expr><name>id1</name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>val1</name><init>=<expr><operator>(</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>id1</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>id1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
               <comment type="line">// cout&lt;&lt;"\tval1:"&lt;&lt;val1&lt;&lt;endl;</comment>
            <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>id0</name></expr></argument>,<argument><expr><name>val1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>id0</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


	  						 			 		  				   	  			</unit>
