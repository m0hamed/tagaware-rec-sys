<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12365996.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>Long</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>k0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>k1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name>k2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Long</name></type> <name><name>a</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>Long</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>bef</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>Long</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>aft</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>get_ll</name><parameter_list>(<parameter><decl><type><name>Long</name> <modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Long</name></type> <name>flag</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<do>do
	<block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
	while<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\t'</literal></expr>)</condition>;</do>
	
	<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>-</operator><literal type="number">1LL</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if> 
	
	<do>do
	<block>{
		<expr_stmt><expr><name>r</name> <operator>*=</operator> <literal type="number">10LL</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>+=</operator> <call>(<name>Long</name>)<argument_list>(<argument><expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
	while<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>;</do>
	
	<expr_stmt><expr><name>r</name> <operator>*=</operator> <name>flag</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen("ex.in","r",stdin);</comment>
	<comment type="line">//freopen("ex.out","w",stdout);</comment>
	
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>k0</name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>k2</name> <operator>=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>k1</name></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>get_ll</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>aft</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	
	<decl_stmt><decl><type><name>Long</name></type> <name>res</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>k1</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>bef</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>aft</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name><name>aft</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name><name>bef</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>k1</name></expr>]</index></name> <operator>*</operator> <name><name>aft</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>k1</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bef</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
