<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12407711.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<define>#<directive>define</directive> <macro><name>maxn</name></macro> <value>100010</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>ch</name><operator>&lt;</operator><literal type="char">'!'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;</operator><literal type="char">'!'</literal></expr>)</condition><block>{<expr_stmt><expr><name>num</name><operator>=</operator><name>num</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">48</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>num</name></expr>;</return>
}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<struct>struct <name>Edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>bj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dis</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>v</name></expr>;</expr_stmt><expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>next</name><operator>=</operator><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>=</operator><name>d</name></expr>;</expr_stmt><expr_stmt><expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>S</name></decl>,<decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>disS</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>disT</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">45</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>que</name><index>[<expr><literal type="number">10</literal><operator>*</operator><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>SPFA</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>ll</name><modifier>*</modifier></type> <name>dis</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>modo</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>vis</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>inf</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>head</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tail</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>que</name><index>[<expr><name>head</name></expr>]</index></name><operator>=</operator><name>s</name></expr>;</expr_stmt><expr_stmt><expr><name><name>vis</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>dis</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>head</name><operator>!=</operator><name>tail</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>que</name><index>[<expr><name>head</name></expr>]</index></name></expr></init></decl>;</decl_stmt>	
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><name>modo</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name><operator>&gt;</operator><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name></expr>;</expr_stmt>
				<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>que</name><index>[<expr><name>tail</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>}</block></then></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>head</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<struct>struct <name>EDGE</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dis</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>maxn</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>H</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>d</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>edge</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>=</operator><name>d</name></expr>;</expr_stmt><expr_stmt><expr><name><name>edge</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edge</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name>pos</name></expr>;</expr_stmt><expr_stmt><expr><name><name>edge</name><index>[<expr><name>num</name></expr>]</index></name><operator>.</operator><name>next</name><operator>=</operator><name><name>H</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>H</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>num</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>low</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>dfs_clock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bj</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>pre</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>dfs_clock</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>H</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>!</operator><name><name>pre</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>fa</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt><expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>low</name><index>[<expr><name>v</name></expr>]</index></name><operator>&gt;</operator><name><name>pre</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name></expr>]</index></name><operator>.</operator><name>bj</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>pre</name><index>[<expr><name>v</name></expr>]</index></name><operator>&lt;</operator><name><name>pre</name><index>[<expr><name>u</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>!=</operator><name>f</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>pre</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>	
	}</block></for>
}</block></function>
<struct>struct <name>Pair</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>dis</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pair</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>dis</name><operator>&gt;</operator><name><name>k</name><operator>.</operator><name>dis</name></name></expr>;</return>}</block></function>
	<constructor><name>Pair</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>node</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>,<call><name>dis</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>Pair</name></expr></argument>&gt;</argument_list></name></type><name>Q</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>S</name></decl></parameter>,<parameter><decl><type><name>ll</name><modifier>*</modifier></type> <name>dis</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>modo</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>vis</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>inf</name></expr>;</expr_stmt></block></for><expr_stmt><expr><name><name>dis</name><index>[<expr><name>S</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>Pair</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>node</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if><expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><name>modo</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>&lt;</operator><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>Pair</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name><name>dis</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>d</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
<comment type="line">//	SPFA(S,disS,0);</comment>
<comment type="line">//	SPFA(T,disT,1);</comment>
	<expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><name>disS</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>disT</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><name><name>disS</name><index>[<expr><name>T</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>disS</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name>d</name><operator>+</operator><name><name>disT</name><index>[<expr><name>v</name></expr>]</index></name><operator>==</operator><name>tmp</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>Add</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Add</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>S</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bj</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><name><name>disS</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>disT</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>tmp</name><operator>-</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>	
		}</block></then></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %d\n"</literal></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>+</operator><name>d</name><operator>-</operator><name>tmp</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>	
}</block></function>
</unit>
