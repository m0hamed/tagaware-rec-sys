<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12389574.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>pli</name></macro> <value>pair&lt;ll, int&gt;</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>HUGE</name> <init>= <expr><literal type="number">10000000000000000LL</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>r</name> <block>{<public type="default">
       <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>ind</name></decl>;</decl_stmt>
       <constructor><name>r</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <block>{
             <expr_stmt><expr><name>x</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>w</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>ind</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
       }</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>st</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pli</name></type> <name><name>arr</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dists</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>distt</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pli</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>nec</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>r</name></expr></argument>&gt;</argument_list></name></type> <name><name>in</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sol</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>open</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>st</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>r</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>in</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>r</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>dists</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>HUGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>distt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>HUGE</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>dists</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>pli</name></type> <name>curr</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>f</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>out</name><index>[<expr><name>sec</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
              <block type="pseudo"><if>if <condition>(<expr><name><name>dists</name><index>[<expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>f</name> <operator>+</operator> <name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dists</name><index>[<expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name><name>dists</name><index>[<expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>+</operator> <name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dists</name><index>[<expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if></block></for>
    }</block></while>
    <expr_stmt><expr><name><name>distt</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>s</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>pli</name></type> <name>curr</name> <init>= <expr><operator>*</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ll</name></type> <name>f</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>in</name><index>[<expr><name>sec</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
              <block type="pseudo"><if>if <condition>(<expr><name><name>distt</name><index>[<expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>f</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>distt</name><index>[<expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name><name>distt</name><index>[<expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>+</operator> <name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
                 <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>distt</name><index>[<expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>sec</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if></block></for>
    }</block></while>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name><name>dists</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>opcnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>open</name><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>opcnt</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>open</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> 
           <block type="pseudo"><expr_stmt><expr><name><name>nec</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>open</name><index>[<expr><name>c</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
           <expr_stmt><expr><name>opcnt</name><operator>--</operator></expr>;</expr_stmt> 
           <expr_stmt><expr><name><name>open</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>d</name> <operator>+</operator> <name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>+</operator> <name><name>distt</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>dists</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
               <if>if <condition>(<expr><operator>!</operator><name><name>open</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><name><name>open</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                  <expr_stmt><expr><name>opcnt</name><operator>++</operator></expr>;</expr_stmt>
               }</block></then></if>              
               <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>out</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>d</name> <operator>+</operator> <name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>+</operator> <name><name>distt</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>!=</operator> <name><name>dists</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
               <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name>d</name> <operator>+</operator> <name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>+</operator> <name><name>distt</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>dists</name><index>[<expr><name>t</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
               <if>if <condition>(<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <name>v</name></expr>)</condition><then> 
                  <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ind</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block></then>
               <else>else
                   <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ind</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
               <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>nec</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then> 
               <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
               <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ind</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name><name>out</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ind</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        }</block></for>
    }</block></for>   
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
           <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <elseif>else 
             <if>if <condition>(<expr><name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else 
             <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
