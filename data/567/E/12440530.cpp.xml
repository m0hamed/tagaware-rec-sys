<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12440530.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>MAX</name></macro> <value>100010</value></define>
<define>#<directive>define</directive> <macro><name>oo</name></macro> <value>3e15</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1e8</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>iii</name>;</typedef>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj_s</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj_t</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>road</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>d_s</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>d_t</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f_s</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f_t</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>ii</name></expr></argument> , <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> , <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dijkstra_s</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>ii</name></expr></argument> , <argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<expr_stmt><expr><name><name>d_s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>oo</name></expr>;</expr_stmt><expr_stmt><expr><name><name>f_s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>}</block></for>
     <expr_stmt><expr><name><name>d_s</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>f_s</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
     <block>{
          <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>du</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>d_s</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name>du</name></expr>)</condition><then>
          <block>{
               <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adj_s</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
               <block>{
                    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>uv</name> <init>= <expr><name><name>adj_s</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>adj_s</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>du</name> <operator>+</operator> <name>uv</name> <operator>==</operator> <name><name>d_s</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f_s</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f_s</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>f_s</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><name><name>d_s</name><index>[<expr><name>v</name></expr>]</index></name><operator>&gt;</operator><name>du</name><operator>+</operator><name>uv</name></expr>)</condition><then>
                    <block>{
                         <expr_stmt><expr><name><name>d_s</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>du</name><operator>+</operator><name>uv</name></expr>;</expr_stmt>
                         <expr_stmt><expr><name><name>f_s</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>f_s</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name><name>d_s</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
               }</block></for>
          }</block></then></if>
     }</block></while>

}</block></function>

<function><type><name>void</name></type> <name>dijkstra_t</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>ii</name></expr></argument> , <argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
     <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<expr_stmt><expr><name><name>d_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>oo</name></expr>;</expr_stmt><expr_stmt><expr><name><name>f_t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>}</block></for>
     <expr_stmt><expr><name><name>f_t</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name><name>d_t</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
     <block>{
          <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>du</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name><name>d_t</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name>du</name></expr>)</condition><then>
          <block>{
               <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>adj_t</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
               <block>{
                    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>uv</name> <init>= <expr><name><name>adj_t</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>adj_t</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>du</name> <operator>+</operator> <name>uv</name> <operator>==</operator> <name><name>d_t</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f_t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f_t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>f_t</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><name>du</name> <operator>+</operator> <name>uv</name> <operator>&lt;</operator> <name><name>d_t</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
                    <block>{
                         <expr_stmt><expr><name><name>d_t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>du</name> <operator>+</operator> <name>uv</name></expr>;</expr_stmt>
                         <expr_stmt><expr><name><name>f_t</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>f_t</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                         <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name><name>d_t</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
               }</block></for>
          }</block></then></if>
     }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//  freopen("TEST.inp","r",stdin);</comment>
    
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj_s</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj_t</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>road</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>iii</name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><call><name>dijkstra_s</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra_t</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>road</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>=</operator><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>d_s</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>d_t</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>v</name><operator>==</operator><name><name>d_s</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>f_s</name><index>[<expr><name>x</name></expr>]</index></name><operator>*</operator><name><name>f_t</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>==</operator><name><name>f_s</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name><name>d_s</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>d_t</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>v</name><operator>-</operator><operator>(</operator><name><name>d_s</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><name>v</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %lld\n"</literal></expr></argument>,<argument><expr><name><name>d_s</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>d_t</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>v</name><operator>-</operator><operator>(</operator><name><name>d_s</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else<block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
}</block></function></unit>
