<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12489086.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>M</name></macro> <value>100009</value></define>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>119999819</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1e18</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><struct>struct
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>to</name></decl>,<name>cost</name>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>from</name></decl>;</decl_stmt>
</public>}</block></struct></type><name>edge</name>;</typedef>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dis</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>edge</name></type> <name><name>mp</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument> , <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument> , <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>P</name></type> <name>p</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>edge</name></type> <name>e</name> <init>= <expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>==</operator> <name><name>dis</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>+=</operator> <name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d %I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">4</literal></expr>)</condition>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>edge</name></type> <name>e</name> <init>= <expr><block>{<expr><name>b</name></expr>,<expr><name>c</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>e</name> <operator>=</operator> <block>{<expr><name>a</name></expr>,<expr><name>c</name></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>edge</name></type> <name>e</name> <init>= <expr><name><name>mp</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="block">/*if(dis[0][e.from] + dis[1][e.to] + e.cost == dis[0][t])
            {
                if(num[0][e.from]*num[1][e.to] == num[0][t])
                    printf("YES\n");
                else if(e.cost &gt; 1)
                {
                    printf("CAN 1\n");
                }
                else
                    printf("NO\n");
            }
            else
            {
                ll a = dis[0][t] - (dis[0][e.from] + dis[1][e.to]);
                if(a - 1 &gt; 0)
                printf("CAN %I64d\n",e.cost-a+1);
                else printf("NO\n");
            }*/</comment>
            <if>if<condition>(<expr><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr>]</index></name> <operator>+</operator> <name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name> <operator>==</operator> <name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>==</operator> <name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>dis</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>from</name></name></expr>]</index></name> <operator>+</operator> <name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name><name>e</name><operator>.</operator><name>cost</name></name><operator>-</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></else></if>
        }</block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
