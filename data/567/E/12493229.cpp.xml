<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12493229.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>0x3f3f3f3f3f3f3f3f</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">13</literal></expr></init></decl>;</decl_stmt>


<struct>struct <name>edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt>
    <constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>to</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>,<call><name>cost</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
    <constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>v</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>,<call><name>to</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>,<call><name>cost</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
        <return>return <expr><name>cost</name> <operator>&gt;</operator> <name><name>a</name><operator>.</operator><name>cost</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>G_a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>G_b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>addedge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>G_a</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>G_b</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dis_a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dis_b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cnt_a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cnt_b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Dijkstra</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name><name>cnt</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name><name>dis</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>flag</name></decl></parameter>)</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>dis</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>dis</name><index>[<expr><name>s</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>edge</name></type> <name>tmp</name> <init>= <expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>limt</name> <init>= <expr><ternary><condition><expr><name>flag</name></expr>?</condition><then><expr><name><name>G_a</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></then><else>:<expr><name><name>G_b</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>limt</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>edge</name><modifier>&amp;</modifier></type> <name>next</name> <init>= <expr><ternary><condition><expr><name>flag</name></expr> ?</condition><then> <expr><name><name>G_a</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>:<expr><name><name>G_b</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>==</operator> <name><name>tmp</name><operator>.</operator><name>cost</name></name><operator>+</operator><name><name>next</name><operator>.</operator><name>cost</name></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>cnt</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>+</operator><name><name>cnt</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>dis</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>&gt;</operator> <name><name>tmp</name><operator>.</operator><name>cost</name></name> <operator>+</operator> <name><name>next</name><operator>.</operator><name>cost</name></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name><name>cnt</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dis</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>cost</name></name> <operator>+</operator> <name><name>next</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name><name>next</name><operator>.</operator><name>to</name></name></expr></argument>,<argument><expr><name><name>dis</name><index>[<expr><name><name>next</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>cos</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>from</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>to</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>cos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name>from</name></expr></argument>,<argument><expr><name>to</name></expr></argument>,<argument><expr><name>cos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>from</name></expr></argument>,<argument><expr><name>to</name></expr></argument>,<argument><expr><name>cos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>cnt_a</name></expr></argument>,<argument><expr><name>dis_a</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Dijkstra</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>cnt_b</name></expr></argument>,<argument><expr><name>dis_b</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{

        <if>if<condition>(<expr><name><name>dis_a</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name><operator>+</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name><operator>+</operator><name><name>dis_b</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>]</index></name> <operator>==</operator> <name><name>dis_a</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cnt_a</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name><operator>*</operator><name><name>cnt_b</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name> <operator>==</operator> <name><name>cnt_a</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>ect</name> <init>= <expr><name><name>dis_a</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><name><name>dis_a</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name><operator>-</operator><name><name>dis_b</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>ect</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name><operator>-</operator><name>ect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
}</block></function>
</unit>
