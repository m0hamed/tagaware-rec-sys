<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12378927.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
 
<define>#<directive>define</directive> <macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>for(int x=y;x&lt;z;x++)</value></define>
<define>#<directive>define</directive> <macro><name>F2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>for(int x=y;x&lt;=z;x++)</value></define>
<define>#<directive>define</directive> <macro><name>F3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>for(int x=y;x&gt;z;x--)</value></define>
<define>#<directive>define</directive> <macro><name>F4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>for(int x=y;x&gt;=z;x--)</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long</value></define>
 
<define>#<directive>define</directive> <macro><name>MAX</name></macro> <value>100005</value></define>
<define>#<directive>define</directive> <macro><name>AMAX</name></macro> <value>26</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1499999957</value></define>

<define>#<directive>define</directive> <macro><name>f</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></macro> <value>((1&lt;&lt;(c))*(d))</value></define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>w</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>ww</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>ta</name></decl>,<decl><type ref="prev"/><name>tb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>to</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>from</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>da</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>db</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>dd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>wa</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>wb</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>www</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>F1</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>from</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>F2</name><argument_list>(<argument>a</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>da</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>db</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>LLONG_MAX</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>da</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wa</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<expr_stmt><expr><name>pt</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>da</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>!=</operator><operator>-</operator><name><name>pt</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<macro><name>F1</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>to[pt.second].size()</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>da</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>=</operator><name><name>da</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wa</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>=</operator><name><name>wa</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then><elseif>else <if>if<condition>(<expr><name><name>da</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name><operator>==</operator><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>wa</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>wa</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>to</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>+</operator><name><name>wa</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if></elseif></if>
		}</block>
	}</block></while>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>db</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wb</name><index>[<expr><name>t</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<expr_stmt><expr><name>pt</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>db</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>!=</operator><operator>-</operator><name><name>pt</name><operator>.</operator><name>first</name></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<macro><name>F1</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>from[pt.second].size()</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>db</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>=</operator><name><name>db</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><operator>-</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>wb</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>=</operator><name><name>wb</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then><elseif>else <if>if<condition>(<expr><name><name>db</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>c</name><operator>==</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>wb</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>wb</name><index>[<expr><name><name>ww</name><index>[<expr><name><name>from</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>+</operator><name><name>wb</name><index>[<expr><name><name>pt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if></elseif></if>
		}</block>
	}</block></while>
	<expr_stmt><expr><name>dd</name><operator>=</operator><name><name>da</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>www</name><operator>=</operator><name><name>wa</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>F1</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>==</operator><name>LLONG_MAX</name><operator>||</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>==</operator><name>LLONG_MAX</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>+</operator><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>c</name><operator>+</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>==</operator><name>dd</name><operator>&amp;&amp;</operator><operator>(</operator><name><name>wa</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>*</operator><name><name>wb</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>==</operator><name>www</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else<block>{
			<expr_stmt><expr><name>tc</name><operator>=</operator><name>dd</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name><name>da</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>-</operator><name><name>db</name><index>[<expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>tc</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>,<argument><expr><name><name>ww</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>c</name><operator>-</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block>
	<comment type="line">//system("pause");</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
