<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12422596.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>1000000000000000LL</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt;ll,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pllll</name></macro> <value>pair&lt; pll,pll &gt;</value></define>
<define>#<directive>define</directive> <macro><name>vpll</name></macro> <value>vector&lt; pll &gt;</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(ll i=a;i&lt;b;i++)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>d1</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d2</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ok</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>h</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>mark</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>spt</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpll</name></type> <name><name>g</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>gr</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>gs</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>pllll</name></expr></argument> &gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edge1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>isbridge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>id</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><specifier>static</specifier> <type><name>ll</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mark</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>time</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>gs[u].size()</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><name>gs</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>,<decl><type ref="prev"/><name>ind</name><init>=<expr><name><name>gs</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>isbridge</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index></name>  <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <name><name>h</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>ok</name><index>[<expr><name>ind</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>ind</name><operator>!=</operator><name>id</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index></name>  <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block>
}</block></function>
<function><type><name>void</name></type> <name>dijkstra1</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>spt</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>pll</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d1</name><index>[<expr><name>src</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//spt[src]=true;</comment>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>pll</name></type> <name>tp</name><init>=<expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>v</name><init>=<expr><name><name>tp</name><operator>.</operator><name>second</name></name></expr></init></decl>, <decl><type ref="prev"/><name>t</name><init>=<expr><name><name>tp</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;v&lt;&lt;endl;</comment>
		<expr_stmt><expr><name><name>spt</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>v2</name><init>=<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>cost</name><init>=<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>spt</name><index>[<expr><name>v2</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>d1</name><index>[<expr><name>v2</name></expr>]</index></name><operator>&gt;</operator><name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>cost</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>d1</name><index>[<expr><name>v2</name></expr>]</index></name><operator>=</operator><name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>cost</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>pll</name><argument_list>(<argument><expr><name><name>d1</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>,<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>
<function><type><name>void</name></type> <name>dijkstra2</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>spt</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>pll</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d2</name><index>[<expr><name>src</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//spt[src]=true;</comment>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>pll</name></type> <name>tp</name><init>=<expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>v</name><init>=<expr><name><name>tp</name><operator>.</operator><name>second</name></name></expr></init></decl>, <decl><type ref="prev"/><name>t</name><init>=<expr><name><name>tp</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;v&lt;&lt;endl;</comment>
		<expr_stmt><expr><name><name>spt</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>gr</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>v2</name><init>=<expr><name><name>gr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>cost</name><init>=<expr><name><name>gr</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>!</operator><name><name>spt</name><index>[<expr><name>v2</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>d2</name><index>[<expr><name>v2</name></expr>]</index></name><operator>&gt;</operator><name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>cost</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>d2</name><index>[<expr><name>v2</name></expr>]</index></name><operator>=</operator><name><name>d2</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>cost</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>pll</name><argument_list>(<argument><expr><name><name>d2</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>,<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edge1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>gr</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <comment type="line">//memset(d1,63,sizeof(d1));</comment>
    <comment type="line">//memset(d2,63,sizeof(d2));</comment>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">100005</literal></argument>)</argument_list></macro><block>{<expr_stmt><expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>inf</name></expr>;</expr_stmt><expr_stmt><expr><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>inf</name></expr>;</expr_stmt>}</block>
    <expr_stmt><expr><call><name>dijkstra1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name>dijkstra2</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//rep(i,1,n+1)cout&lt;&lt;d1[i]&lt;&lt;' '&lt;&lt;d2[i]&lt;&lt;endl;</comment>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>edge1.size()</argument>)</argument_list></macro>
    <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>v1</name> <init>= <expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>v2</name><init>=<expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>second</name></name></expr></init></decl>,<decl><type ref="prev"/><name>cost</name><init>=<expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>v1</name></expr>]</index></name><operator>+</operator><name>cost</name><operator>+</operator><name><name>d2</name><index>[<expr><name>v2</name></expr>]</index></name><operator>==</operator><name><name>d1</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>gs</name><index>[<expr><name>v1</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>v2</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>gs</name><index>[<expr><name>v2</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>v1</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
    }</block>
    <expr_stmt><expr><call><name>isbridge</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m</argument>)</argument_list></macro>
    <block>{
	  <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>first</name><operator>.</operator><name>second</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w</name> <init>= <expr><name><name>edge1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
	  <if>if<condition>(<expr><name><name>ok</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>

	  <if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>d2</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>

	  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name>w</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>d1</name><index>[<expr><name>t</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>d1</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <name><name>d2</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
