<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12491326.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>p</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e12</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>input</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>a</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>

<struct>struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt>
	<constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>from</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call>, <call><name>to</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>, <call><name>cost</name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>dijkstra</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>es</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>addedge</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>es</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>es</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>		
		<expr_stmt><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>INF</name></expr>;</expr_stmt></block></for>		
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>		
		<decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt; <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>p</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>p</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>p</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>		
		<while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{					
			<decl_stmt><decl><type><name>p</name></type> <name>node</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	
			<decl_stmt><decl><type><name>ll</name></type> <name>dist</name><init>=<expr><name><name>node</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>u</name><init>=<expr><name><name>node</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt> 
			<if>if<condition>(<expr><name>dist</name><operator>&gt;</operator><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>G</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>edge</name><modifier>&amp;</modifier></type> <name>e</name><init>=<expr><name><name>es</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>G</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>==</operator> <name>dist</name><operator>+</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> 
				<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>&gt;</operator><name>dist</name><operator>+</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>=</operator><name>dist</name><operator>+</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>p</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></while>		
	}</block></function>
</public>}</block><decl><name>d</name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%I64d%I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>u</name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v</name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>w</name><operator>=</operator><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>addedge</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>edge</name><modifier>&amp;</modifier></type> <name>e</name><init>=<expr><name><name>d</name><operator>.</operator><name>es</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>u</name><operator>=</operator><name><name>e</name><operator>.</operator><name>from</name></name></expr><operator>,</operator> <expr><name>v</name><operator>=</operator><name><name>e</name><operator>.</operator><name>to</name></name></expr><operator>,</operator> <expr><name>w</name><operator>=</operator><name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>d1</name><init>=<expr><name><name>d</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>d2</name><init>=<expr><name><name>d</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>dt</name><init>=<expr><name><name>d</name><operator>.</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
		<decl_stmt><decl><type><name>ll</name></type> <name>c1</name><init>=<expr><name><name>d</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c2</name><init>=<expr><name><name>d</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>ct</name><init>=<expr><name><name>d</name><operator>.</operator><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>d1</name><operator>+</operator><name>d2</name><operator>+</operator><name>w</name> <operator>==</operator> <name>dt</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c1</name><operator>*</operator><name>c2</name><operator>)</operator><operator>%</operator><name>mod</name> <operator>==</operator> <name>ct</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>exp</name><init>=<expr><name>dt</name><operator>-</operator><name>d1</name><operator>-</operator><name>d2</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>exp</name><operator>&lt;</operator><literal type="number">1</literal> <operator>||</operator> <name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %I64d\n"</literal></expr></argument>, <argument><expr><name>w</name><operator>-</operator><name>exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
					    	    		   	  			     	</unit>
