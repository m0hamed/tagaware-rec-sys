<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12362292.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD0</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD1</name><init>=<expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD2</name><init>=<expr><literal type="number">1000000021</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Integer</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>a0</name></decl>, <decl><type ref="prev"/><name>a1</name></decl>, <decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
    <constructor><name>Integer</name><parameter_list>()</parameter_list>
    <block>{
        <comment type="line">//</comment>
    }</block></constructor>
    <constructor><name>Integer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    }</block></constructor>
    <function type="operator"><type><name>Integer</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>a0</name><operator>=</operator><name>a1</name><operator>=</operator><name>a2</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>Integer</name></type> <name>operator<name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Integer</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>ret</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a0</name></name><operator>=</operator><name>a0</name><operator>+</operator><name><name>other</name><operator>.</operator><name>a0</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>ret</name><operator>.</operator><name>a0</name></name><operator>&gt;=</operator><name>MOD0</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a0</name></name><operator>-=</operator><name>MOD0</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a1</name></name><operator>=</operator><name>a1</name><operator>+</operator><name><name>other</name><operator>.</operator><name>a1</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>ret</name><operator>.</operator><name>a1</name></name><operator>&gt;=</operator><name>MOD1</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a1</name></name><operator>-=</operator><name>MOD1</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a2</name></name><operator>=</operator><name>a2</name><operator>+</operator><name><name>other</name><operator>.</operator><name>a2</name></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>ret</name><operator>.</operator><name>a2</name></name><operator>&gt;=</operator><name>MOD2</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a2</name></name><operator>-=</operator><name>MOD2</name></expr>;</expr_stmt></block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>Integer</name></type> <name>operator<name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Integer</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <decl_stmt><decl><type><name>Integer</name></type> <name>ret</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a0</name></name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>a0</name><operator>*</operator><name><name>other</name><operator>.</operator><name>a0</name></name><operator>%</operator><name>MOD0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a1</name></name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>a1</name><operator>*</operator><name><name>other</name><operator>.</operator><name>a1</name></name><operator>%</operator><name>MOD1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ret</name><operator>.</operator><name>a2</name></name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>a2</name><operator>*</operator><name><name>other</name><operator>.</operator><name>a2</name></name><operator>%</operator><name>MOD2</name></expr>;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Integer</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>a0</name><operator>==</operator><name><name>other</name><operator>.</operator><name>a0</name></name> <operator>&amp;&amp;</operator> <name>a1</name><operator>==</operator><name><name>other</name><operator>.</operator><name>a1</name></name> <operator>&amp;&amp;</operator> <name>a2</name><operator>==</operator><name><name>other</name><operator>.</operator><name>a2</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>adj1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>adj2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dist1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dist2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Integer</name></type> <name><name>ways1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Integer</name></type> <name><name>ways2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><name>c</name><operator>&gt;</operator><name><name>other</name><operator>.</operator><name>c</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name><name>dist</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name><name>ways</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways</name><index>[<expr><name>src</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>src</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>u</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>c</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>c</name><operator>!=</operator><name><name>dist</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name><operator>:</operator> <name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name></expr></init>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>it</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>w</name><init>=<expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>c</name><operator>+</operator><name>w</name><operator>&lt;</operator><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>c</name><operator>+</operator><name>w</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>ways</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name>v</name></expr>, <expr><name>c</name><operator>+</operator><name>w</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>c</name><operator>+</operator><name>w</name><operator>==</operator><name><name>dist</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name><name>ways</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name><name>ways</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block></for>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>S</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj1</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>b</name></expr>, <expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj2</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>, <expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><block>{<expr><name>a</name></expr>, <expr><name>b</name></expr>}</block></expr>, <expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>adj1</name></expr></argument>, <argument><expr><name>dist1</name></expr></argument>, <argument><expr><name>ways1</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>adj2</name></expr></argument>, <argument><expr><name>dist2</name></expr></argument>, <argument><expr><name>ways2</name></expr></argument>, <argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name><operator>:</operator> <name>edges</name></expr></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>it</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>it</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name><name>it</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>dist1</name><index>[<expr><name>T</name></expr>]</index></name><operator>==</operator><name><name>dist1</name><index>[<expr><name>u</name></expr>]</index></name><operator>+</operator><name><name>dist2</name><index>[<expr><name>v</name></expr>]</index></name><operator>+</operator><name>c</name> <operator>&amp;&amp;</operator> <name><name>ways1</name><index>[<expr><name>u</name></expr>]</index></name><operator>*</operator><name><name>ways2</name><index>[<expr><name>v</name></expr>]</index></name><operator>==</operator><name><name>ways1</name><index>[<expr><name>T</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>c</name><operator>-</operator><operator>(</operator><name><name>dist1</name><index>[<expr><name>T</name></expr>]</index></name><operator>-</operator><name><name>dist1</name><index>[<expr><name>u</name></expr>]</index></name><operator>-</operator><name><name>dist2</name><index>[<expr><name>v</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><name>c</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %lld\n"</literal></expr></argument>, <argument><expr><name>c</name><operator>-</operator><operator>(</operator><name><name>dist1</name><index>[<expr><name>T</name></expr>]</index></name><operator>-</operator><name><name>dist1</name><index>[<expr><name>u</name></expr>]</index></name><operator>-</operator><name><name>dist2</name><index>[<expr><name>v</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
