<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12394840.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>edge</name> <block>{<public type="default">
   <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
   <constructor><name>edge</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
   <constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>l</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>, <call><name>n</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>vert</name> <block>{<public type="default">
   <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
   <constructor><name>vert</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
   <constructor><name>vert</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>, <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>

   <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vert</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
      <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>a</name><operator>.</operator><name>p</name></name></expr>)</condition><then> <block>{
         <return>return <expr><name>x</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>x</name></name></expr>;</return>
      }</block></then> <else>else <block>{
         <return>return <expr><name>p</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>p</name></name></expr>;</return>
      }</block></else></if>
   }</block></function>
</public>}</block>;</struct>

<struct>struct <name>seg</name> <block>{<public type="default">
   <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
   <constructor><name>seg</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
   <constructor><name>seg</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>l</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call>, <call><name>r</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>, <call><name>n</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>

   <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>seg</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
      <if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>a</name><operator>.</operator><name>l</name></name></expr>)</condition><then> <block>{
         <return>return <expr><name>r</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>r</name></name></expr>;</return>
      }</block></then> <else>else <block>{
         <return>return <expr><name>l</name> <operator>&lt;</operator> <name><name>a</name><operator>.</operator><name>l</name></name></expr>;</return>
      }</block></else></if>
   }</block></function>
</public>}</block>;</struct>

<function><type><name>void</name></type> <name>deikstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>k</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>g</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
   <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>vert</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>g</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>s</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>vert</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
   }</block></for>
   <expr_stmt><expr><name><name>d</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>vert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <for>for <control>(<init>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>x</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
         <if>if <condition>(<expr><name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>&gt;</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>l</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>vert</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>l</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>vert</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then></if>
      }</block></for>
   }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<endif>#<directive>endif</directive></endif>
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>d</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1e15</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>edge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></for>
   <expr_stmt><expr><call><name>deikstra</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>deikstra</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>seg</name></expr></argument>&gt;</argument_list></name></type> <name>tp</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block>{
         <if>if <condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>to</name><operator>.</operator><name>l</name></name> <operator>==</operator> <name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>tp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>seg</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>to</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>to</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
         }</block></else></if>
      }</block></for>
   }</block></for>
   <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>tp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>tp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>tp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&gt;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>tp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>tp</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&lt;</operator> <name><name>tp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><name>x</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      }</block></then></if>
   }</block></for>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>anq</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>auto</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block>{
         <if>if <condition>(<expr><operator>!</operator><name><name>ans</name><index>[<expr><name><name>to</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
         }</block></then></if> 
         <if>if <condition>(<expr><name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>anq</name><index>[<expr><name><name>to</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>l</name></name> <operator>-</operator> <name><name>d</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><name><name>to</name><operator>.</operator><name>x</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>anq</name><index>[<expr><name><name>to</name><operator>.</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
         }</block></else></if>
      }</block></for>
   }</block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>anq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>anq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>anq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %d\n"</literal></expr></argument>, <argument><expr><name><name>anq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
   }</block></for>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
