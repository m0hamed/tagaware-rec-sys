<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12478698.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line" format="doxygen">/// *********************************************** K</comment>
<comment type="line" format="doxygen">/// B *                                           * H</comment>
<comment type="line" format="doxygen">/// I *    Solved By : Bir Bahadur Khatri(B'ru)   * A</comment>
<comment type="line" format="doxygen">/// R *      Be Positive,be Happy.                * T</comment>
<comment type="line" format="doxygen">/// U *                                           * R</comment>
<comment type="line" format="doxygen">/// *********************************************** I</comment>

<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long int</value></define>
<define>#<directive>define</directive> <macro><name>ULL</name></macro> <value>unsigned LL</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>2.0*acos(0.0)</value></define>
<define>#<directive>define</directive> <macro><name>D</name></macro> <value>double</value></define>
<define>#<directive>define</directive> <macro><name>sz</name></macro> <value>size()</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>cp</name></macro> <value>printf("***** here here here here *****\n");</value></define>
<define>#<directive>define</directive> <macro><name>NL</name></macro> <value>printf("\n")</value></define>
<define>#<directive>define</directive> <macro><name>CHR</name></macro> <value>getchar()</value></define>
<define>#<directive>define</directive> <macro><name>SQR</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>(n*n)</value></define>
<define>#<directive>define</directive> <macro><name>MEM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></macro> <value>memset(a,val,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>Max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a&gt;b)?a:b)</value></define>
<define>#<directive>define</directive> <macro><name>Min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a&lt;b)?a:b)</value></define>
<define>#<directive>define</directive> <macro><name>_Max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>Max(a,Max(b,c))</value></define>
<define>#<directive>define</directive> <macro><name>_Min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>Min(a,Min(b,c))</value></define>
<define>#<directive>define</directive> <macro><name>S1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;int&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>S2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;int&gt;(),b=in&lt;int&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>S3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;int&gt;(),b=in&lt;int&gt;(),c=in&lt;int&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>SL1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;LL&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>SL2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;LL&gt;(),b=in&lt;LL&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>SL3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>a=in&lt;LL&gt;(),b=in&lt;LL&gt;(),c=in&lt;LL&gt;()</value></define>
<define>#<directive>define</directive> <macro><name>F</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;b; i++)</value></define>
<define>#<directive>define</directive> <macro><name>R</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a-1;i&gt;=b; i--)</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(),a.end()</value></define>
<define>#<directive>define</directive> <macro><name>cnt_bit</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>__builtin_popcountll(a)</value></define>
<define>#<directive>define</directive> <macro><name>InpOut</name></macro> <value>freopen("A.in","r",stdin),freopen("A1.out","w",stdout)</value></define>
<define>#<directive>define</directive> <macro><name>_cin</name></macro> <value>ios_base::sync_with_stdio(0)</value></define>
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>in</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>ng</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>ng</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if><if>if <condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><then>     <block type="pseudo"><break>break;</break></block></then></if>}</block></while><while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>}</block></while><return>return <expr><operator>(</operator><ternary><condition><expr><name>ng</name></expr>?</condition><then><expr><operator>-</operator><name>n</name></expr></then><else>:<expr><name>n</name></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>Dist</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y2</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>sqrt</name><argument_list>( <argument><expr><call><name>SQR</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><name>x2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>SQR</name><argument_list>(<argument><expr><name>y1</name><operator>-</operator><name>y2</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>POW</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>B</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>P</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>P</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> <if>if<condition>(<expr><name>P</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>B</name><operator>*</operator><call><name>POW</name><argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><name>P</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>  <else>else <block type="pseudo"><return>return <expr><call><name>SQR</name><argument_list>(<argument><expr><call><name>POW</name><argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><name>P</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>ABS</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><name>a</name></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></else></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>Gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>Gcd</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if><if>if<condition>(<expr><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>Gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if><return>return <expr><ternary><condition><expr><operator>(</operator><name>b</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><call><name>Gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>Lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>Lcm</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if><if>if<condition>(<expr><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>Lcm</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if><return>return <expr><name>a</name><operator>*</operator><operator>(</operator><name>b</name><operator>/</operator><call><name>Gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>Bigmod</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>power</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>power</name></expr>)</condition><block>{<if>if<condition>(<expr><name>power</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>base</name><operator>=</operator><operator>(</operator><name>base</name><operator>*</operator><name>base</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><name>power</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ret</name></expr>;</return>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>ModInverse</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>Bigmod</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>Set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name>N</name><operator>=</operator><name>N</name> <operator>|</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>Reset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>N</name><operator>=</operator> <name>N</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>Chkbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call>(<name>bool</name>)<argument_list>(<argument><expr><name>N</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>pos</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>isVowel</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>toupper</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'A'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'U'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'I'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'O'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'E'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>isConst</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><call><name>isalpha</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isVowel</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list>  <block>{ <decl_stmt><decl><type><name>int</name></type> <name>sm</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>ss</name><operator>&gt;&gt;</operator><name>sm</name></expr>;</expr_stmt> <return>return <expr><name>sm</name></expr>;</return> }</block></function>
<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>toLlint</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>sm</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>ss</name><operator>&gt;&gt;</operator><name>sm</name></expr>;</expr_stmt> <return>return <expr><name>sm</name></expr>;</return>}</block></function>

<comment type="line" format="doxygen">///**********************************************************//</comment>


<comment type="line" format="doxygen">///         0123456789</comment>
<define>#<directive>define</directive> <macro><name>MX</name></macro>  <value>100007</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>(1&lt;&lt;28)</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro> <value>1e-9</value></define>

<comment type="line" format="doxygen">/// ==========================================////</comment>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>MX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>MX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>A</name><index>[<expr><name>MX</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>z</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>pv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>t</name></decl>;</decl_stmt>
    <constructor><name>z</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    <constructor><name>z</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>__</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>u</name><operator>=</operator><name>_</name></expr><operator>,</operator><expr><name>t</name><operator>=</operator><name>__</name></expr><operator>,</operator><expr><name>pv</name><operator>=</operator><name>p</name></expr>;</expr_stmt>
    }</block></constructor>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>z</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <return>return <expr><operator>(</operator><name><name>p</name><operator>.</operator><name>t</name></name><operator>&lt;</operator><name>t</name><operator>)</operator></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>LL</name></type> <name><name>D1</name><index>[<expr><name>MX</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>MX</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Dijkestra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>z</name></expr></argument>&gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>z</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name><name>Q</name><operator>.</operator><name>sz</name></name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>z</name></type> <name>u</name><init>=<expr><call><name><name>Q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>U</name><init>=<expr><name><name>u</name><operator>.</operator><name>u</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name><name>D1</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>D1</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>u</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>A</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>A</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>D1</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>&gt;</operator><name><name>D1</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index></name><operator>+</operator><name><name>A</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>( <argument><expr><call><name>z</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name><name>u</name><operator>.</operator><name>t</name></name><operator>+</operator><name><name>A</name><index>[<expr><name>U</name></expr>]</index><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
    }</block></while>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>Tme</name></decl>,<decl><type ref="prev"/><name><name>Start</name><index>[<expr><name>MX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ed</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>Adj</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> ,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>Start</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>Tme</name></expr><operator>,</operator><expr><name><name>Ed</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>Tme</name><operator>++</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>Adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>Adj</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>v</name><operator>==</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><operator>!</operator><name><name>Start</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Ed</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>Ed</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Ed</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>Ed</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>Ed</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Start</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>Ok</name><index>[<expr><name>MX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>MX</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>D1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>S3</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>S1</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>S3</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[ <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[ <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>A</name><index>[ <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>A</name><index>[ <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>Dijkestra</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>Dijkestra</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>Dst</name><init>=<expr><name><name>D1</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>Tme</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lf</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>rg</name><init>=<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>Lft</name><init>=<expr><name><name>D1</name><index>[<expr><name>lf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>Rgt</name><init>=<expr><name><name>D1</name><index>[<expr><name>rg</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>Lft</name><operator>+</operator><name>Rgt</name><operator>+</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>Dst</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>Adj</name><index>[<expr><name>lf</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>rg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>Adj</name><index>[<expr><name>rg</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>lf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[ <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>lf</name></expr></argument>,<argument><expr><name>rg</name></expr></argument>)</argument_list></call></expr> ]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else  <block>{
            <expr_stmt><expr><name><name>Ok</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>Dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>lf</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>rg</name><init>=<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>Lft</name><init>=<expr><name><name>D1</name><index>[<expr><name>lf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>Rgt</name><init>=<expr><name><name>D1</name><index>[<expr><name>rg</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>!</operator><name><name>Ok</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>(</operator><name><name>Start</name><index>[<expr><name>lf</name></expr>]</index></name><operator>&lt;</operator><name><name>Ed</name><index>[<expr><name>rg</name></expr>]</index></name><operator>||</operator><name><name>Start</name><index>[<expr><name>rg</name></expr>]</index></name><operator>&lt;</operator><name><name>Ed</name><index>[<expr><name>lf</name></expr>]</index></name><operator>)</operator><operator>&amp;&amp;</operator><name><name>mp</name><index>[ <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>lf</name></expr></argument>,<argument><expr><name>rg</name></expr></argument>)</argument_list></call></expr> ]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>nwC</name><init>=<expr><name>Lft</name><operator>+</operator><name>Rgt</name><operator>+</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>Dst</name> <operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>nwC</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %lld\n"</literal></expr></argument>,<argument><expr><name>nwC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">///============= Thank You ===================///</comment>
</unit>
