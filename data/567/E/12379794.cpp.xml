<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12379794.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>0x3f3f3f3f</value></define>
<define>#<directive>define</directive> <macro><name>INFLL</name></macro> <value>10000000000000000LL</value></define>
<define>#<directive>define</directive> <macro><name>MEMSET_INF</name></macro> <value>127</value></define>
<define>#<directive>define</directive> <macro><name>_</name></macro> <value>ios_base::sync_with_stdio(0);cin.tie(0);</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>2000000007</value></define>

<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vii</name></type> <name><name>g1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>vii</name></type> <name><name>g2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name><name>dist1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>from1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name><name>dist2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>from2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>



<function><type><name>void</name></type> <name>dijkstra1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ 
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>

    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>dist1</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
    <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{ 
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cur</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        <decl_stmt><decl><type><name>ll</name></type> <name>cd</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>ll</name></type> <name>cn</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><name>cd</name> <operator>&gt;</operator> <name><name>dist1</name><index>[<expr><name>cn</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if> 
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g1</name><index>[<expr><name>cn</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{ 
            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>adj</name> <init>= <expr><name><name>g1</name><index>[<expr><name>cn</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name>ll</name></type> <name>ad</name> <init>= <expr><name><name>adj</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name>ll</name></type> <name>an</name> <init>= <expr><name><name>adj</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt> 
            <if>if <condition>(<expr><name>cd</name> <operator>+</operator> <name>ad</name> <operator>&lt;</operator> <name><name>dist1</name><index>[<expr><name>an</name></expr>]</index></name></expr>)</condition><then> <block>{ 
                <expr_stmt><expr><name><name>dist1</name><index>[<expr><name>an</name></expr>]</index></name> <operator>=</operator> <name>cd</name> <operator>+</operator> <name>ad</name></expr>;</expr_stmt> 
                <expr_stmt><expr><name><name>from1</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>from1</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>cd</name> <operator>+</operator> <name>ad</name></expr></argument>, <argument><expr><name>an</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></then> 
            <elseif>else <if>if <condition>(<expr><name>cd</name> <operator>+</operator> <name>ad</name> <operator>==</operator> <name><name>dist1</name><index>[<expr><name>an</name></expr>]</index></name></expr>)</condition><then> <block>{ 
                <expr_stmt><expr><name><name>from1</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if> 
        }</block></for> 
    }</block></while> 
}</block></function>

<function><type><name>void</name></type> <name>dijkstra2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{ 
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>

    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
    <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{ 
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cur</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
        <decl_stmt><decl><type><name>ll</name></type> <name>cd</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>ll</name></type> <name>cn</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><name>cd</name> <operator>&gt;</operator> <name><name>dist2</name><index>[<expr><name>cn</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if> 
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g2</name><index>[<expr><name>cn</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{ 
            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>adj</name> <init>= <expr><name><name>g2</name><index>[<expr><name>cn</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name>ll</name></type> <name>ad</name> <init>= <expr><name><name>adj</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt> 
            <decl_stmt><decl><type><name>ll</name></type> <name>an</name> <init>= <expr><name><name>adj</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt> 
            <if>if <condition>(<expr><name>cd</name> <operator>+</operator> <name>ad</name> <operator>&lt;</operator> <name><name>dist2</name><index>[<expr><name>an</name></expr>]</index></name></expr>)</condition><then> <block>{ 
                <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>an</name></expr>]</index></name> <operator>=</operator> <name>cd</name> <operator>+</operator> <name>ad</name></expr>;</expr_stmt> 
                <expr_stmt><expr><name><name>from2</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>from2</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>cd</name> <operator>+</operator> <name>ad</name></expr></argument>, <argument><expr><name>an</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            }</block></then> 
            <elseif>else <if>if <condition>(<expr><name>cd</name> <operator>+</operator> <name>ad</name> <operator>==</operator> <name><name>dist2</name><index>[<expr><name>an</name></expr>]</index></name></expr>)</condition><then> <block>{ 
                <expr_stmt><expr><name><name>from2</name><index>[<expr><name>an</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>cn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if> 
        }</block></for> 
    }</block></while> 
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>ways1</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>calcways1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>curn</name> <operator>==</operator> <name>target</name></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1LL</literal></expr>;</return>
    }</block></then><elseif>else <if>if<condition>(<expr><name><name>ways1</name><index>[<expr><name>curn</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><name><name>ways1</name><index>[<expr><name>curn</name></expr>]</index></name></expr>;</return>
    }</block></then></if></elseif><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>from1</name><index>[<expr><name>curn</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>from1</name><index>[<expr><name>curn</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>+</operator> <call><name>calcways1</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name><name>ways1</name><index>[<expr><name>curn</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</return>
    }</block></else></if>

}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>ways2</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>calcways2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>curn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>target</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>curn</name> <operator>==</operator> <name>target</name></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1LL</literal></expr>;</return>
    }</block></then><elseif>else <if>if<condition>(<expr><name><name>ways2</name><index>[<expr><name>curn</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><name><name>ways2</name><index>[<expr><name>curn</name></expr>]</index></name></expr>;</return>
    }</block></then></if></elseif><else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>from2</name><index>[<expr><name>curn</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>from2</name><index>[<expr><name>curn</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>+</operator> <call><name>calcways2</name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><name><name>ways2</name><index>[<expr><name>curn</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</return>
    }</block></else></if>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>dist1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INFLL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dist2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INFLL</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>minnum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mincnt</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>l</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g1</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g2</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>minnum</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>minnum</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>minnum</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mincnt</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>aux</name> <init>= <expr><name><name>minnum</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>aux</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>minnum</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mincnt</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then><elseif>else <if>if<condition>(<expr><name>aux</name> <operator>==</operator> <name>l</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>mincnt</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><call><name>dijkstra1</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dijkstra2</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ways1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ways1</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ways2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>ways2</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways1</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ways2</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>calcways1</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>calcways2</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>mindist</name> <init>= <expr><name><name>dist1</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>dist1</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>+</operator> <name><name>dist2</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>S</name></name></expr>]</index></name> <operator>+</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name> <operator>==</operator> <name>mindist</name></expr>)</condition><then>   <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>mincnt</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><operator>(</operator><name><name>ways1</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>*</operator> <name><name>ways2</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>S</name></name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name> <operator>==</operator> <name><name>ways1</name><index>[<expr><name>t</name></expr>]</index></name> <operator>and</operator> <name>cnt</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> 
                <comment type="line">//edges[i].F.F &lt;&lt; " "  &lt;&lt; edges[i].F.S &lt;&lt; " " &lt;&lt; ways1[edges[i].F.F] &lt;&lt; " " &lt;&lt; ways2[edges[i].F.S]  &lt;&lt; " " &lt;&lt; ways1[t] &lt;&lt; endl;</comment>
            }</block></then><elseif>else <if>if<condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN 1"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            }</block></then></if></elseif><else>else<block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then><elseif>else <if>if<condition>(<expr><name><name>dist1</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>+</operator> <name><name>dist2</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>S</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>mindist</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>dist1</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>+</operator> <name><name>dist2</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>S</name></name></expr>]</index></name> <operator>+</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name> <operator>&gt;</operator> <name>mindist</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"CAN "</literal> <operator>&lt;&lt;</operator> <name><name>dist1</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>F</name></name></expr>]</index></name> <operator>+</operator> <name><name>dist2</name><index>[<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>F</name><operator>.</operator><name>S</name></name></expr>]</index></name> <operator>+</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name> <operator>-</operator> <name>mindist</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then></if></elseif><else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"whhhattt"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
