<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12409447.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; i &lt; n; ++i)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>
<struct>struct <name>Edge</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
    <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_w</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>_x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>_y</name></expr></argument>)</argument_list></call>, <call><name>w</name><argument_list>(<argument><expr><name>_w</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_N</name> <init>= <expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX_M</name> <init>= <expr><name>MAX_N</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1e14</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>MAX_N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pnt</name><index>[<expr><name>MAX_M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nt</name><index>[<expr><name>MAX_M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>len</name><index>[<expr><name>MAX_M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>idx</name><index>[<expr><name>MAX_M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>addedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ww</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ii</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>pnt</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>to</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>len</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>ww</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>idx</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name>ii</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>nt</name><index>[<expr><name>ptr</name></expr>]</index></name> <operator>=</operator> <name><name>head</name><index>[<expr><name>from</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>head</name><index>[<expr><name>from</name></expr>]</index></name> <operator>=</operator> <name>ptr</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>head</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dijkstra</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>ok</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>point</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>point</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>point</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><name>from</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>point</name></type> <name>tp</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>dd</name> <init>= <expr><name><name>tp</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>tp</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>ok</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name><name>ok</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>nt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>pnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><name><name>ok</name><index>[<expr><name>to</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>res</name><index>[<expr><name>to</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>to</name></expr>]</index></name> <operator>=</operator> <name><name>res</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <name><name>len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>res</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>
    <return>return;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>visited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dfn</name></decl>, <decl><type ref="prev"/><name>low</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>tarjan</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fe</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>visited</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dfn</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>nt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>fe</name> <operator>==</operator> <name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>pnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>visited</name><index>[<expr><name>to</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>low</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <if>if <condition>(<expr><name>fe</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dfn</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <name><name>low</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>fe</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>wei</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>dis</name></decl>, <decl><type ref="prev"/><name>rdis</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wei</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>wei</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// forward path</comment>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>arr.size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>dis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&lt;</operator> <name>INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// backward path</comment>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>arr.size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>dijkstra</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>rdis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// find bridge</comment>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>arr.size()</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>dis</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>rdis</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name> <operator>+</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>==</operator> <name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addedge</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><call><name><name>visited</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>visited</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>visited</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dfn</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>low</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>tarjan</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// FOR(i, n) {</comment>
    <comment type="line">//     if (!visited[i]) {</comment>
    <comment type="line">//         tarjan(i, -1);</comment>
    <comment type="line">//     }</comment>
    <comment type="line">// }</comment>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>m</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name><name>dis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name><name>dis</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>rdis</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&gt;=</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"CAN %d\n"</literal></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>-</operator> <name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
