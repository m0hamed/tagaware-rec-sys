<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12540099.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctype.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;bitset&gt;</file></include>
<function><type><name>void</name></type> <name>fre</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"c://test//input.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"c://test//output.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<define>#<directive>define</directive> <macro><name>MS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>memset(x,y,sizeof(x))</value></define>
<define>#<directive>define</directive> <macro><name>MC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>memcpy(x,y,sizeof(x))</value></define>
<define>#<directive>define</directive> <macro><name>ls</name></macro> <value>o&lt;&lt;1</value></define>
<define>#<directive>define</directive> <macro><name>rs</name></macro> <value>o&lt;&lt;1|1</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UI</name>;</typedef>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>gmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>gmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>Z</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxint</name><init>=<expr><literal type="number">2147483647</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms31</name><init>=<expr><literal type="number">522133279</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms63</name><init>=<expr><literal type="number">1061109567</literal></expr></init></decl>,<decl><type ref="prev"/><name>ms127</name><init>=<expr><literal type="number">2139062143</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-8</literal></expr></init></decl>,<decl><type ref="prev"/><name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><comment type="line">//.0</comment>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>sot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>,<decl><type ref="prev"/><name>lt</name></decl>,<decl><type ref="prev"/><name>rt</name></decl>;</decl_stmt>
<struct>struct <name>A</name><block>{<public type="default"/>}</block>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sot</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sot</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>sot</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>num</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>sot</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>num</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>sot</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><comment type="line">//åæ.</comment>
			<block>{
				<if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>sot</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><comment type="line">//æ¬æ¥ä¸æ¯'.'æéè¦å¤ç</comment>
				<block>{
					<expr_stmt><expr><name>lt</name><operator>=</operator><name>rt</name><operator>=</operator><name>it</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>--</operator><name>lt</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>++</operator><name>rt</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>it</name><operator>-</operator><operator>*</operator><name>lt</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>-=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>rt</name><operator>-</operator><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>-=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>rt</name><operator>-</operator><operator>*</operator><name>lt</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
					<expr_stmt><expr><call><name><name>sot</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else>else<comment type="line">//åæé.</comment>
			<block>{
				<if>if<condition>(<expr><name>it</name><operator>==</operator><call><name><name>sot</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><comment type="line">//æ¬æ¥æ¯'.'æéè¦å¤ç</comment>
				<block>{
					<expr_stmt><expr><name>it</name><operator>=</operator><call><name><name>sot</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>.</operator><name>first</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>lt</name><operator>=</operator><name>rt</name><operator>=</operator><name>it</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>--</operator><name>lt</name></expr>;</expr_stmt>
					<expr_stmt><expr><operator>++</operator><name>rt</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>rt</name><operator>-</operator><operator>*</operator><name>lt</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>-=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>it</name><operator>-</operator><operator>*</operator><name>lt</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
					<expr_stmt><expr><name>num</name><operator>=</operator><operator>*</operator><name>rt</name><operator>-</operator><operator>*</operator><name>it</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name>num</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
				}</block></then></if>
			}</block></else></if>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
ãé¢æã
ç»å®ä¸ä¸ªå­ç¬¦ä¸²ï¼åå«.
æä»¬å¤å®ä¸ä¸ªå­ç¬¦ä¸²çvalue
æ¯çæå¤å°ä¸ª..
æ¯å¦...ï¼å°±æ2ä¸ªè¿ç»­ç..ï¼æä»¥å¶valå°±æ¯2

åæ¶æä»¬æmä¸ªæä½ï¼æä½æââ
ä½ç½®påå­ç¬¦c
æ¯ä¸ªæä½å¨ä¹åæä½çåºç¡ä¸ï¼æåä¸²çä½ç½®pçå­ç¬¦åæc
æ¯æ¬¡æä½ä¹åé®ä½ æ¹åä¹åçvalueæ¯å¤å°

ãç±»åã
set or å¹¶æ¥é oræ¾ç¹å¾è§å¾

ãåæã
æ¯èµæ¶æç¨äºset
ç»´æ¤ä¸ä¸ªä½ç½®å·¦è¾¹çæå¤å°.ï¼å³è¾¹æå¤å°ä¸ª.ï¼ç¶ååå¹¶xxxå°±ACäº

ãæ¶é´å¤æåº¦&amp;&amp;ä¼åã

ãtrickã

ãæ°æ®ã
Sample test(s)
input
10 3
.b..bz....
1 h
3 c
9 f
output
4
3
1

input
4 4
.cc.
2 .
3 .
2 a
1 a
output
1
3
1
1

*/</comment></unit>
