<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12526758.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int a=0;a&lt;n;++a)</value></define>
<define>#<directive>define</directive> <macro><name>P</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>cerr&lt;&lt;#a&lt;&lt;"="&lt;&lt;(a)&lt;&lt;endl;</value></define>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">300000</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>j</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>r</name><operator>+=</operator><name>j</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>r</name><operator>-=</operator> <operator>(</operator><name><name>i</name><operator>-&gt;</operator><name>second</name></name> <operator>-</operator> <name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>a</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><operator>++</operator><name>c</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>c</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>c</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

    <macro><name>REP</name><argument_list>(<argument>a</argument>,<argument>m</argument>)</argument_list></macro><block>{
        <comment type="line">//P(a);</comment>
        <comment type="line">//P(s);</comment>
        <comment type="line">//P(r);</comment>
        <comment type="line">//for(auto b:p){</comment>
        <comment type="line">//    P(b.first);</comment>
        <comment type="line">//    P(b.second);</comment>
        <comment type="line">//}</comment>
        

        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if<condition>(<expr><call><name><name>p</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>i</name><operator>=</operator><call><name><name>p</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt></block></then></if>


        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
            <macro><name>REP</name><argument_list>(<argument>q</argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name><operator>&lt;=</operator><name>x</name> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;</operator><name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>fir</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>sec</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break><empty_stmt>;</empty_stmt>
                }</block></then></if>
                <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
                   <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name><operator>&lt;</operator><name>x</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
                   <continue>continue;</continue>
                }</block></then></if>
            }</block>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>passed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>REP</name><argument_list>(<argument>q</argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro><block>{

               <if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal><operator>==</operator><name>x</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>passed</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>fir</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>sec</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                        <decl_stmt><decl><type><name>auto</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><operator>--</operator><name>j</name></expr>;</expr_stmt>
                        <if>if<condition>(<expr><name>fir</name><operator>-</operator><literal type="number">1</literal><operator>==</operator><name><name>j</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then><block>{
                            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>j</name><operator>-&gt;</operator><name>first</name></name></expr></argument>,<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then><else>else<block>{
                            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then><else>else<block>{
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                }</block></then></if>

                <if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>passed</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>fir</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>sec</name><init>=<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                        <decl_stmt><decl><type><name>auto</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
                        <if>if<condition>(<expr><name>sec</name><operator>==</operator><name><name>j</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><then><block>{
                            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name></expr></argument>,<argument><expr><name><name>j</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then><else>else<block>{
                            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name></expr></argument>,<argument><expr><name>sec</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></then><else>else<block>{
                        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>fir</name></expr></argument>,<argument><expr><name>sec</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>sub</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <break>break;</break>
                }</block></then></if>
                    
                <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><name><name>i</name><operator>-&gt;</operator><name>first</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><operator>--</operator><name>i</name></expr>;</expr_stmt>
                   <continue>continue;</continue>
                }</block></then></if>
                <if>if<condition>(<expr><name><name>i</name><operator>-&gt;</operator><name>second</name></name><operator>&lt;</operator><name>x</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><call><name><name>p</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
                   <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
                   <continue>continue;</continue>
                }</block></then></if>
            }</block>
            <if>if<condition>(<expr><operator>!</operator><name>passed</name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
