<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12514935.cpp"><comment type="line">//Language: MS C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;limits&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>mod</name></macro> <value>1000000007</value></define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>re</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">300003</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>input</name><parameter_list>()</parameter_list><block>{


}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>ri</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>ri</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></else></if>
		}</block></for>

		<expr_stmt><expr><name>re</name> <operator>+=</operator> <name>ri</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ri</name></expr>;</expr_stmt>

	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> 
			<operator>(</operator><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>pii</name></type> <name>nxt</name> <init>= <expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>nxt</name><operator>.</operator><name>first</name></name><operator>--</operator></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>nxt</name><operator>.</operator><name>second</name></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>auto</name></type> <name>le</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>le</name> <operator>!=</operator> <call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<expr_stmt><expr><name>le</name><operator>--</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>le</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>==</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>nxt</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>le</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>re</name> <operator>-=</operator> <name><operator>(</operator><operator>*</operator><name>le</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>le</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>

			<decl_stmt><decl><type><name>auto</name></type> <name>ri</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>ri</name> <operator>!=</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>ri</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>nxt</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ri</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>re</name> <operator>-=</operator> <name><operator>(</operator><operator>*</operator><name>ri</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>ri</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>

			<if>if <condition>(<expr><name><name>nxt</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>nxt</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>re</name> <operator>+=</operator> <name><name>nxt</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>nxt</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>==</operator> <name>a</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>re</name> <operator>-=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>pii</name></type> <name>nxt</name> <init>= <expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>nxt</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>nxt</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>re</name> <operator>+=</operator> <name><name>nxt</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>nxt</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				
			}</block></then>
			<elseif>else <if>if <condition>(<expr><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>it</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>&lt;=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>pii</name></type> <name>le</name> <init>= <expr><call><name>pii</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>pii</name></type> <name>ri</name> <init>= <expr><call><name>pii</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>re</name> <operator>-=</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>second</name></name> <operator>-</operator> <name><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr><name><name>le</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>le</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>re</name> <operator>+=</operator> <name><name>le</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>le</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
					<if>if <condition>(<expr><name><name>ri</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>ri</name><operator>.</operator><name>second</name></name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>re</name> <operator>+=</operator> <name><name>ri</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>ri</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>ri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if>
			}</block></then></if></elseif></if>
				
		}</block></else></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
<comment type="line">//	freopen("input.txt","r",stdin);</comment>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
