<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12522653.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl>  ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">300010</literal></expr>]</index></name></decl> ;</decl_stmt>
<struct>struct <name>node</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl> ;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lpoint</name></decl>,<decl><type ref="prev"/><name>rpoint</name></decl> ;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><literal type="number">300010</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr>]</index></name></decl> ;</struct>
<function><type><name>void</name></type> <name>Pushup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">//a[k].value=a[k&lt;&lt;1].value +a[k&lt;&lt;1|1].value ;</comment>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpoint</name></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rpoint</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rpoint</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator><name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>+</operator> <name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;a[k].value&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>rpoint</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>value</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>Build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>=</operator> <name>l</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>=</operator> <name>r</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr> )</condition><then><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rpoint</name>  <operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return ;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>Pushup</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//cout&lt;&lt;s[0]&lt;&lt;" "&lt;&lt;a[k].l&lt;&lt;" "&lt;&lt;a[k].r&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>==</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name> <operator>==</operator><name>pos</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator>  <literal type="number">0</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>=</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rpoint</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>lpoint</name> <operator>=</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rpoint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
        <return>return ;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>l</name><operator>+</operator><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>mid</name><operator>&gt;=</operator><name>pos</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>Insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>mid</name><operator>&lt;</operator> <name>pos</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>Insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>k</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><call><name>Pushup</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>Build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <comment type="block">/*for(int i=1;i&lt;n;i++){
            cout&lt;&lt;a[i].lpoint&lt;&lt;" "&lt;&lt;a[i].rpoint&lt;&lt;" "&lt;&lt;a[i].value&lt;&lt;endl;
        }*/</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl> ;</decl_stmt>
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <comment type="line">//printf("%c\n",c[0]) ;</comment>
            <comment type="line">//printf("%c",c[0]) ;</comment>
            <comment type="line">//printf(" %c\n",str[pos]);</comment>
            <if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>||</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal><operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>Insert</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
