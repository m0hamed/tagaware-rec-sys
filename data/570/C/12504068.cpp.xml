<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12504068.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>NMAX</name></macro> <value>300005</value></define>

<decl_stmt><decl><type><name>int</name></type> <name><name>St</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Dr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sol</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>mij</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>st</name><operator>==</operator><name>dr</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>St</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Dr</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sol</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <return>return ;</return>
    }</block></then></if>
    <expr_stmt><expr><name>mij</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>dr</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>poz</name><operator>&lt;=</operator><name>mij</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nod</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mij</name></expr></argument>,<argument><expr><name>poz</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nod</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mij</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>dr</name></expr></argument>,<argument><expr><name>poz</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <if>if<condition>(<expr><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>==</operator><name>mij</name><operator>-</operator><name>st</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>St</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>+</operator><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>St</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    <if>if<condition>(<expr><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>dr</name><operator>-</operator><name>mij</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>Dr</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>Dr</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    <if>if<condition>(<expr><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>==</operator><name>mij</name><operator>-</operator><name>st</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>dr</name><operator>-</operator><name>mij</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>==</operator><name>mij</name><operator>-</operator><name>st</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>sol</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>dr</name><operator>-</operator><name>mij</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>sol</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>sol</name><index>[<expr><name>nod</name></expr>]</index></name><operator>=</operator><name><name>sol</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>+</operator><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>+</operator><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name><name>St</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Dr</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator><operator>+</operator><name><name>sol</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>nod</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <comment type="line">//ifstream cin("code.in");</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><operator>(</operator><name>c</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>ch</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name><name>St</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>n</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>St</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name><name>St</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator><operator>+</operator><name><name>sol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>Dr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name><name>Dr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
