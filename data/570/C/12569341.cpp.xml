<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12569341.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>fst</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>snd</name></macro> <value>second</value></define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<define>#<directive>define</directive> <macro><name>oo</name></macro> <value>1000000000</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>for_tests</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>tt</name></type></parameter>)</parameter_list></macro> <value>int t; scanf("%d", &amp;t); for(int tt = 1; tt &lt;= t; tt++)</value></define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>?</condition><then> <expr><operator>-</operator><name>t</name></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr>;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ull</name></type> <name>modn</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ull</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>ull</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>%</operator> <name>modn</name></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">300005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr/>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
		<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</init> <condition><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>j</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pos</name><operator>--</operator></expr>;</expr_stmt>
		<comment type="line">//printf("No teste %d %c\n", pos, c);</comment>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>oo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ini</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>fst</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>fim</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>snd</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>ini</name> <operator>!=</operator> <name>fim</name></expr>)</condition><then> <block>{
				<if>if<condition>(<expr><name>ini</name> <operator>==</operator> <name>pos</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ini</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then>
				<elseif>else <if>if<condition>(<expr><name>fim</name> <operator>==</operator> <name>pos</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ini</name></expr></argument>, <argument><expr><name>fim</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></elseif>
				<else>else <block>{ <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ans</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>ini</name></expr></argument>, <argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fim</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
			}</block></then></if>	
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block>{
			<if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
			<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>it2</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>oo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>it2</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>pii</name></type> <name>p1</name> <init>= <expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>it2</name> <operator>==</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name><name>p1</name><operator>.</operator><name>snd</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>fst</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then>
				<else>else <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>pii</name></type> <name>p2</name> <init>= <expr><operator>*</operator><name>it2</name></expr></init></decl>;</decl_stmt>
				<comment type="line">//printf("[%d, %d] [%d, %d]\n", p1.fst, p1.snd, p2. fst, p2.snd);</comment>
				<if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name><name>p1</name><operator>.</operator><name>snd</name></name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>fst</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{ 
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>fst</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>.</operator><name>snd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name><name>p1</name><operator>.</operator><name>snd</name></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name><name>p1</name><operator>.</operator><name>fst</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name><name>p2</name><operator>.</operator><name>fst</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>p2</name><operator>.</operator><name>snd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if></elseif>
				<else>else <block>{ <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
			}</block></else></if>
		}</block></then></if></elseif></if>
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
