<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12510750.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;complex&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//macros</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>




<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>k</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int k=(a); k&lt;=(b); ++k)</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>k</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>for(int k=0; k&lt;(a);++k)</value></define>
<define>#<directive>define</directive> <macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>int((a).size())</value></define>
<define>#<directive>define</directive> <macro><name>ALL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>(c).begin(),(c).end()</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>99999999</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>queries</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>queries</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <literal type="string">"X"</literal> <operator>+</operator> <name>str</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>str</name> <operator>=</operator> <name>str</name> <operator>+</operator> <literal type="string">"X"</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>queries</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>groups</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>adj</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>ind</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>ind</name> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>ind</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<comment type="line">//cout &lt;&lt; groups &lt;&lt; " " &lt;&lt; adj &lt;&lt; endl;</comment>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>queries</argument>)</argument_list></macro><block>{
		<comment type="line">//cout &lt;&lt; groups &lt;&lt; " " &lt;&lt; adj &lt;&lt; endl;</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>


		<decl_stmt><decl><type><name>bool</name></type> <name>hasleft</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>,<decl><type ref="prev"/><name>hasright</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>pos</name><operator>!=</operator><name>left</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>hasleft</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>pos</name><operator>!=</operator><name>right</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>hasright</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
		<comment type="line">//cout &lt;&lt;"YO " &lt;&lt; i &lt;&lt; " " &lt;&lt; hasleft &lt;&lt; " " &lt;&lt; hasright &lt;&lt; endl;</comment>
		<decl_stmt><decl><type><name>char</name></type> <name>prevc</name> <init>= <expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>prevc</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{

			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>hasleft</name> <operator>&amp;&amp;</operator> <name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>groups</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>hasleft</name> <operator>&amp;&amp;</operator> <name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>hasleft</name> <operator>&amp;&amp;</operator> <name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>hasleft</name> <operator>&amp;&amp;</operator> <name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><operator>(</operator><name>hasleft</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal><operator>)</operator></expr>)</condition><then><block>{
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><operator>(</operator><name>hasleft</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>hasright</name> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal><operator>)</operator></expr>)</condition><then><block>{
					<expr_stmt><expr><name>adj</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>groups</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif></if>
			}</block></else></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>prevc</name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>hasleft</name> <operator>&amp;&amp;</operator> <name>hasright</name></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><name>groups</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></then>
					<elseif>else <if>if<condition>(<expr><operator>(</operator><name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal><operator>)</operator></expr>)</condition><then><block>{
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else<block>{
						<expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>hasleft</name></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>hasright</name></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><name>groups</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<expr_stmt><expr><name>adj</name><operator>++</operator></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if></elseif></if>
			}</block></then></if>
		}</block></then></if></elseif></if>
		<expr_stmt><expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
		<comment type="line">//groups and adj updated</comment>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>adj</name> <operator>-</operator> <name>groups</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block>
	<comment type="line">//cout &lt;&lt; groups &lt;&lt; " " &lt;&lt; adj &lt;&lt; endl;</comment>
}</block></function>

</unit>
