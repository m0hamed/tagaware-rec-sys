<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12510045.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/*
Name: Mahir Asef Kabir
AUST CSE 28th Batch
Problem Name: B. Simple Game (HACKED)
*/</comment>
<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>FORab</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for( __typeof(a)         i = (a);          i &lt;= (b);        ++i )</value></define>
<define>#<directive>define</directive> <macro><name>FORba</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for( __typeof(a)         i = (a);          i &gt;= (b);        --i )</value></define>
<define>#<directive>define</directive> <macro><name>forstl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>for( __typeof((s).end()) i = (s).begin (); i != (s).end (); i++ )</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>     <value>FORab(i,0,n-1)</value></define>
<define>#<directive>define</directive> <macro><name>II</name></macro>           <value>({int    a;scanf("%d",   &amp;a);a;})</value></define>
<define>#<directive>define</directive> <macro><name>IL</name></macro>           <value>({int64  a;scanf("%lld", &amp;a);a;})</value></define>
<define>#<directive>define</directive> <macro><name>ID</name></macro>           <value>({double a;scanf("%lf",  &amp;a);a;}</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>       <value>(a).begin(), (a).end()</value></define>
<define>#<directive>define</directive> <macro><name>MP</name></macro>           <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro>           <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro>          <value>1&lt;&lt;30</value></define>
<define>#<directive>define</directive> <macro><name>int64</name></macro>        <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>nl</name></macro>           <value>puts("")</value></define>
<define>#<directive>define</directive> <macro><name>vi</name></macro>           <value>vector&lt;int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro>          <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro>           <value>3.141592653589793</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro>          <value>2.718281828459045</value></define>
<define>#<directive>define</directive> <macro><name>memo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>    <value>memset(a,b,sizeof(a))</value></define>

<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>max</name> <parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>U</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>min</name> <parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>U</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>swap</name> <parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>U</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>T</name></type> <name>tmp</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt><expr_stmt><expr><name>b</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>gcd</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary><operator>)</operator></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>a</name> <operator>/</operator> <call><name><name>gcd</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name><operator>)</operator></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>X</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter>, <parameter><type><name>class</name></type> <name>Z</name></parameter> &gt;</parameter_list></template> <type><name>X</name></type> <name>BigMod</name><parameter_list>( <parameter><decl><type><name>X</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Y</name></type> <name>P</name></decl></parameter>, <parameter><decl><type><name>Z</name></type> <name>M</name></decl></parameter> )</parameter_list> <block>{
    <if>if<condition>( <expr><name>P</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>( <expr><name>P</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>B</name><operator>%</operator><name>M</name><operator>)</operator><operator>*</operator><call><name>BigMod</name><argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><name>P</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>X</name></type> <name>P2</name> <init>= <expr><call><name>BigMod</name><argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><name>P</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>P2</name><operator>*</operator><name>P2</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//freopen("input.txt", "r", stdin);</comment>
    <decl_stmt><decl><type><name>int64</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr> )</condition> <block>{
        <if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <if>if<condition>( <expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block>{
                <decl_stmt><decl><type><name>int64</name></type> <name>mid</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>( <expr><name>m</name> <operator>==</operator> <name>mid</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>( <expr><name>m</name> <operator>&lt;</operator> <name>mid</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>m</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>m</name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>int64</name></type> <name>mid1</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid2</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if<condition>( <expr><name>mid1</name> <operator>==</operator> <name>m</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mid2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>( <expr><name>mid2</name> <operator>==</operator> <name>m</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mid1</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block>{
                    <if>if<condition>( <expr><name>m</name> <operator>&lt;</operator> <name>mid1</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>m</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if<condition>( <expr><name>m</name> <operator>&gt;</operator> <name>mid2</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>m</name><operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if></elseif></if>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
