<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12519139.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>PI</name></macro>           <value>3.14159265358979323846264338327950</value></define>
<define>#<directive>define</directive> <macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>      <value>__gcd(a,b)</value></define>
<define>#<directive>define</directive> <macro><name>nl</name></macro>            <value>printf("\n")</value></define>
<define>#<directive>define</directive> <macro><name>spc</name></macro>           <value>printf(" ")</value></define>
<define>#<directive>define</directive> <macro><name>yes</name></macro>           <value>printf("YES\n")</value></define>
<define>#<directive>define</directive> <macro><name>no</name></macro>            <value>printf("NO\n")</value></define>
<define>#<directive>define</directive> <macro><name>si</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>         <value>scanf("%I64d",&amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>sii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro>      <value>scanf("%I64d %I64d",&amp;x,&amp;y)</value></define>
<define>#<directive>define</directive> <macro><name>siii</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></macro>   <value>scanf("%I64d %I64d %I64d",&amp;x,&amp;y,&amp;z)</value></define>
<define>#<directive>define</directive> <macro><name>sd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>         <value>scanf("%lf",&amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>sdd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>      <value>scanf("%lf %lf",&amp;a,&amp;b)</value></define>
<define>#<directive>define</directive> <macro><name>pi</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>         <value>printf("%I64d",x)</value></define>
<define>#<directive>define</directive> <macro><name>pin</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>        <value>printf("%I64d\n",x)</value></define>
<define>#<directive>define</directive> <macro><name>pis</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>        <value>printf("%I64d ",x)</value></define>
<define>#<directive>define</directive> <macro><name>pii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>      <value>printf("%I64d %I64d",a,b)</value></define>
<define>#<directive>define</directive> <macro><name>piii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro>   <value>printf("%I64d %I64d %I64d",a,b,c)</value></define>
<define>#<directive>define</directive> <macro><name>pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro>         <value>printf("%lf",a)</value></define>
<define>#<directive>define</directive> <macro><name>pdd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>      <value>printf("%lf %lf",a,b)</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro>            <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>iii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>    <value>for(long long i=a;i&lt;=n;i++)</value></define>
<define>#<directive>define</directive> <macro><name>jjj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>    <value>for(long long j=a;j&lt;=n;j++)</value></define>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>cs</name></decl>,<decl><type ref="prev"/><name>kk</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>o</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>s</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>s</name><operator>==</operator><name>b</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
          <elseif>else  <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name>s</name><operator>&lt;</operator><name>b</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>



</unit>
