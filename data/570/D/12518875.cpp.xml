<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12518875.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include> 

<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fs</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>sc</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(int)((x).size())</value></define> 
<define>#<directive>define</directive> <macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; (i) &lt; (n); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>fornr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i = (n) - 1; (i) &gt;= 0; --i)</value></define>
<define>#<directive>define</directive> <macro><name>forab</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for (int i = (a); (i) &lt; (b); ++i)</value></define>
<define>#<directive>define</directive> <macro><name>forba</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for (int i = (b) - 1; (i) &gt;= (a); --i)</value></define>
<define>#<directive>define</directive> <macro><name>forit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>for(__typeof((c).begin()) it = (c).begin(); it != (c).end(); ++it)</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>(c).begin(),(c).end()</value></define> 

<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>
    <define>#<directive>define</directive> <macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></macro> <value>fprintf(stderr, __VA_ARGS__)</value></define>
<else>#<directive>else</directive></else>
    <define>#<directive>define</directive> <macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></macro> <value>static_cast&lt;void&gt;(0)</value></define>   
<endif>#<directive>endif</directive></endif>

<ifdef>#<directive>ifdef</directive> <name>_WIN32</name></ifdef>
    <define>#<directive>define</directive> <macro><name>I64</name></macro> <value>"%I64d"</value></define>
<else>#<directive>else</directive></else>
    <define>#<directive>define</directive> <macro><name>I64</name></macro> <value>"%lld"</value></define>
<endif>#<directive>endif</directive></endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>LD</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<define>#<directive>define</directive> <macro><name>FNAME</name></macro> <value>""</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">5e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>used</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tin</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>tout</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>h</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>maxx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>sum</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name><name>lst</name><index>[<expr><name>MAXN</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>g</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>timer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>height</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lst</name><index>[<expr><name><name>h</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>timer</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
<ifdef>#<directive>ifdef</directive> <name>LOCAL</name></ifdef>    
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>FNAME</name><literal type="string">".in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>FNAME</name><literal type="string">".out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<endif>#<directive>endif</directive></endif>    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>forn</name> <argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> 
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                         
    <macro><name>forab</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>maxx + <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><call><name>sz</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>forn</name> <argument_list>(<argument>j</argument>, <argument>sz(lst[i])</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><macro><name>forn</name> <argument_list>(<argument>g</argument>, <argument><literal type="number">26</literal></argument>)</argument_list></macro>
                    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt></block></then></if> 
            <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>^</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block>
    }</block>
    <macro><name>forn</name> <argument_list>(<argument>qq</argument>, <argument>q</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>hi</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hi</name> <operator>&gt;</operator> <name>maxx</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>hi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>tin</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>lst</name><index>[<expr><name>hi</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>hi</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>tout</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>lst</name><index>[<expr><name>hi</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>l</name><operator>--</operator></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>forn</name> <argument_list>(<argument>g</argument>, <argument><literal type="number">26</literal></argument>)</argument_list></macro>
        <block>{
            <if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else   
                <block type="pseudo"><expr_stmt><expr><name>sum1</name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>hi</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>sum2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else   
                <block type="pseudo"><expr_stmt><expr><name>sum2</name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>hi</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><operator>(</operator><name>sum1</name> <operator>^</operator> <name>sum2</name><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block>
        <if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
