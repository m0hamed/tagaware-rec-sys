<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12574513.cpp"><comment type="line">//Language: GNU C++11</comment>


<pragma>#<directive>pragma</directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <literal>"/STACK:1024000000,1024000000"</literal><name>)</name></pragma>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;stdlib.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;limits.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;time.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>  
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>  
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>rd</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sgn</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>sgn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>sgn</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>pt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt> }</block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>pt</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">5e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<struct>struct <name>BIT</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>maxn</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>maxn</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>c</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><specifier>inline</specifier> <type><name>int</name></type> <name>Lowbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name><operator>&amp;</operator><operator>(</operator><operator>-</operator><name>x</name><operator>)</operator></expr>;</return> }</block></function>
    <function><type><name>void</name></type> <name>change</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><comment type="line">//iç¹å¢éä¸ºx</comment>
    <block>{
        <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>maxn</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>Lowbit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></function>
    <function><type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<comment type="line">//åºé´æ±å [1,x]</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <call><name>Lowbit</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>sum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sum</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return> 
    }</block></function>
</public>}</block><decl><name><name>t</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>G</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>D</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name><name>query</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dep</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>D</name><index>[<expr><name>dep</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>l</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>top</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>fa</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>dep</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>top</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>ans</name> <operator>+</operator> <name>m</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>u</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>query</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name><name>s</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>change</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        
        <for>for <control>(<init><decl><type><name>pii</name></type> <name>Q</name> <range>: <expr><name><name>query</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>ou</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name><name>Q</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name><name>Q</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ou</name> <operator>+=</operator> <name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name><name>Q</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name><name>Q</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name><name>Q</name><operator>.</operator><name>second</name></name></expr>]</index></name> <operator>=</operator> <name>ou</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name><name>s</name><index>[<expr><name>v</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>change</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
