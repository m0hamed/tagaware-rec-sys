<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12549101.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/*
 * This is my code,
 * my code is amazing...
 */</comment>
<comment type="line">//Template v2.0</comment>
<comment type="line">//iostream is too mainstream</comment>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;unordered_map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;unordered_set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<comment type="line">//clibraries</comment>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctime&gt;</file></include>
<comment type="line">//defines</comment>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>int</value></define>
<define>#<directive>define</directive> <macro><name>lld</name></macro> <value>long double</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt;ll,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pld</name></macro> <value>pair&lt;lld,lld&gt;</value></define>
<define>#<directive>define</directive> <macro><name>vll</name></macro> <value>vector&lt;ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>vvll</name></macro> <value>vector&lt;vll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1000000000000000047</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>en</name><init>=<expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<define>#<directive>define</directive> <macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro><value>{cerr&lt;&lt;x&lt;&lt;en;}</value></define>
<define>#<directive>define</directive> <macro><name>prime</name></macro> <value>47</value></define>
<define>#<directive>define</directive> <macro><name>lprime</name></macro> <value>1000000000000000009</value></define>
<define>#<directive>define</directive> <macro><name>lldmin</name></macro> <value>LDBL_MIN</value></define>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>vvll</name></type> <name>V</name><argument_list>(<argument><expr><literal type="number">600000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vll</name></type> <name>ZZ</name><argument_list>(<argument><expr><literal type="number">600000</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type><name>R</name><argument_list>(<argument><expr><literal type="number">600000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>Z</name><argument_list>(<argument><expr><literal type="number">600000</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>X</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>X</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>X</name><operator>=</operator><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name>X</name><operator>^=</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>X</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{

    <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>ZZ</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pp</name><init>=<expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>V</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>V</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>f</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>pp</name><operator>=</operator><call><name>init</name><argument_list>(<argument><expr><name><name>V</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>pp</name></expr></argument>,<argument><expr><name>h</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>R</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><call><name>MP</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pp</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>bs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>z</name><operator>&lt;</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>z</name><operator>+</operator><name>k</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>&lt;</operator><name>p</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>z</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>k</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><name>z</name></expr>;</return>
}</block></function>





<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>V</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>c</name><operator>-=</operator><literal type="char">'a'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ZZ</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
        }</block></for>

        <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
        for(int i=1; i&lt;=n; i++)
            cout&lt;&lt;R[i].ff&lt;&lt;" "&lt;&lt;R[i].ss&lt;&lt;en;
*/</comment>
        <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>v</name><operator>&gt;&gt;</operator><name>h</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name><name>R</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ff</name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name><name>R</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>ss</name></expr></init></decl>;</decl_stmt>
            
            <comment type="line">//auto it=Z[h].lower_bound(b);</comment>
            <comment type="line">//it--;</comment>
            <decl_stmt><decl><type><name>ll</name></type> <name>x2</name><init>=<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><call><name>bs</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>ss</name></expr></init></decl>;</decl_stmt>
            <comment type="line">//it=Z[h].lower_bound(a);</comment>
            <comment type="line">//it--;</comment>
            <decl_stmt><decl><type><name>ll</name></type> <name>x1</name><init>=<expr><name><name>Z</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><call><name>bs</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>ss</name></expr></init></decl>;</decl_stmt>
            
            <decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name>x2</name><operator>^</operator><name>x1</name></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>x</name></expr>)</condition><block>{
                <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            }</block></while>
            <if>if<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></while>


}</block></function>
</unit>
