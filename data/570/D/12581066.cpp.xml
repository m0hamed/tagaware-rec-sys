<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12581066.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include> 

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>md</name></macro> <value>1000000007LL</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>0.000000000001</value></define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>h</name><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out</name><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>time</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list> 
<block>{
    <expr_stmt><expr><name>time</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name><index>[<expr><name>level</name></expr>]</index></name><operator>.</operator><call><name>emplace_back</name><argument_list>(<argument><expr><name>time</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>a</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>time</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>out</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>time</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl></parameter>)</parameter_list> 
<block>{
   <return>return <expr><name><name>f</name><operator>.</operator><name>first</name></name> <operator>&lt;</operator> <name><name>s</name><operator>.</operator><name>first</name></name></expr>;</return> 
}</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>letters</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">500001</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fill_letters</name><parameter_list>()</parameter_list> 
<block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">500001</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>letter</name> <init>= <expr><name><name>buf</name><index>[<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>letters</name><index>[<expr><name>letter</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
            <block>{
                <expr_stmt><expr><name><name>letters</name><index>[<expr><name>letter</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name><name>letters</name><index>[<expr><name>letter</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>z</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>z</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>letters</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>z</name><operator>++</operator></expr></incr>)</control> 
            <block>{
                <expr_stmt><expr><name><name>letters</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>z</name></expr>]</index></name> <operator>+=</operator> <name><name>letters</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>z</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>

        }</block></for>
    }</block></for>

}</block></function>

<function><type><name>bool</name></type> <name>getans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//    cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; endl;</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <comment type="block">/*
        printf("%c : ", i + 'a');
        for (int j = 0; j &lt; (int)letters[i][h].size(); j++) 
        {
            cout &lt;&lt; letters[i][h][j] &lt;&lt; " ";
        }
        cout &lt;&lt; endl;
       */</comment>
        <if>if <condition>(<expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
        <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name><name>letters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name><name>letters</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name>k</name> <operator>+=</operator> <name>ans</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</return>
}</block></function>




<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef> 
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <endif>#<directive>endif</directive></endif> <comment type="line">//DEBUG</comment>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fill_letters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name><name>in</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>out</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>lo</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>hi</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>hi</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>hi</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        
        <if>if <condition>(<expr><operator>!</operator><name><name>h</name><index>[<expr><name>d</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>getans</name><argument_list>(<argument><expr><name>lo</name></expr></argument>, <argument><expr><name>hi</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then> 
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else 
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>


    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Execution time = %.4lfsec"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
