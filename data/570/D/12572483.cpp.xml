<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12572483.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>G</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dep</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>DEP</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">26</literal></expr></argument>&gt;</argument_list></name></type> <name><name>CNT</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>in</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>out</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>idx</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dep</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DEP</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>G</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>u</name> <init>= <expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>cnt</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>CNT</name><index>[<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>CNT</name><index>[<expr><name>prev</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>CNT</name><index>[<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>arr</name><index>[<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>=</operator> <name><name>CNT</name><index>[<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>arr</name><index>[<expr><name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>DEP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>s</name> <operator>+</operator> <name>t</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>in</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>s</name> <operator>=</operator> <name>k</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>t</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name>s</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>DEP</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>s</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>s</name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>(</operator><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <name><name>in</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>out</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>out</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>in</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>s</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>t</name> <operator>=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">26</literal></expr></argument>&gt;</argument_list></name></type> <name>licz</name> <init>= <expr><name><name>CNT</name><index>[<expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>end</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        
        <if>if<condition>(<expr><name>start</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>licz</name> <operator>^=</operator> <name><name>CNT</name><index>[<expr><name><name>DEP</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>start</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        
        <decl_stmt><decl><type><name>int</name></type> <name>siz</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>np</name> <operator>+=</operator> <name><name>licz</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>siz</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>np</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    
}</block></function></unit>
