<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12523321.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">500000</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>edges</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>depth</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>shifts</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ed</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rd</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>flag</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>Querier</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Querier</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>queries</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>rd</name><index>[<expr><name>tim</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>st</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>tim</name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shifts</name><index>[<expr><name><name>depth</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>st</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>edges</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name><name>depth</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>depth</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>ed</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>tim</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name><name>answer</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator> <name>c</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>flag</name><index>[<expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator> <name>j</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator> <name>c</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>flag</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name><name>flag</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>flag</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>str</name><index>[<expr><name><name>rd</name><index>[<expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>q</name> <range>: <expr><name><name>queries</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>st</name><index>[<expr><name><name>q</name><operator>.</operator><name>v</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>ed</name><index>[<expr><name><name>q</name><operator>.</operator><name>v</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>shifts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><operator>++</operator> <name>c</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name><name>flag</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>^</operator> <name><name>flag</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            }</block></for>
            <expr_stmt><expr><name><name>answer</name><index>[<expr><name><name>q</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <name>cnt</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v</name> <operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>queries</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"Yes"</literal></expr> </then><else>: <expr><literal type="string">"No"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
</unit>
