<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12517556.cpp"><comment type="line">//Language: GNU C++11</comment>


<pragma>#<directive>pragma</directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <literal>"/STACK:102400000,102400000"</literal><name>)</name></pragma>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<define>#<directive>define</directive> <macro><name>N</name></macro> <value>500010</value></define>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>Edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>N</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>numedge</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>build_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>++</operator><name>numedge</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>edge</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>from</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>edge</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>edge</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>vto1</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vto2</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name><name>maxto</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dep</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>maxdep</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>d</name><index>[<expr><name><name>dep</name><index>[<expr><name>now</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>maxto</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>maxdep</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <name><name>dep</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dep</name><index>[<expr><name>to</name></expr>]</index></name> <operator>=</operator> <name><name>dep</name><index>[<expr><name>now</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>maxto</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>maxto</name><index>[<expr><name>now</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxto</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>maxdep</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>maxdep</name><index>[<expr><name>now</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>maxdep</name><index>[<expr><name>to</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pre</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen("/Users/peteryuanpan/data.txt","r",stdin);</comment>
    
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>head</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>build_edge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vto1</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>t</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>
    
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>v</name><index>[<expr><name><name>vto1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>im</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>im</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>im</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>h</name> <argument_list type="generic">&lt; <argument><expr><name><name>dep</name><index>[<expr><name>v</name></expr>]</index></name> <operator>||</operator> <name>h</name></expr></argument> &gt;</argument_list></name> <name><name>maxdep</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name><name>d</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>vto2</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>maxto</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&lt;</operator> <name><name>vto2</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            }</block></while>
            <expr_stmt><expr><name>from</name> <operator>=</operator> <name><name>vto1</name><index>[<expr><name><name>d</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>d</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mid</name> <operator>++</operator></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><name><name>d</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>vto2</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>maxto</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>vto2</name><index>[<expr><name>now</name></expr>]</index></name> <operator>&lt;</operator> <name><name>vto2</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
            }</block></while>
            <expr_stmt><expr><name>to</name> <operator>=</operator> <name><name>vto1</name><index>[<expr><name><name>d</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>int</name></type> <name>nodd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>pre</name><index>[<expr><name>to</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pre</name><index>[<expr><name>from</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>t</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nodd</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>nodd</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            }</block></for>
            <if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>nodd</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>to</name> <operator>-</operator> <name>from</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nodd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
