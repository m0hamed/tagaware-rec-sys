<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12532581.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>maxN</name></macro> <value>500005</value></define>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>eh</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>table</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>pix</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>in</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>out</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>val</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="line">//for(int i=1;i&lt;=N;i++) eh[i].clear();</comment>
    <comment type="line">//for(int i=1;i&lt;=N;i++) table[i].clear();</comment>
    <comment type="line">//for(int i=1;i&lt;=N;i++) pix[i].clear();</comment>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>index</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>table</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fsize</name> <init>= <expr><name><name>pix</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>fsize</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>pix</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>val</name><index>[<expr><name>u</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else  <block type="pseudo"><expr_stmt><expr><name><name>pix</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>val</name><index>[<expr><name>u</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal><operator>)</operator><operator>)</operator><operator>^</operator><name><name>pix</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>fsize</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>eh</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>eh</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>f</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>index</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>isleft</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>out</name><index>[<expr><name>b</name></expr>]</index></name><operator>&lt;</operator><name><name>in</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>isright</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>in</name><index>[<expr><name>b</name></expr>]</index></name><operator>&gt;</operator><name><name>out</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>h</name><operator>&lt;=</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>high</name><init>=<expr><name><name>table</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>high</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <while>while<condition>(<expr><name>low</name><operator>&lt;</operator><name>high</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>table</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>isleft</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><call><name>isright</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>low</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>in</name><index>[<expr><name><name>table</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>out</name><index>[<expr><name><name>table</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name><operator>&lt;</operator><name><name>out</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>low</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator><expr><name>high</name> <operator>=</operator> <name><name>table</name><index>[<expr><name>h</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>low</name><operator>&lt;</operator><name>high</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name><operator>+</operator><name>high</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>table</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>mid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>isleft</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><call><name>isright</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>high</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>odd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><ternary><condition><expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name><name>pix</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></then><else>:<expr><name><name>pix</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>^</operator><name><name>pix</name><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>res</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>res</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>odd</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>res</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>odd</name><operator>&lt;</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("data.txt","r",stdin);</comment>
    <comment type="line">//freopen("ans.txt","w",stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>pa</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>pa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>eh</name><index>[<expr><name>pa</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>val</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>M</name><operator>--</operator></expr>)</condition>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><call><name>solve</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></while>
    }</block></while>
}</block></function>
</unit>
