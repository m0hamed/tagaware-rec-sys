<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12538180.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>

<define>#<directive>define</directive> <macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>for (int i=x;i&lt;y;i++)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>IN</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while><expr_stmt><expr><name>x</name><operator>=</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></while><return>return <expr><name>x</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">500</literal><operator>+</operator><literal type="number">19</literal></expr></init></decl>,<decl><type ref="prev"/><name>P</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>T</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>,<decl><type ref="prev"/><name>Ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name>x1</name><operator>&lt;=</operator><name>x2</name><operator>&amp;&amp;</operator><name>y1</name><operator>&lt;=</operator><name>y2</name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>IN</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>m</name><operator>=</operator><call><name>IN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>T</name><operator>=</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>T</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>c</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>For</name><argument_list>(<argument>x1</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>For</name><argument_list>(<argument>x2</argument>,<argument>x1</argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>y1</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>y2</name><init>=<expr><name>m</name><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>x2</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>tmp</name><operator>=</operator><name><name>f</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name>tmp</name><operator>)</operator><operator>%=</operator><name>P</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>+=</operator><name>tmp</name><operator>)</operator><operator>%=</operator><name>P</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name>tmp</name><operator>)</operator><operator>%=</operator><name>P</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><call><name>Check</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>+=</operator><name>tmp</name><operator>)</operator><operator>%=</operator><name>P</name></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block>
	}</block>
	<macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><call><name>For</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>Ans</name><operator>+=</operator><name><name>f</name><index>[<expr><name>c</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>%=</operator><name>P</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>Ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
