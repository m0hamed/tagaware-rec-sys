<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12533770.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block" format="doxygen">/***************************************
    codeforces = topcoder = sahedsohel
    IIT,Jahangirnagar University(42)
****************************************/</comment>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long int</value></define>
<define>#<directive>define</directive> <macro><name>ull</name></macro> <value>unsigned long long int</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>(INT_MAX/10)</value></define>
<define>#<directive>define</directive> <macro><name>linf</name></macro> <value>(LLONG_MAX/10LL)</value></define>
<define>#<directive>define</directive> <macro><name>sc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>sc2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d",&amp;a,&amp;b)</value></define>
<define>#<directive>define</directive> <macro><name>sc3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d%d",&amp;a,&amp;b,&amp;c)</value></define>
<define>#<directive>define</directive> <macro><name>sc4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d%d%d",&amp;a,&amp;b,&amp;c,&amp;d)</value></define>
<define>#<directive>define</directive> <macro><name>fl</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(i=c;i&lt;n;i++)</value></define>
<define>#<directive>define</directive> <macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(i=0;i&lt;n;i++)</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>memn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,-1,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>pp</name></macro> <value>pop_back()</value></define>
<define>#<directive>define</directive> <macro><name>aov</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(),a.end()</value></define>
<define>#<directive>define</directive> <macro><name>mpr</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>(2.0*acos(0.0))</value></define> <comment type="line">//#define PI acos(-1.0)</comment>
<define>#<directive>define</directive> <macro><name>xx</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>yy</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>mxv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>*max_element(aov(a))</value></define>
<define>#<directive>define</directive> <macro><name>mnv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>*min_element(aov(a))</value></define>
<define>#<directive>define</directive> <macro><name>LB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(lower_bound(aov(a),x)-a.begin())</value></define>
<define>#<directive>define</directive> <macro><name>UB</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(upper_bound(aov(a),x)-a.begin())</value></define>
<define>#<directive>define</directive> <macro><name>to_c_string</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.c_str()</value></define>
<define>#<directive>define</directive> <macro><name>strtoint</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>atoi(&amp;c[0])</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt; int , int &gt;</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt; ll , ll &gt;</value></define>
<define>#<directive>define</directive> <macro><name>pcs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>printf("Case %d: ", a)</value></define>
<comment type="line">//#define nl puts("")</comment>
<define>#<directive>define</directive> <macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;endl</value></define>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init> <condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>p</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>}</block></for><return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>ret</name></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>modinverse</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>M</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>   <comment type="line">// M is prime}</comment>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>bpow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init>;</init> <condition><expr><name>e</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>e</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>e</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>*</operator> <name>p</name><operator>)</operator></expr>;</expr_stmt>}</block></for><return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>ret</name></expr>;</return>}</block></function>

<function><type><name>int</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>sm</name></decl>;</decl_stmt><decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name>ss</name><operator>&gt;&gt;</operator><name>sm</name></expr>;</expr_stmt><return>return <expr><name>sm</name></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>toLlint</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>sm</name></decl>;</decl_stmt><decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name>ss</name><operator>&gt;&gt;</operator><name>sm</name></expr>;</expr_stmt><return>return <expr><name>sm</name></expr>;</return>}</block></function>


<comment type="line" format="doxygen">///int mnth[]={-1,31,28,31,30,31,30,31,31,30,31,30,31};  //Not Leap Year</comment>
<comment type="line" format="doxygen">///int dx[]={1,1,0,-1,-1,-1,0,1};int dy[]={0,1,1,1,0,-1,-1,-1};//8 direction</comment>
<comment type="line" format="doxygen">///int dx[]={2,1,-1,-2,-2,-1,1,2};int dy[]={1,2,2,1,-1,-2,-2,-1};//Knight Direction</comment>
<comment type="line" format="doxygen">///int dx[]={-1,-1,+0,+1,+1,+0};int dy[]={-1,+1,+2,+1,-1,-2}; //Hexagonal Direction</comment>
<comment type="line" format="doxygen">///const double eps=1e-6;</comment>
<comment type="line" format="doxygen">///int dx[]={0,1,0,-1};int dy[]={1,0,-1,0}; //4 Direction</comment>

<comment type="block" format="doxygen">/*****************************************************************/</comment>
<comment type="line" format="doxygen">/// ////////////////////   GET SET GO    ////////////////////// ///</comment>
<comment type="block" format="doxygen">/*****************************************************************/</comment>

<define>#<directive>define</directive> <macro><name>M</name></macro> <value>300005</value></define>
<define>#<directive>define</directive> <macro><name>MD</name></macro> <value>1000000007LL</value></define>
<define>#<directive>define</directive> <macro><name>MX</name></macro> <value>2000012LL</value></define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">501</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ls</name><index>[<expr><literal type="number">501</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><literal type="number">125252</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>u</name><operator>==</operator><name>x</name><operator>&amp;&amp;</operator><name>v</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>||</operator><name>u</name><operator>&gt;</operator><name>x</name><operator>||</operator><name>v</name><operator>&gt;</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0LL</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>(</operator> <name>u</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>x</name><operator>&amp;&amp;</operator><name>v</name><operator>==</operator><name>y</name> <operator>)</operator><operator>||</operator><operator>(</operator> <name>u</name><operator>==</operator><name>x</name><operator>&amp;&amp;</operator><name>v</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>y</name> <operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>ls</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>q</name><operator>=</operator><name><name>ls</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>q</name><operator>=</operator><name><name>ls</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>cs</name><operator>++</operator></expr>;</expr_stmt></block></else></if>

    <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>pr</name><init>=<expr><name><name>p</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>pr</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>pr</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>pr</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>u</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>&gt;=</operator><name>MD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>pr</name><operator>-=</operator><name>MD</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>pr</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>u</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>&gt;=</operator><name>MD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>pr</name><operator>-=</operator><name>MD</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>pr</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>&gt;=</operator><name>MD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>pr</name><operator>-=</operator><name>MD</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>pr</name><operator>+=</operator><call><name>dp</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>&gt;=</operator><name>MD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>pr</name><operator>-=</operator><name>MD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name><name>p</name><index>[<expr><name>q</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>pr</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cs</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sc2</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>f</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
