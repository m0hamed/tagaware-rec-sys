<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12524577.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i = 0;i &lt; n;i ++)</value></define>
<define>#<directive>define</directive> <macro><name>repe</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=1;i&lt;=n;i++)</value></define>
<define>#<directive>define</directive> <macro><name>mst</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></macro> <value>memset(A,k,sizeof(A))</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>maze</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add_mod</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ll</name><modifier>&amp;</modifier></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>m</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>maze</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>up</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>down</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <name>up</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>mst</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>up</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init> <condition>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name>down</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name> <operator>&lt;</operator> <name>up</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<if>if<condition>(<expr><name><name>maze</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>up</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>maze</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>down</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>down</name> <operator>-</operator> <name>up</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>-</operator> <name>i</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>r</name><operator>&lt;</operator><name>up</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cnt</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mst</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>up</name> <operator>-</operator> <name>r</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>down</name> <operator>+</operator> <name>r</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>a</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>b</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>maze</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>maze</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>add_mod</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_mod</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_mod</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>cnt</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<if>if<condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add_mod</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal><operator>-</operator><name>cnt</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then></if></block></for>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
