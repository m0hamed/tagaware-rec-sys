<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12549270.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fi</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>se</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>_i</name></type></parameter>,<parameter><type><name>_j</name></type></parameter>,<parameter><type><name>_k</name></type></parameter>)</parameter_list></macro> <value>for(int _i = _j; _i &lt; _k ; _i++)</value></define>
<define>#<directive>define</directive> <macro><name>REPS</name><parameter_list>(<parameter><type><name>_i</name></type></parameter>,<parameter><type><name>_j</name></type></parameter>,<parameter><type><name>_k</name></type></parameter>)</parameter_list></macro> <value>for(int _i = _j; _i &lt;= _k ; _i++)</value></define>
<define>#<directive>define</directive> <macro><name>REPD</name><parameter_list>(<parameter><type><name>_i</name></type></parameter>,<parameter><type><name>_j</name></type></parameter>,<parameter><type><name>_k</name></type></parameter>)</parameter_list></macro> <value>for(int _i = _k ; _i &gt;= _j ; _i--)</value></define>
<define>#<directive>define</directive> <macro><name>line</name></macro> <value>puts("")</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>ull</name></macro> <value>unsigned long long</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>move</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>st</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">251</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ngedp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>px1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>px2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rem</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>py1</name> <init>= <expr><operator>(</operator><name>move</name> <operator>-</operator> <name>rem</name> <operator>-</operator> <name>px1</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>py2</name> <init>=  <expr><name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>px2</name> <operator>-</operator> <name>move</name> <operator>+</operator> <name>rem</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>px1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>px1</name> <operator>&gt;=</operator> <name>n</name> <operator>||</operator> <name>py1</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>py1</name> <operator>&gt;=</operator> <name>m</name> <operator>||</operator> <name>px2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>px2</name> <operator>&gt;=</operator> <name>n</name> <operator>||</operator> <name>py2</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>py2</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>dp</name><index>[<expr><name>px1</name></expr>]</index><index>[<expr><name>px2</name></expr>]</index><index>[<expr><name>rem</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>px1</name> <operator>&gt;</operator> <name>px2</name> <operator>||</operator> <name>py1</name> <operator>&gt;</operator> <name>py2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>st</name><index>[<expr><name>px1</name></expr>]</index><index>[<expr><name>py1</name></expr>]</index></name> <operator>!=</operator> <name><name>st</name><index>[<expr><name>px2</name></expr>]</index><index>[<expr><name>py2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>px1</name> <operator>==</operator> <name>px2</name> <operator>&amp;&amp;</operator> <name>py1</name> <operator>==</operator> <name>py2</name> <operator>&amp;&amp;</operator> <name><name>st</name><index>[<expr><name>px1</name></expr>]</index><index>[<expr><name>py1</name></expr>]</index></name> <operator>==</operator> <name><name>st</name><index>[<expr><name>px2</name></expr>]</index><index>[<expr><name>py2</name></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><return>return <expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>px1</name> <operator>-</operator> <name>px2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>py1</name> <operator>==</operator> <name>py2</name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>py1</name> <operator>-</operator> <name>py2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>px1</name> <operator>==</operator> <name>px2</name><operator>)</operator><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>ans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>ngedp</name><argument_list>(<argument><expr><name>px1</name></expr></argument>, <argument><expr><name>px2</name></expr></argument>, <argument><expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>ngedp</name><argument_list>(<argument><expr><name>px1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>px2</name></expr></argument>, <argument><expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>ngedp</name><argument_list>(<argument><expr><name>px1</name></expr></argument>, <argument><expr><name>px2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>ngedp</name><argument_list>(<argument><expr><name>px1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>px2</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rem</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>move</name> <operator>=</operator> <operator>(</operator><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>move</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>move</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>move</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name>ngedp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>move</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
