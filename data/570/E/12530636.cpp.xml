<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12530636.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">508</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>d</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>tmp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>ok</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>x1</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>y1</name><operator>&lt;</operator><name>m</name> <operator>&amp;&amp;</operator> <name>x2</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y2</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>g</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>==</operator> <name><name>g</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter> ,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name><operator>&gt;=</operator><name>MOD</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>input</name><parameter_list>()</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if <condition>(<expr><name><name>g</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name><name>g</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return ;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>step</name> <operator>&lt;</operator> <name>s</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>step</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>x0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x0</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>step</name> <operator>-</operator> <name>x0</name> <operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>x0</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name>step</name> <operator>-</operator> <name>x0</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x1</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>s</name> <operator>-</operator> <name>step</name> <operator>-</operator> <name>x1</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition><incr><expr><name>x1</name><operator>++</operator></expr></incr>)</control><block>{
                
                <decl_stmt><decl><type><name>int</name></type> <name>y1</name> <init>= <expr><name>s</name> <operator>-</operator> <name>step</name> <operator>-</operator> <name>x1</name></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x0</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x0</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x0</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y0</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x0</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr><call><name>ok</name><argument_list>(<argument><expr><name>x0</name></expr></argument>,<argument><expr><name>y0</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>tmp</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>x0</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">500</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">500</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></for></block></for>
    }</block></for>
    <if>if <condition>(<expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>s</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s</name><operator>-</operator><name>i</name></expr>]</index></name><operator>==</operator><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>s</name><operator>-</operator><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>g</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>s</name><operator>-</operator><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen("1.txt","r",stdin);</comment>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call><operator>!=</operator><name>EOF</name></expr>)</condition><block>{
        <expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
