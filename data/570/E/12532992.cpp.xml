<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12532992.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;complex&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>file</name></macro> <value>"file"</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>xx</name></macro> <value>real()</value></define>
<define>#<directive>define</directive> <macro><name>yy</name></macro> <value>imag()</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>point</name>;</typedef>

<define>#<directive>define</directive> <macro><name>DEBUG</name></macro> <value>0</value></define>
<define>#<directive>define</directive> <macro><name>dout</name></macro> <value>if(DEBUG) cout</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">500</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>pt</name><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>pt</name><index>[<expr><name>top</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>pt</name><index>[<expr><name>top</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>top</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>^=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>l</name><operator>++</operator></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>fy</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>fx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>fy</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><name><name>pt</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>sy</name> <init>= <expr><name><name>pt</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name>y</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>sx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>sy</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><operator>!</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>sx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>]</index></name></expr></argument>,
                                                                    <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if<condition>(<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>sy</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,
                                                                    <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if<condition>(<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>sx</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>]</index></name></expr></argument>,
                                                                    <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <if>if<condition>(<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name>sy</name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>fx</name></expr>]</index><index>[<expr><name>fy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>,
                                                                    <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>m</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
    }</block></then>
    <else>else<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>pt</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>l</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <else>#<directive>else</directive></else>
    <comment type="line">//assert(freopen(file".in","r",stdin)); assert(freopen(file".out","w",stdout));</comment>
    <endif>#<directive>endif</directive></endif>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
