<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12529772.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cctype&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>LL</name></macro> <value>long long</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>l1</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Len</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>Len</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><name>Len</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mat</name><index>[<expr><name>Len</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><name>Len</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <name>y2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>x1</name> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>y2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>x1</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>x2</name> <operator>&amp;&amp;</operator> <name>y1</name> <operator>==</operator> <name>y2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>len</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>+</operator> <name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>y1</name> <init>= <expr><name>len</name><operator>-</operator><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>y2</name> <init>= <expr><name>m</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>len</name><operator>-</operator><name>j</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>x1</name> <operator>&gt;</operator> <name>x2</name> <operator>||</operator> <name>y1</name> <operator>&gt;</operator> <name>y2</name> <operator>||</operator> <name><name>mat</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name> <operator>!=</operator> <name><name>mat</name><index>[<expr><name>x2</name></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				}</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if></elseif> <else>else <block>{
					<if>if <condition>(<expr><name>x1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><name>x2</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt>
						}</block></then></if>
						<if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
					<if>if <condition>(<expr><name>y1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<if>if <condition>(<expr><name>x2</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt>
						}</block></then></if>
						<if>if <condition>(<expr><name>y2</name> <operator>&lt;</operator> <name>m</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt>
						}</block></then></if>
					}</block></then></if>
				}</block></else></if>
				<if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>cur</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<while>while <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>EOF</name></expr>)</condition> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>mat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
