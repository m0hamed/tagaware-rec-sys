<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12525114.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctype.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cerrno&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cfloat&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ciso646&gt;</file></include>
<include>#<directive>include</directive><file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive><file>&lt;clocale&gt;</file></include>
<include>#<directive>include</directive><file>&lt;complex&gt;</file></include>
<include>#<directive>include</directive><file>&lt;csetjmp&gt;</file></include>
<include>#<directive>include</directive><file>&lt;csignal&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdarg&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstddef&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cwchar&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cwctype&gt;</file></include>
<include>#<directive>include</directive><file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive><file>&lt;exception&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ios&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iosfwd&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;istream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iterator&gt;</file></include>
<include>#<directive>include</directive><file>&lt;limits&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;locale&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;memory&gt;</file></include>
<include>#<directive>include</directive><file>&lt;new&gt;</file></include>
<include>#<directive>include</directive><file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdexcept&gt;</file></include>
<include>#<directive>include</directive><file>&lt;streambuf&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;typeinfo&gt;</file></include>
<include>#<directive>include</directive><file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive><file>&lt;valarray&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro>   <value>long long</value></define>
<comment type="line">//ä½è:ä¸­å½æ±èåäº¬ä¸å¤©è¡</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>o</name><operator>&gt;=</operator><literal type="number">1000000007</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>o</name><operator>-=</operator><literal type="number">1000000007</literal></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>o</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name><operator>=</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then><block>{
                         <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                         <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                    <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>l</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
                    <for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><name>n</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>r</name><operator>&gt;=</operator><name>i</name></expr>;</condition><incr><expr><name>r</name><operator>--</operator></expr></incr>)</control><block>{
                            <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name>m</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">2</literal><operator>-</operator><name>l</name><operator>-</operator><name>r</name></expr></init></decl>;</decl_stmt>
                            <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                            <decl_stmt><decl><type><name>int</name></type> <name>q</name><init>=<expr><name><name>a</name><index>[<expr><operator>(</operator><name>l</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                            <if>if<condition>(<expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name><operator>&amp;&amp;</operator><name>r</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
                            <if>if<condition>(<expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name><operator>&amp;&amp;</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>+</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                            <if>if<condition>(<expr><name><name>j</name><argument_list type="generic">&lt;<argument><expr><name>m</name><operator>&amp;&amp;</operator><name>r</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                            <if>if<condition>(<expr><name><name>j</name><argument_list type="generic">&lt;<argument><expr><name>m</name><operator>&amp;&amp;</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>+</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                    }</block></for>
            }</block></for>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><operator>(</operator><name>l</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>a</name><index>[<expr><operator>(</operator><name>l</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><name>m</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>-</operator><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                        <if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>k</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name>ans</name><operator>+</operator><name><name>a</name><index>[<expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
    }</block></then>
    <else>else<block>{
         <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>-</operator><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                 <if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                 <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>k</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>mod</name><argument_list>(<argument><expr><name>ans</name><operator>+</operator><call><name>mod</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         }</block></for>
    }</block></else></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//system("pause");</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

  		 	 			   		 		 			  	  				</unit>
