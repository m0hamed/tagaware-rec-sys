<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12516431.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<undef>#<directive>undef</directive> <name>_P</name></undef>
<define>#<directive>define</directive> <macro><name>_P</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></macro> <value>(void)printf(__VA_ARGS__)</value></define>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>to</name></type></parameter>)</parameter_list></macro> <value>for(x=0;x&lt;to;x++)</value></define>
<define>#<directive>define</directive> <macro><name>FORR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>arr</name></type></parameter>)</parameter_list></macro> <value>for(auto&amp; x:arr)</value></define>
<define>#<directive>define</directive> <macro><name>ITR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>for(__typeof(c.begin()) x=c.begin();x!=c.end();x++)</value></define>
<define>#<directive>define</directive> <macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>(a.begin()),(a.end())</value></define>
<define>#<directive>define</directive> <macro><name>ZERO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>MINUS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0xff,sizeof(a))</value></define>
<comment type="line">//-------------------------------------------------------</comment>

<decl_stmt><decl><type><name>int</name></type> <name>H</name></decl>,<decl><type ref="prev"/><name>W</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name><name>A</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mo</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>x2</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>,<decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>H</name><operator>&gt;&gt;</operator><name>W</name></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>y</argument>,<argument>H</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>W</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name><name>A</name><index>[<expr><name>H</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>W</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>(H+W-<literal type="number">2</literal>)/<literal type="number">2</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>tar</name><init>=<expr><name>cur</name><operator>^</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ZERO</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>tar</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>FOR</name><argument_list>(<argument>x1</argument>,<argument>W</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name>y1</name><operator>=</operator><name>i</name><operator>-</operator><name>x1</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>y1</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>y1</name><operator>&gt;=</operator><name>H</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<for>for<control>(<init><expr><name>x2</name><operator>=</operator><name>x1</name></expr>;</init><condition><expr><name>x2</name><operator>&lt;</operator><name>W</name></expr>;</condition><incr><expr><name>x2</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>y2</name><operator>=</operator><name>H</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>i</name><operator>-</operator><operator>(</operator><name>W</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>x2</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				<if>if<condition>(<expr><name><name>y2</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>y2</name><operator>&gt;=</operator><name>H</name> <operator>||</operator> <name>y1</name></expr></argument>&gt;</argument_list></name><name>y2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">4</literal></argument>)</argument_list></macro> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>nx1</name><init>=<expr><name>x1</name></expr></init></decl>,<decl><type ref="prev"/><name>ny1</name><init>=<expr><name>y1</name></expr></init></decl>,<decl><type ref="prev"/><name>nx2</name><init>=<expr><name>x2</name></expr></init></decl>,<decl><type ref="prev"/><name>ny2</name><init>=<expr><name>y2</name></expr></init></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>j</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx1</name><operator>++</operator></expr>;</expr_stmt></block></then>
					<else>else <block type="pseudo"><expr_stmt><expr><name>ny1</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
					<if>if<condition>(<expr><name>j</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx2</name><operator>--</operator></expr>;</expr_stmt></block></then>
					<else>else <block type="pseudo"><expr_stmt><expr><name>ny2</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
					<if>if<condition>(<expr><name>nx1</name><operator>&lt;=</operator><name>nx2</name> <operator>&amp;&amp;</operator> <name>ny1</name><operator>&lt;=</operator><name>ny2</name> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>ny1</name></expr>]</index><index>[<expr><name>nx1</name></expr>]</index></name><operator>==</operator><name><name>A</name><index>[<expr><name>ny2</name></expr>]</index><index>[<expr><name>nx2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name><name>dp</name><index>[<expr><name>tar</name></expr>]</index><index>[<expr><name>nx1</name></expr>]</index><index>[<expr><name>nx2</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>)</operator><operator>%=</operator><name>mo</name></expr>;</expr_stmt></block></then></if>
				}</block>
			}</block></for>
		}</block>
	}</block>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>x1</argument>,<argument>W</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>x2</argument>,<argument>W</argument>)</argument_list></macro> <expr_stmt><expr><name>ret</name><operator>+=</operator><name><name>dp</name><index>[<expr><operator>(</operator><name>H</name><operator>+</operator><name>W</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>%</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ret</name><operator>%</operator><name>mo</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	
	
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>argc-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>s</name><operator>+=</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument>s.size()</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ungetc</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
