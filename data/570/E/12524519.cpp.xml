<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12524519.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>
<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">555</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>d1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>,<macro><name>mp</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>d2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,<macro><name>mp</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>char</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>x</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>isalpha</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>DP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>nxt</name> <operator>=</operator> <name>now</name> <operator>^</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>nxt</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name><name>f</name><index>[<expr><name>nxt</name></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition><incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name> <operator>&lt;=</operator> <name>i</name></expr>;</condition><incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><operator>!</operator><name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>j</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>j</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// left</comment>
				<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <name>k</name></expr></init></decl>,<decl><type ref="prev"/><name>c</name> <init>= <expr><name>m</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>k</name><operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// right</comment>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>fir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>fir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>fir</name> <operator>++</operator></expr></incr>)</control><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><name>x</name> <operator>+</operator> <name><name>d1</name><index>[<expr><name>fir</name></expr>]</index></name><operator>.</operator><name>X</name></expr></init></decl>,<decl><type ref="prev"/><name>ty</name> <init>= <expr><name>y</name> <operator>+</operator> <name><name>d1</name><index>[<expr><name>fir</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></init></decl>;</decl_stmt>
					<if>if <condition>(<expr><name>tx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tx</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name>ty</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>ty</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>sec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>sec</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition><incr><expr><name>sec</name> <operator>++</operator></expr></incr>)</control><block>{
						<decl_stmt><decl><type><name>int</name></type> <name>tr</name> <init>= <expr><name>r</name> <operator>-</operator> <name><name>d2</name><index>[<expr><name>sec</name></expr>]</index></name><operator>.</operator><name>X</name></expr></init></decl>,<decl><type ref="prev"/><name>tc</name> <init>= <expr><name>c</name> <operator>-</operator> <name><name>d2</name><index>[<expr><name>sec</name></expr>]</index></name><operator>.</operator><name>Y</name></expr></init></decl>;</decl_stmt>
						<if>if <condition>(<expr><name>tr</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tr</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name>tc</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if <condition>(<expr><name><name>g</name><index>[<expr><name>tx</name></expr>]</index><index>[<expr><name>ty</name></expr>]</index></name> <operator>==</operator> <name><name>g</name><index>[<expr><name>tr</name></expr>]</index><index>[<expr><name>tc</name></expr>]</index></name></expr>)</condition><then><block>{
							<expr_stmt><expr><operator>(</operator><name><name>f</name><index>[<expr><name>nxt</name></expr>]</index><index>[<expr><name>j</name> <operator>+</operator> <name><name>d1</name><index>[<expr><name>fir</name></expr>]</index></name><operator>.</operator><name>X</name></expr>]</index><index>[<expr><name>k</name> <operator>+</operator> <name><name>d2</name><index>[<expr><name>sec</name></expr>]</index></name><operator>.</operator><name>X</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
				}</block></for>
			}</block></for></block></for>
		<expr_stmt><expr><name>now</name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<comment type="line">//printf("%d %d\n",i + 1,f[now][1][1]);</comment>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>step</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <name>m</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>step</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>step</name></expr>;</condition><incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <name>step</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <name>j</name></expr></init></decl>,<decl><type ref="prev"/><name>c</name> <init>= <expr><name>m</name> <operator>-</operator> <operator>(</operator><name>step</name> <operator>-</operator> <name>j</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>x</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name>y</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&gt;</operator> <name>n</name> <operator>||</operator> <name>c</name> <operator>&gt;</operator> <name>m</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<comment type="line">//printf("%d %d %d %d\n",x,y,r,c);</comment>
			<if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block>{
				<if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
			}</block></then><else>else<block>{
				<if>if <condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
				<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>+</operator> <literal type="number">2</literal> <operator>==</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <name><name>f</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
			}</block></else></if>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen("E.in","r",stdin);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition><incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<if>if <condition>(<expr><name><name>g</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>g</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>DP</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
