<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12539413.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>llong</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>long</name></macro> <value>llong</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>module</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>string</name></type> <name><name>A</name><index>[<expr><literal type="number">510</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>F</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">510</literal></expr>]</index><index>[<expr><literal type="number">510</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>valid</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><literal type="number">0</literal> <operator>&lt;</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>m</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>valid</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>valid</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>valid</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>==</operator> <name><name>A</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>add</name> <parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>+</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>module</name></expr>;</expr_stmt> }</block></function>

<function><type><name>void</name></type> <name>enter</name> <parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>void</name></type> <name>solve</name> <parameter_list>()</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>A</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
	<expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>k</name> <operator>^=</operator> <literal type="number">1</literal></expr></incr>)</control>
	<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
	<block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>j</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>m</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><call><name>valid</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

			<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><call><name>valid</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><call><name>valid</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>k</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><call><name>valid</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><call><name>valid</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>k</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

			<if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>y</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>y</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>y</name><operator>)</operator></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for></block></then></if></block></for></block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name>ifstream</name><argument_list>(<argument><expr><literal type="string">"test.inp"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>rdbuf</name></name><argument_list>(<argument><expr><operator>(</operator><operator>new</operator> <call><name>ifstream</name><argument_list>(<argument><expr><literal type="string">"test.inp"</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><call><name>rdbuf</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

	<expr_stmt><expr><call><name>enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
