<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12615650.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">500</literal></expr>]</index><index>[<expr><literal type="number">501</literal></expr>]</index></name><init>=<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<function><type><name>unsigned</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>( <expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>==</operator><literal type="number">0xFFFFFFFF</literal></expr> )</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>uu</name><init>=<expr><name>c</name><operator>-</operator><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>ll</name><init>=<expr><name>l</name></expr></init></decl>, <decl><type ref="prev"/><name>dd</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>c</name><operator>+</operator><name>r</name></expr></init></decl>, <decl><type ref="prev"/><name>rr</name><init>=<expr><name>m</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>r</name></expr></init></decl>;</decl_stmt>
        
        <if>if<condition>( <expr><name>uu</name><operator>&gt;</operator><name>dd</name> <operator>||</operator> <name>ll</name><operator>&gt;</operator><name>rr</name></expr> )</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
        <elseif>else <if>if<condition>( <expr><name><name>s</name><index>[<expr><name>uu</name></expr>]</index><index>[<expr><name>ll</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>dd</name></expr>]</index><index>[<expr><name>rr</name></expr>]</index></name></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>( <expr><name>uu</name><operator>==</operator><name>dd</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ll</name><operator>==</operator><name>rr</name> <operator>||</operator> <name>ll</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>rr</name><operator>)</operator></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if<condition>( <expr><name>ll</name><operator>==</operator><name>rr</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uu</name><operator>==</operator><name>dd</name> <operator>||</operator> <name>uu</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>dd</name><operator>)</operator></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cc</name><init>=<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>cc</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    
    <return>return <expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">500</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>unsigned</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%u\n"</literal></expr></argument>, <argument><expr><call><name>solve</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
