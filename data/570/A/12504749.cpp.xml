<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12504749.cpp"><comment type="line">//Language: GNU C++</comment>


<define>#<directive>define</directive> <macro><name>_CRT_SECURE_NO_WARNINGS</name></macro></define>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctype.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;functional&gt;</file></include>
<include>#<directive>include</directive><file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive><file>&lt;numeric&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;complex&gt;</file></include>
<include>#<directive>include</directive><file>&lt;valarray&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vvc</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>mis</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>mss</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>msc</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<function><type><name>ll</name></type> <name>Gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <while>while <condition>(<expr><name>a</name> <operator>%=</operator> <name>b</name> <operator>^=</operator> <name>a</name> <operator>^=</operator> <name>b</name> <operator>^=</operator> <name>a</name></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>  <return>return <expr><name>b</name></expr>;</return> }</block></function>
<define>#<directive>define</directive> <macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro> <value>(v.begin()),(v.end())</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></macro>  <value>((int)((v).size()))</value></define>
<define>#<directive>define</directive> <macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></macro> <value>for(int i=start;i&lt;end;++i)</value></define>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>vi</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>vote</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>m</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>Max</name> <init>= <expr><operator>-</operator><literal type="number">99999999</literal></expr></init></decl>;</decl_stmt>
        <macro><name>For</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>Max</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>Max</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>vote</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <expr_stmt><expr><name><name>res</name><index>[<expr><name>vote</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>Max</name> <init>= <expr><operator>-</operator><literal type="number">9999999</literal></expr></init></decl>;</decl_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>sz(res)</argument>)</argument_list></macro>
    <block>{
        <if>if <condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>Max</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>Max</name> <operator>=</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>vote</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>vote</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
