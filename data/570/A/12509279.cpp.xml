<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12509279.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name></macro> <value>1000</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>slld</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>scanf("%lld",&amp;t)</value></define>
<define>#<directive>define</directive> <macro><name>sd</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;t)</value></define>
<define>#<directive>define</directive> <macro><name>pd</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>printf("%d\n",t)</value></define>
<define>#<directive>define</directive> <macro><name>plld</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>printf("%lld\n",t)</value></define>
<define>#<directive>define</directive> <macro><name>pcc</name></macro> <value>pair&lt;char,char&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt;ll,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>tr</name><parameter_list>(<parameter><type><name>container</name></type></parameter>,<parameter><type><name>it</name></type></parameter>)</parameter_list></macro> <value>for(typeof(container.begin()) it=container.begin();it!=container.end();it++)</value></define>
<define>#<directive>define</directive> <macro><name>mp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>make_pair(a,b)</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>push_back(x)</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>inp</name><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>sd</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>sd</name><argument_list>(<argument><expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">101</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mx</name><operator>=</operator><name><name>inp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>win</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>win</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">101</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>mx</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>mx</name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>win</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	
	<expr_stmt><expr><call><name>pd</name><argument_list>(<argument><expr><name>win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
