<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12497918.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive><file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>


<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;=b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>ren</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&gt;=b;i--)</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro> <value>pair&lt;long long int,long long int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>vll</name></macro> <value>vector&lt;long long int&gt;</value></define>  
<define>#<directive>define</directive> <macro><name>vii</name></macro> <value>vector&lt;int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>gi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%d",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>gll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%lld",&amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>gstr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>scanf("%s",n)</value></define>
<define>#<directive>define</directive> <macro><name>gl</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>cin &gt;&gt; n</value></define>
<define>#<directive>define</directive> <macro><name>oi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%d",n)</value></define>
<define>#<directive>define</directive> <macro><name>oll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%lld",n)</value></define>
<define>#<directive>define</directive> <macro><name>ostr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>printf("%s",n)</value></define>
<define>#<directive>define</directive> <macro><name>ol</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>cout &lt;&lt; n</value></define>
<define>#<directive>define</directive> <macro><name>os</name></macro> <value>cout&lt;&lt;" "</value></define>
<define>#<directive>define</directive> <macro><name>on</name></macro> <value>cout&lt;&lt;"\n"</value></define>
<define>#<directive>define</directive> <macro><name>o2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>n.begin(),n.end()</value></define>
<define>#<directive>define</directive> <macro><name>present</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(s.find(x) != s.end())</value></define> 
<define>#<directive>define</directive> <macro><name>cpresent</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(find(all(s),x) != s.end())</value></define> 
<define>#<directive>define</directive> <macro><name>tr</name><parameter_list>(<parameter><type><name>container</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></macro> <value>for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)</value></define> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mat</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>win</name><index>[<expr><literal type="number">105</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
<comment type="line">//rep(i,0,n-1)rep(j,0,m-1)cin&gt;&gt;a[i][j];</comment>
<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>m-<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;</operator><name>mx</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mx</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>idx</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        }</block></then></if>
        
    }</block>
    <expr_stmt><expr><name><name>win</name><index>[<expr><name>idx</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
<block>{
    <if>if<condition>(<expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>mx</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>mx</name><operator>=</operator><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></then></if>
}</block>
<expr_stmt><expr><call><name>ol</name><argument_list>(<argument><expr><name>ans</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
