<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12073201.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">1000001</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>arr2</name><index>[<expr><literal type="number">1000002</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>arr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>arr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>,<decl><type ref="prev"/><name>enda</name></decl>,<decl><type ref="prev"/><name>num</name><init>=<expr><literal type="number">1000001</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arr2</name><index>[<expr><name>num</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>arr2</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if>

        <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>num</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>enda</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>arr2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>arr2</name><index>[<expr><name>num</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>num</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>enda</name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name><name>arr2</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name><name>arr2</name><index>[<expr><name>num</name></expr>]</index></name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>arr</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>num</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>num</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>enda</name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></elseif></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><name>start</name></expr></argument>,<argument><expr><name>enda</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
