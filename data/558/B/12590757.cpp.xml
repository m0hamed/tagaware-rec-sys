<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12590757.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">1000005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    }</block></for>

    <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1000005</literal></expr>;</expr_stmt> <expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000001</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>l</name></expr>)</condition><then>
                 <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>y</name> <operator>-</operator> <name>x</name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if></block></then></if>

            <expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

        }</block></then></if>
    }</block></for>


    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
