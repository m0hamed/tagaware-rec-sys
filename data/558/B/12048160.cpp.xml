<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12048160.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>ostringstream</name></type> <name>OSS</name>;</typedef>
<typedef>typedef <type><name>istringstream</name></type> <name>ISS</name>;</typedef>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VI</name></expr></argument>&gt;</argument_list></name></type> <name>VVI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>VLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VLL</name></expr></argument>&gt;</argument_list></name></type> <name>VVLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>VD</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VD</name></expr></argument>&gt;</argument_list></name></type> <name>VVD</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VS</name></expr></argument>&gt;</argument_list></name></type> <name>VVS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>VB</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VB</name></expr></argument>&gt;</argument_list></name></type> <name>VVB</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>VPII</name>;</typedef>

<define>#<directive>define</directive> <macro><name>fst</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>snd</name></macro> <value>second</value></define>
<comment type="line">// #define Y first</comment>
<comment type="line">// #define X second</comment>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>EB</name></macro> <value>emplace_back</value></define> 
<define>#<directive>define</directive> <macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x).begin(),(x).end()</value></define>
<define>#<directive>define</directive> <macro><name>RANGE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>maxX</name></type></parameter>,<parameter><type><name>maxY</name></type></parameter>)</parameter_list></macro> <value>(0 &lt;= (x) &amp;&amp; 0 &lt;= (y) &amp;&amp; (x) &lt; (maxX) &amp;&amp; (y) &lt; (maxY))</value></define>
<define>#<directive>define</directive> <macro><name>DUMP</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></macro> <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; ( x ) &lt;&lt; endl</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></macro> <value>for (int i = 0; i &lt; (int)(N); i++)</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>init</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></macro> <value>for (int i = (init); i &lt; (int)(N); i++)</value></define>

<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>fromString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>res</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ISS</name></type> <name>iss</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>iss</name> <operator>&gt;&gt;</operator> <name>res</name></expr>;</expr_stmt> <return>return <expr><name>res</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>string</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>OSS</name></type> <name>oss</name></decl>;</decl_stmt> <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <name>a</name></expr>;</expr_stmt> <return>return <expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INFL</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>DINF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>DX</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>DY</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const double PI = acos(-1.0);</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>VI</name></type> <name>xs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name> <operator>:</operator> <name>xs</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1000005</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VI</name></type> <name>cnts</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VI</name></type> <name>ls</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VI</name></type> <name>rs</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ls</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><name>int</name></type> <name>max_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>max_len</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>

    <macro><name>rep</name><argument_list>(<argument>x</argument>, <argument>M</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>ls</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block>{
<comment type="line">//            printf("%d %d %d %d\n", cnts[x], ls[x], rs[x], len);</comment>
        }</block></then></if>

        <if>if <condition>(<expr><name>max_cnt</name> <operator>&lt;</operator> <name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name> <operator>||</operator> 
                <operator>(</operator><name>max_cnt</name> <operator>==</operator> <name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>max_len</name> <operator>&gt;</operator> <name>len</name><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max_cnt</name> <operator>=</operator> <name><name>cnts</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_l</name> <operator>=</operator> <name><name>ls</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_r</name> <operator>=</operator> <name><name>rs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>max_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>max_l</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>max_r</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
