<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12050911.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>

<define>#<directive>define</directive> <macro><name>nmax</name></macro> <value>100005</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>negApp</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>numApples</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>negApple</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>;</struct>

<struct>struct <name>pozApp</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>position</name></decl>, <decl><type ref="prev"/><name>numApples</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>pozApple</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>numLeft</name></decl>, <decl><type ref="prev"/><name>numRight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>poz</name></decl>, <decl><type ref="prev"/><name>rez</name></decl>, <decl><type ref="prev"/><name>apple</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>cmp1</name><parameter_list>(<parameter><decl><type><name>pozApp</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pozApp</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>position</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>position</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmp2</name><parameter_list>(<parameter><decl><type><name>negApp</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>negApp</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>position</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>position</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>poz</name> <operator>&gt;&gt;</operator> <name>apple</name></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>rez</name> <operator>+=</operator> <name>apple</name></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>poz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>numLeft</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>negApple</name><index>[<expr><name>numLeft</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name>poz</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>negApple</name><index>[<expr><name>numLeft</name></expr>]</index></name><operator>.</operator><name>numApples</name> <operator>=</operator> <name>apple</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>numRight</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pozApple</name><index>[<expr><name>numRight</name></expr>]</index></name><operator>.</operator><name>position</name> <operator>=</operator> <name>poz</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pozApple</name><index>[<expr><name>numRight</name></expr>]</index></name><operator>.</operator><name>numApples</name> <operator>=</operator> <name>apple</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    
    <if>if <condition>(<expr><name>numRight</name> <operator>&gt;</operator> <name>numLeft</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>pozApple</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pozApple</name><operator>+</operator><name>numRight</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>numRight</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>numLeft</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>rez</name> <operator>-=</operator> <name><name>pozApple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numApples</name></expr>;</expr_stmt></block></for>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name>numLeft</name> <operator>&gt;</operator> <name>numRight</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>negApple</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>negApple</name><operator>+</operator><name>numLeft</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>numLeft</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <name>numRight</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>rez</name> <operator>-=</operator> <name><name>negApple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numApples</name></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif></if>
    
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rez</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
