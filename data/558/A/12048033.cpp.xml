<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12048033.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cctype&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;bitset&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>

<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctype.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>oo</name></macro>          <value>(1&lt;&lt;30)</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro>          <value>3.141592653589793</value></define>
<define>#<directive>define</directive> <macro><name>pi</name></macro>          <value>(2.0*acos(0.0))</value></define>
<define>#<directive>define</directive> <macro><name>ERR</name></macro>         <value>1e-5</value></define>
<define>#<directive>define</directive> <macro><name>PRE</name></macro>         <value>1e-8</value></define>
<define>#<directive>define</directive> <macro><name>SZ</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro>       <value>((long long int)s.size())</value></define>
<define>#<directive>define</directive> <macro><name>LL</name></macro>          <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>ISS</name></macro>         <value>istringstream</value></define>
<define>#<directive>define</directive> <macro><name>OSS</name></macro>         <value>ostringstream</value></define>
<define>#<directive>define</directive> <macro><name>VS</name></macro>          <value>vector&lt;string&gt;</value></define>
<define>#<directive>define</directive> <macro><name>VI</name></macro>          <value>vector&lt;long long int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>VD</name></macro>          <value>vector&lt;double&gt;</value></define>
<define>#<directive>define</directive> <macro><name>VLL</name></macro>         <value>vector&lt;long long&gt;</value></define>
<define>#<directive>define</directive> <macro><name>SII</name></macro>         <value>set&lt;long long int&gt;::iterator</value></define>
<define>#<directive>define</directive> <macro><name>SI</name></macro>          <value>set&lt;long long int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>    <value>memset(a,b,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>   <value>for(i=a;i&lt;=b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>frn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>  <value>for(i=a;i&gt;=b;i--)</value></define>

<define>#<directive>define</directive> <macro><name>pb</name></macro>          <value>push_back</value></define>

<typedef>typedef <type><struct>struct <name>tree</name>
<block>{<public type="default">

    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
</public>}</block></struct></type><name>tree</name>;</typedef>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tree</name></type> <name><name>pob</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nob</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">//mem(positive,0);</comment>
    <comment type="line">//mem(negative,0);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>neg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>aa</name></decl>;</decl_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>xx</name><operator>&gt;&gt;</operator><name>aa</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>xx</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>pob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pob</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>aa</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{

            <expr_stmt><expr><name><name>nob</name><index>[<expr><name>neg</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>nob</name><index>[<expr><name>neg</name></expr>]</index></name><operator>.</operator><name>a</name><operator>=</operator><name>aa</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>neg</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pos-<literal type="number">2</literal></argument>)</argument_list></macro>
    <block>{
        <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>pos-<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;</operator><name><name>pob</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>tree</name></type> <name>temp</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>temp</name><operator>=</operator><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pob</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pob</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block>

    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>neg-<literal type="number">2</literal></argument>)</argument_list></macro>
    <block>{
        <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>neg-<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&lt;</operator><name><name>nob</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>tree</name></type> <name>temp</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>temp</name><operator>=</operator><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>nob</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nob</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>temp</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>pos</name><operator>==</operator><name>neg</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pos-<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;pob[i].a&lt;&lt;" "&lt;&lt;nob[i].a&lt;&lt;endl;</comment>
        }</block>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>pos</name><operator>&lt;</operator><name>neg</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pos-<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;pob[i].a&lt;&lt;endl;</comment>
        }</block>
        <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pos</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;nob[i].a&lt;&lt;endl;</comment>
        }</block>
    }</block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>neg</name><operator>&lt;</operator><name>pos</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>neg-<literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>nob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;nob[i].a&lt;&lt;endl;</comment>
        }</block>
        <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>neg</argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>pob</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;pob[i].a&lt;&lt;endl;</comment>
        }</block>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sum</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
