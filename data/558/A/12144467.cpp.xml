<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12144467.cpp"><comment type="line">//Language: MS C++</comment>


<comment type="line">// rc.cpp</comment>
<comment type="line">//</comment>

<include>#<directive>include</directive> <file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>

<include>#<directive>include</directive> <file>&lt;iterator&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;list&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;numeric&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>uchar</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>uint64</name>;</typedef>

<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>3.1415926535897932384626433832795</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1E-8</value></define>

<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>uint</name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>uint</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint</name></type> <name>bz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>bz</name></expr>;</expr_stmt></block></for>

	<decl_stmt><decl><type><name>uint</name></type> <name>az</name> <init>= <expr><name>n</name> <operator>-</operator> <name>bz</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
		 <decl><type ref="prev"/><name>pr</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>az</name></expr></argument>, <argument><expr><name>bz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>uint</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pr</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>bz</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name><name>a</name><index>[<expr><name>bz</name> <operator>+</operator> <name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></for>

	<if>if <condition>(<expr><name>az</name> <operator>!=</operator> <name>bz</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name>az</name> <operator>&gt;</operator> <name>bz</name></expr> ?</condition><then> <expr><name><name>a</name><index>[<expr><name>bz</name> <operator>+</operator> <name>pr</name></expr>]</index></name><operator>.</operator><name>second</name></expr> </then><else>: <expr><name><name>a</name><index>[<expr><name>bz</name> <operator>-</operator> <name>az</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></then></if>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
