<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12160882.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>map</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>di</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>gao</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>low</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>upr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>di</name><index>[<expr><name>low</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>di</name><index>[<expr><name>low</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>low</name><operator>++</operator></expr>;</expr_stmt>}</block></then>
        <else>else <block>{<expr_stmt><expr><name><name>gao</name><index>[<expr><name>upr</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>gao</name><index>[<expr><name>upr</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>map</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>upr</name><operator>++</operator></expr>;</expr_stmt>}</block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>flagu</name><init>=<expr><name>upr</name></expr></init></decl>,<decl><type ref="prev"/><name>flagl</name><init>=<expr><name>low</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>low</name><operator>&gt;</operator><name>upr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <while>while<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>low</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>flag</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>upr</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>flag</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
        <block>{
            <comment type="line">//printf("R\n");</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>min</name><init>=<expr><literal type="number">1000006</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>flagu</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>min</name><operator>&gt;</operator><name><name>gao</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>gao</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">10000006</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>min</name><operator>=</operator><name><name>gao</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>}</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>gao</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>gao</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">10000006</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>upr</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <comment type="line">//printf("L\n");</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>max</name><init>=<expr><operator>-</operator><literal type="number">10000010</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>flagl</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>max</name><operator>&lt;</operator><name><name>di</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;&amp;</operator><name><name>di</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">10000010</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>max</name><operator>=</operator><name><name>di</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>}</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>di</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <comment type="line">//printf("L num,%d %d\n",x,max);</comment>
            <expr_stmt><expr><name><name>di</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">10000010</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>low</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">//printf("ans=%I64d\n",ans);</comment>
        <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal><operator>-</operator><name>flag</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//è¹è¹è¹è¹è¹è¹è¹è¹</comment>
 				   		  	  		 			 		   	  	</unit>
