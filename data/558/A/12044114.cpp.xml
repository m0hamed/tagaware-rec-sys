<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12044114.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/*
Author: richard
Contact: zhangruichang112@gmail.com
*/</comment>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;list&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;climits&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;unordered_map&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<comment type="line">//int, -2^31~2^31-1    -2.1*10^9~2.1*10^9 (-2147483648-2147483647)</comment>
<comment type="line">//unsigned int, 0~2^32-1  0~4.2*10^9</comment>
<comment type="line">//long long  -2^63~2^63-1 -9*10^18~9*10^18</comment>
<comment type="line">//unsigned long long 0~2^64-1  0~1.8*10^19</comment>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<define>#<directive>define</directive> <macro><name>fi</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>se</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>iOS</name></macro>  <value>ios_base::sync_with_stdio(false)</value></define>
<function><type><name>int</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>t</name> <operator>=</operator> <name>t</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>t</name><operator>*</operator><name>flag</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><operator>!</operator><name>m</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><call><name>GCD</name><argument_list>(<argument><expr><name>n</name><operator>%</operator><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{
  <comment type="line">//create an output string stream</comment>
  <decl_stmt><decl><type><name>ostringstream</name></type> <name>os</name></decl> ;</decl_stmt>

  <comment type="line">//throw the value into the string stream</comment>
  <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>value</name></expr> ;</expr_stmt>

  <comment type="line">//convert the string stream into a string and return</comment>
  <return>return <expr><call><name><name>os</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr> ;</return>
}</block></function>
<function><type><name>LL</name></type> <name>MultMod</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>MOD</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ret</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vp</name></decl>, <decl><type ref="prev"/><name>vn</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="block">/*
#ifndef ONLINE_JUDGE
    freopen ("in.txt" , "r" , stdin);
    freopen ("out.txt" , "w" , stdout);
#endif
*/</comment>
    <while>while<condition>(<expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>)</condition><block>{
        <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>vn</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>a</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>vn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name>x</name></expr>, <expr><name>a</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vn</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vn</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><call><name><name>vn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt></block></for>
            <comment type="line">//int ans=accumulate(vp.begin(), vp.end(), 0)+accumulate(vn.begin(), vn.end(), 0)+</comment>
        }</block></then><else>else<block>{
            <decl_stmt><decl><type><name>int</name></type> <name>minsize</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>minsize</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><name><name>vn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt></block></for>
            <if>if<condition>(<expr><call><name><name>vp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><call><name><name>vn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>vp</name><index>[<expr><name>minsize</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>vn</name><index>[<expr><name>minsize</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt></block></else></if>
            <comment type="line">//if(vp.size()&gt;vn.size()) ans+=vp[minsize].se;</comment>
        }</block></else></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
