<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12104604.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>,<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>neg</name></decl>,<decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><macro><name>neg</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>pair&lt;long long int</argument>,<argument>long long int&gt;(x,a)</argument>)</argument_list></macro></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><macro><name>pos</name></macro><expr_stmt><expr><operator>.</operator><macro><name>push_back</name><argument_list>(<argument>pair&lt;long long int</argument>,<argument>long long int&gt;(x,a)</argument>)</argument_list></macro></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<macro><name>sort</name><argument_list>(<argument>neg.begin()</argument>,<argument>neg.end()</argument>, <argument>std::greater&lt;pair&lt;long long int</argument>,<argument>long long int&gt; &gt;()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>pos</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>pos</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>result</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>pos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name><name>neg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>result</name><operator>+=</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name><operator>+=</operator><name><name>neg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>pos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>result</name><operator>+=</operator><name><name>pos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>neg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>result</name><operator>+=</operator><name><name>neg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then></if></elseif></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>result</name></expr>;</expr_stmt>
	

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
