<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12068358.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;memory.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;fstream&gt;</file></include>

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>D</name></macro> <value>double</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>


<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>D</name></type> <name>dist</name> <parameter_list>(<parameter><decl><type><name>D</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>y2</name></decl></parameter> )</parameter_list>
<block>{
    <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>-</operator><name>x2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x1</name><operator>-</operator><name>x2</name><operator>)</operator><operator>+</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y1</name><operator>-</operator><name>y2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>D</name></type> <name>area</name> <parameter_list>(<parameter><decl><type><name>D</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>y2</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>D</name></type> <name>y3</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><call><name>dist</name> <argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name>dist</name> <argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>c</name> <init>= <expr><call><name>dist</name><argument_list>(<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>,<argument><expr><name>x3</name></expr></argument>,<argument><expr><name>y3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>+</operator><name>c</name><operator>)</operator> <operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>p</name><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>a</name><operator>)</operator><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>b</name><operator>)</operator><operator>*</operator><operator>(</operator><name>p</name><operator>-</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>s1</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
   <comment type="line">// cin.tie(0);</comment>
    <comment type="line">//ios_base::sync_with_stdio(0);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s</name><operator>=</operator><call>(<name>char</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">48</literal></expr></argument>)</argument_list></call><operator>+</operator><name>s</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>aa</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>aa</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>s1</name><operator>=</operator><call>(<name>char</name>)<argument_list>(<argument><expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">48</literal></expr></argument>)</argument_list></call><operator>+</operator><name>s1</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>j</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s1</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>aa</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mm</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">20</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>sm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>sm</name><operator>+=</operator> <name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
                    <for>for<control>( <init><expr><name>t</name><operator>=</operator><name>mm</name></expr>;</init><condition><expr><name>t</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></block></for>
                    <expr_stmt><expr><name>sm</name><operator>+=</operator><operator>(</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>t</name><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block>{

                    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
                    <for>for<control>( <init><expr><name>t</name><operator>=</operator><name>mm</name></expr>;</init><condition><expr><name>t</name><operator>&lt;</operator><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>t</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></block></for>
                    <expr_stmt><expr><name>sm</name><operator>+=</operator><operator>(</operator><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>-</operator><name>t</name><operator>)</operator><operator>+</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><name>t</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <comment type="line">//cout&lt;&lt;sm&lt;&lt;endl;</comment>
            }</block></for>
            <comment type="line">//cout&lt;&lt;sm&lt;&lt;endl;</comment>
                    <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>,<argument><expr><name>sm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>+=</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mn</name></expr>;</expr_stmt>
}</block></function></unit>
