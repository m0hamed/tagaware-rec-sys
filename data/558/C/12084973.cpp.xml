<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12084973.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int (i)=(a);i&lt;(b);i++)</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FOR(i,0,n)</value></define>
<define>#<directive>define</directive> <macro><name>RANGE</name><parameter_list>(<parameter><type><name>vec</name></type></parameter>)</parameter_list></macro> <value>(vec).begin(),(vec).end()</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<class>class <name>Div2C</name> <block>{<private type="default">
</private><public>public:
    <comment type="line">// a[i] = 10101111100001 ã®ãããªäºé²è¡¨ç¾ã«ããã¨ operations ã¯</comment>
    <comment type="line">//</comment>
    <comment type="line">// a[i] &lt;&lt;= 1</comment>
    <comment type="line">// a[i] &gt;&gt;= 1</comment>
    <comment type="line">//</comment>
    <comment type="line">// ãªã®ã§åãããé·ç§»ã®ç¶æã¯</comment>
    <comment type="line">//</comment>
    <comment type="line">// 10101111100000 ã 1010000000 ã 1010 ãªã© prefix+0...0 ã®ãããªæ°å­ã«ãªã</comment>
    <comment type="line">//</comment>
    <comment type="line">// max{a[i]} ãããå¤§ãããªãããã« a[i]*=2 ããå¿è¦ã¯ãªãã®ã§ max{a[i]} ã®ãããé·ã m</comment>
    <comment type="line">// ã¨ããã¨ä¸è¬ã® a[i] ã®é·ç§»ã¯æå¤§</comment>
    <comment type="line">//</comment>
    <comment type="line">// (1+2+...+m)+1 = m(m+1)/2+1 ã¨ãªã(+1 ã¯èªåèªèº«ã¸ã®é·ç§»)</comment>
    <comment type="line">//</comment>
    <comment type="line">// ãªããªã</comment>
    <comment type="line">//</comment>
    <comment type="line">// (1111111 -&gt; 1000000, 1100000, 1110000, ...) ã®ããã«</comment>
    <comment type="line">// bits = ((1&lt;&lt;m)-1) ãã</comment>
    <comment type="line">// bits -&gt; { (bits&gt;&gt;k)&lt;&lt;k | 0&lt;=k&lt;=m-1 } ã¨ m åã®é·ç§»ãèããããããã</comment>
    <comment type="line">//</comment>
    <comment type="line">// ãã£ã¦è¨ç®éã¯ O(n*m^2) ç¨åº¦ãªã®ã§å¨æ¢ç´¢ã§ãã</comment>
    <comment type="line">//</comment>
    <comment type="line">// O(n*m^2+maxA)</comment>
    <function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>maxA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro>
            <block>{
                <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>maxA</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>

            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name><argument_list>(<argument><expr><name>maxA</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>  <comment type="line">// cnt[x] := a[i]-&gt; x ã«é·ç§»ã§ãããã®ã®æ°</comment>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>step</name><argument_list>(<argument><expr><name>maxA</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <comment type="line">// step[x] := a[i]-&gt;x ã«é·ç§»ããã¨ãã®stepç·æ°</comment>

            <comment type="line">// bfs ã§åãããé·ç§»ã®æå°ã¹ããããæ±ãã</comment>
            <comment type="line">// O(N*m^2)</comment>
            <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro>
            <block>{
                <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type>  <name>que</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name><argument_list>(<argument><expr><name>maxA</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <while>while <condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>x</name><operator>/</operator><literal type="number">2</literal> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vis</name><index>[<expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>step</name><index>[<expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>x</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>maxA</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>vis</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>step</name><index>[<expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></while>
            }</block>
            <comment type="line">// çµæã®åç§</comment>
            <comment type="line">// O(maxA)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>minStep</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <macro><name>FOR</name><argument_list>(<argument>x</argument>, <argument><literal type="number">1</literal></argument>, <argument>maxA+<literal type="number">1</literal></argument>)</argument_list></macro>
            <block>{
                <if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>N</name></expr>)</condition><then> <comment type="line">// é·ç§»ãå°éã§ããªãã±ã¼ã¹ã¯é£ã°ã</comment>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>minStep</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minStep</name></expr></argument>, <argument><expr><name><name>step</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>minStep</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></function>
</public>}</block>;</class>

<if>#<directive>if</directive> <expr><literal type="number">1</literal></expr></if>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
        <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>obj</name> <init>= <expr><operator>new</operator> <call><name>Div2C</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>obj</name><operator>-&gt;</operator><name>solve</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator> <name>obj</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<endif>#<directive>endif</directive></endif>
</unit>
