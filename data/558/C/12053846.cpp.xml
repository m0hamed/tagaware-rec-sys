<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12053846.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<define>#<directive>define</directive> <macro><name>md</name></macro> <value>int(1e7+100)</value></define>
<define>#<directive>define</directive> <macro><name>modul</name></macro> <value>int(1e9+7)</value></define>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=(a),_b=(b); i&lt;=_b; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=(a),_b=(b); i&gt;=_b; i--)</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>II</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>II</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">110010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">1100010</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>cnt2</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name><name>g</name><index>[<expr><literal type="number">1100010</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("inp.txt", "r", stdin);</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <literal type="number">1100000</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
            <while>while <condition>(<expr><name>k</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>g</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>g</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt2</name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            <while>while <condition>(<expr><name>p</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;=</operator> <literal type="number">1100000</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>f</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name>cnt2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>g</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></while>
        }</block></while>
    }</block>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">1100000</literal></argument>)</argument_list></macro>
        <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>res</name> <operator>&amp;&amp;</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
