<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12085735.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>reachable</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>need_to_convert</name><index>[<expr><literal type="number">1000000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>trans_op_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{
			<expr_stmt><expr><operator>++</operator><name><name>reachable</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>need_to_convert</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name>trans_op_num</name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>trans_op_num</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></while>
	}</block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1e5</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>reachable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>need_to_convert</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>reachable</name><index>[<expr><name>i</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>y</name> <operator>+</operator> <name>y</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>+</operator> <name>n</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
