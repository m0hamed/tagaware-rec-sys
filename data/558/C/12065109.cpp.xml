<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12065109.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<comment type="line">//#define pb push_back</comment>
<define>#<directive>define</directive> <macro><name>MAAX</name></macro> <value>200000</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function_decl><specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ar</name><parameter_list>(<parameter><decl><type><name>MAAX</name></type></decl></parameter>)</parameter_list> ;</function_decl>
<function_decl><specifier>static</specifier>  <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>rech</name><parameter_list>(<parameter><decl><type><name>MAAX</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><specifier>static</specifier> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vst</name><parameter_list>(<parameter><decl><type><name>MAAX</name></type></decl></parameter>)</parameter_list>;</function_decl>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>ar</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ar</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>rech</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>rech</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>vst</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>vst</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>bfs</name></decl>;</decl_stmt>



    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{

        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>


        <expr_stmt><expr><call><name><name>bfs</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

        <while>while<condition>(<expr><operator>!</operator><call><name><name>bfs</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{

            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><init>=<expr><call><name><name>bfs</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


            <expr_stmt><expr><call><name><name>bfs</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr> ;</expr_stmt>

            <if>if<condition>(<expr><name><name>vst</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>rech</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>ar</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>vst</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>bfs</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

                <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>*</operator><literal type="number">2</literal><operator>&lt;</operator><literal type="number">200000</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>bfs</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if>

            }</block></then></if>
        }</block></while>
    }</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name>INT_MAX</name></expr></init></decl> ;</decl_stmt>


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>MAAX</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>rech</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>n</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></then></if></block></for>


    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></function>
</unit>
