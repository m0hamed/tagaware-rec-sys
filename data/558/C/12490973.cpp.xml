<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12490973.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>F</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>No</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><name>INT_MIN</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>m</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

    <decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>temp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;   <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>  , <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument>   &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>temp</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>==</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>||</operator> <name><name>temp</name><operator>.</operator><name>first</name></name><operator>&gt;</operator><name>m</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name><name>F</name><index>[<expr><name><name>temp</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>No</name><index>[<expr><name><name>temp</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>temp</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>first</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>first</name></name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>N</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>No</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
