<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12072499.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive><file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;set&gt;</file></include>
<include>#<directive>include</directive><file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>eps</name></macro> <value>1e-8</value></define>
<define>#<directive>define</directive> <macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a)&gt;(b)?(a):(b))</value></define>
<define>#<directive>define</directive> <macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a)&lt;(b)?(a):(b))</value></define>
<decl_stmt><decl><type><name>int</name></type> <name><name>two</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>ttt</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>two</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>two</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name><name>two</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>ttt</name><index>[<expr><name><name>two</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nummax</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nummax</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>nummax</name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>g</name><init>=<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>g</name><operator>=</operator><call><name>gcd</name><argument_list>(<argument><expr><name>g</name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>g</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ttt</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>g</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name>num</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name><init>=<expr><name>g</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>anans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>tt</name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>gg</name><init>=<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>gg</name><operator>&gt;</operator><name>tt</name></expr>)</condition>
            <block>{
                <expr_stmt><expr><name>gg</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>gg</name><operator>&lt;</operator><name>tt</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>tt</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
            }</block></while>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
            <block>{
                <if>if<condition>(<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>tt</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>ttt</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>/</operator><name>tt</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><name>tt</name><operator>%</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>ttt</name><index>[<expr><name>tt</name><operator>/</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>anans</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>
        }</block></for>
    }</block></then></if>
<comment type="line">//    printf("%d\n",anans);</comment>
    <block>{
        <expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">9999999</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>g</name><operator>=</operator><name>tt</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>g</name><operator>*</operator><name><name>two</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name>nummax</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>tg</name><init>=<expr><name>g</name><operator>*</operator><name><name>two</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<comment type="line">//            printf("%d ",tg);</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>tans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><name>tg</name></expr>)</condition><then>
                <block>{
<comment type="line">//                        printf("!%d ",ttt[num[j]/tg]);</comment>
                    <expr_stmt><expr><name>tans</name><operator>=</operator><name>tans</name><operator>+</operator><operator>(</operator><name><name>ttt</name><index>[<expr><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><name>tg</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
<comment type="line">//                    printf("!%d ",ttt[tg/num[j]]);</comment>
                    <expr_stmt><expr><name>tans</name><operator>=</operator><name>tans</name><operator>+</operator><operator>(</operator><name><name>ttt</name><index>[<expr><name>tg</name><operator>/</operator><name><name>num</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
<comment type="line">//            printf("%d\n",tans);</comment>
            <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>tans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name><operator>+</operator><name>anans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
