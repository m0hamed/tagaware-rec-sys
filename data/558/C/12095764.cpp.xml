<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12095764.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a) &gt; (b) ? (a) : (b))</value></define>
<define>#<directive>define</directive> <macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>((a) &lt; (b) ? (a) : (b))</value></define>
<define>#<directive>define</directive> <macro><name>ABS</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>( (X) &gt; 0 ? (X) : ( -(X) ) )</value></define>
<define>#<directive>define</directive> <macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i =a; i &lt;=b ; i++)</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(),a.end()</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>foreach</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>itr</name></type></parameter>)</parameter_list></macro> <value>for(__typeof((c).begin()) itr=(c).begin();itr!=(c).end();itr++)</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>((x)*(x))</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>db</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;var&lt;&lt;" ";</value></define>
<define>#<directive>define</directive> <macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>__gcd(a,b)</value></define>
<define>#<directive>define</directive> <macro><name>p</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>  <value>f(i,a,b) cout&lt;&lt;A[i]&lt;&lt;" ";</value></define>
<define>#<directive>define</directive> <macro><name>sj</name></macro>  <value>cout&lt;&lt;"OK"&lt;&lt;endl;</value></define>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long int</value></define> 
<define>#<directive>define</directive> <macro><name>el</name></macro> <value>cout&lt;&lt;endl;</value></define>

<define>#<directive>define</directive> <macro><name>MOD</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>acos(-1.0)</value></define>
<define>#<directive>define</directive> <macro><name>e</name></macro> <value>exp(1.0)</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1e-9</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>ar</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>moves</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>visited</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name>maxm</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
<comment type="line">//  cout&lt;&lt;v&lt;&lt;" "&lt;&lt;a;el</comment>
             <if>if<condition>(<expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
             <block type="pseudo"><return>return ;</return></block></then></if>
             <expr_stmt><expr><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
             <expr_stmt><expr><name><name>moves</name><index>[<expr><name>v</name></expr>]</index></name><operator>+=</operator><name>a</name></expr>;</expr_stmt>
            
                              <if>if<condition>(<expr><name><name>visited</name><index>[<expr><name>v</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name><operator>/</operator><literal type="number">2</literal><operator>&lt;=</operator><name>maxm</name> <operator>&amp;&amp;</operator> <name>v</name><operator>/</operator><literal type="number">2</literal><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>v</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                               
                              <if>if<condition>(<expr><name><name>visited</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>v</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">2</literal><operator>*</operator><name>v</name><operator>&lt;=</operator><name>maxm</name> <operator>&amp;&amp;</operator> <name>v</name><operator>*</operator><literal type="number">2</literal><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>v</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                              
             <expr_stmt><expr><name><name>visited</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
             <return>return ;</return>
}</block></function>
             
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{
           <expr_stmt><expr><call><name><name>ios</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
           <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
           <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
           <block>{
                     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                     <if>if<condition>(<expr><name>maxm</name><operator>&lt;</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                     <block type="pseudo"><expr_stmt><expr><name>maxm</name><operator>=</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
           }</block>
          
           <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
            <expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
           <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>maxm</argument>)</argument_list></macro>
           <block>{
                     <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>n</name></expr>)</condition><then>
                     <block type="pseudo"><expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
           }</block>
           <decl_stmt><decl><type><name>ll</name></type> <name>minm</name><init>=<expr><literal type="number">10000000000</literal></expr></init></decl>;</decl_stmt>
           <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
           <block>{
                             <if>if<condition>(<expr><name><name>moves</name><index>[<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>&lt;</operator><name>minm</name></expr>)</condition><then>
                             <block type="pseudo"><expr_stmt><expr><name>minm</name><operator>=</operator><name><name>moves</name><index>[<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
           }</block></for>
           <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>minm</name></expr>;</expr_stmt>
    
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
