<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12106296.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>SZ</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>((int)(X).size())</value></define>
<define>#<directive>define</directive> <macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>(X).begin(), (X).end()</value></define>
<define>#<directive>define</directive> <macro><name>REP</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></macro> <value>for (int I = 0; I &lt; (N); ++I)</value></define>
<define>#<directive>define</directive> <macro><name>REPP</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></macro> <value>for (int I = (A); I &lt; (B); ++I)</value></define>
<define>#<directive>define</directive> <macro><name>PER</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>N</name></type></parameter>)</parameter_list></macro> <value>for (int I = (N); I &gt;= 0; --I)</value></define>
<define>#<directive>define</directive> <macro><name>PERR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></macro> <value>for (int I = (A); I &gt;= B; --I)</value></define>
<define>#<directive>define</directive> <macro><name>ITR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>, <parameter><type><name>A</name></type></parameter>)</parameter_list></macro> <value>for (__typeof((A).begin()) I=(A).begin(), _##i=(A).end(); I!=_##i; ++I)</value></define>
<define>#<directive>define</directive> <macro><name>RI</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>scanf("%d", &amp;(X))</value></define>
<define>#<directive>define</directive> <macro><name>RII</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d", &amp;(X), &amp;(Y))</value></define>
<define>#<directive>define</directive> <macro><name>RIII</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></macro> <value>scanf("%d%d%d", &amp;(X), &amp;(Y), &amp;(Z))</value></define>
<define>#<directive>define</directive> <macro><name>DRI</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>int (X); scanf("%d", &amp;X)</value></define>
<define>#<directive>define</directive> <macro><name>DRII</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>)</parameter_list></macro> <value>int X, Y; scanf("%d%d", &amp;X, &amp;Y)</value></define>
<define>#<directive>define</directive> <macro><name>DRIII</name><parameter_list>(<parameter><type><name>X</name></type></parameter>, <parameter><type><name>Y</name></type></parameter>, <parameter><type><name>Z</name></type></parameter>)</parameter_list></macro> <value>int X, Y, Z; scanf("%d%d%d", &amp;X, &amp;Y, &amp;Z)</value></define>
<define>#<directive>define</directive> <macro><name>RS</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>scanf("%s", (X))</value></define>
<define>#<directive>define</directive> <macro><name>CASET</name></macro> <value>int ___T, case_n = 1; scanf("%d ", &amp;___T); while (___T-- &gt; 0)</value></define>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>MS0</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>memset((X), 0, sizeof((X)))</value></define>
<define>#<directive>define</directive> <macro><name>MS1</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>memset((X), -1, sizeof((X)))</value></define>
<define>#<directive>define</directive> <macro><name>LEN</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>strlen(X)</value></define>
<define>#<directive>define</directive> <macro><name>PII</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>VPII</name></macro> <value>vector&lt;pair&lt;int,int&gt; &gt;</value></define>
<define>#<directive>define</directive> <macro><name>PLL</name></macro> <value>pair&lt;long long,long long&gt;</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>LB</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>__builtin_ctz((X))</value></define>
<define>#<directive>define</directive> <macro><name>ONES</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>__builtin_popcount((X))</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>  <specifier>inline</specifier> <type><name>void</name></type> <name>smax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>  <specifier>inline</specifier> <type><name>void</name></type> <name>smin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SIZE</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<define>#<directive>define</directive> <macro><name>LOCALTEST</name></macro> <value>0</value></define> <comment type="line">// change this to 1 to perform localtest on "in.txt"</comment>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>badranges</name></decl>;</decl_stmt>
<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>makerange</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>curh</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">//printf("mr\n");</comment>
    <decl_stmt><decl><type><name>LL</name></type> <name>lef</name></decl>, <decl><type ref="prev"/><name>rig</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>lef</name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name>rig</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>curh</name> <operator>&lt;</operator> <name>h</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>lef</name> <operator>*=</operator> <literal type="number">2LL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rig</name> <operator>*=</operator> <literal type="number">2LL</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rig</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>curh</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <comment type="line">//printf("Finish mr\n");</comment>
    <return>return <expr><call><name>MP</name><argument_list>(<argument><expr><name>lef</name></expr></argument>, <argument><expr><name>rig</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>badrangecovers</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>rig</name> <init>= <expr><name><name>badranges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>S</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>badranges</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>rig</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>curlef</name> <init>= <expr><name><name>badranges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>F</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>currig</name> <init>= <expr><name><name>badranges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>S</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>curlef</name> <operator>&gt;</operator> <name>rig</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>rig</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>rig</name></expr></argument>,<argument><expr><name>currig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>idx</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>rig</name> <operator>&gt;=</operator> <name>r</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <if>if <condition>(<expr><name>LOCALTEST</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <while>while <condition>(<expr><call><name>RII</name><argument_list>(<argument><expr><name>h</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>stillok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>badranges</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>p</name> <init>= <expr><call><name>makerange</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d %I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>stillok</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <comment type="line">//printf("%I64d %I64d %I64d %I64d", i, l, r, ans);</comment>
            <if>if <condition>(<expr><name>ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>badranges</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>makerange</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>goodrange</name> <init>= <expr><call><name>makerange</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>goodrange</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <if>if <condition>(<expr><name><name>goodrange</name><operator>.</operator><name><name>S</name> <argument_list type="generic">&lt; <argument><expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>||</operator> <name><name>goodrange</name><operator>.</operator><name>F</name></name></expr></argument> &gt;</argument_list></name></name> <name><name>p</name><operator>.</operator><name>S</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>stillok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <comment type="line">// join into one good range</comment>
                        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>F</name></name></expr></argument>, <argument><expr><name><name>goodrange</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>p</name><operator>.</operator><name>S</name></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>S</name></name></expr></argument>, <argument><expr><name><name>goodrange</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></else></if>

        }</block></while>

        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>badranges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// test against bad ranges</comment>
        <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>SZ(badranges)</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>badrange</name> <init>= <expr><name><name>badranges</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <comment type="line">//printf("badrange %I64d %I64d vs p %I64d %I64d\n",badrange.F,badrange.S,p.F,p.S);</comment>
            <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>&gt;=</operator> <name><name>badrange</name><operator>.</operator><name>F</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>.</operator><name>S</name></name> <operator>&lt;=</operator> <name><name>badrange</name><operator>.</operator><name>S</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>stillok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>badrange</name><operator>.</operator><name>S</name></name> <operator>&lt;</operator> <name><name>p</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>badrange</name><operator>.</operator><name>F</name></name> <operator>&gt;</operator> <name><name>p</name><operator>.</operator><name>S</name></name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>badrange</name><operator>.</operator><name>F</name></name> <operator>&gt;</operator> <name><name>p</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>badrangecovers</name><argument_list>(<argument><expr><name><name>badrange</name><operator>.</operator><name>F</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>S</name></name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>S</name></name> <operator>=</operator> <name><name>badrange</name><operator>.</operator><name>F</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>p</name><operator>.</operator><name>S</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>F</name></name> <operator>=</operator> <name><name>badrange</name><operator>.</operator><name>S</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block>

        <if>if <condition>(<expr><operator>!</operator><name>stillok</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>p</name><operator>.</operator><name>S</name></name> <operator>==</operator> <name><name>p</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
