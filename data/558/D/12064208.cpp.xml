<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12064208.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl> , <decl><type ref="prev"/><name>idx2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> , <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name><name>A</name><index>[<expr><literal type="number">100050</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">100050</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl> , <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> , <decl><type ref="prev"/><name>r</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lvl</name></decl> , <decl><type ref="prev"/><name>L</name></decl> , <decl><type ref="prev"/><name>R</name></decl> , <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d %I64d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>lvl</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>L</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>R</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>lvl</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>L</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>R</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>R</name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>k</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>r</name> <argument_list type="generic">&lt; <argument><expr><name>L</name> <operator>or</operator> <name>l</name></expr></argument> &gt;</argument_list></name> <name>R</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument> , <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument> , <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>L</name></expr></argument> , <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <if>if<condition>(<expr><name>l</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>idx</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name></expr></argument> , <argument><expr><name>A</name> <operator>+</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l2</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> , <decl><type ref="prev"/><name>r2</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>st</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl> , <decl><type ref="prev"/><name>en</name> <init>= <expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>l2</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>B</name><index>[<expr><name>idx2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>l2</name></expr></argument> , <argument><expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>en</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>B</name><index>[<expr><name>idx2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>en</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>st</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>en</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>en</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>en</name></expr></argument> , <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <if>if<condition>(<expr><name>en</name> <operator>&lt;</operator> <name>r2</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>B</name><index>[<expr><name>idx2</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>en</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><operator>!</operator><name>idx2</name></expr>)</condition><then>       <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>idx2</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>or</operator> <operator>(</operator><name>idx2</name> <operator>==</operator> <literal type="number">1</literal> <operator>and</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>!=</operator> <name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <else>else            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument> , <argument><expr><name><name>B</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>z1</name> <init>= <expr><name>l</name></expr></init></decl> , <decl><type ref="prev"/><name>z2</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>idx2</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <name>z2</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>

            <if>if<condition>(<expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name>z1</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>

            <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument> , <argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument> , <argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></for>
        <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <if>if<condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument> , <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*4 3
1 1 1 1
4 8 10 0
4 12 14 0
*/</comment>
</unit>
