<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12224286.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="block">/*
 * 558D. Guess Your Way Out! II - Set.cpp
 *
 *  Created on: Jul 24, 2015
 *      Author: Osama Hatem
 */</comment>

<include>#<directive>include</directive> <file>&lt;bits/stdtr1c++.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ext/numeric&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{


    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ranges</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <name>h</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%I64d%I64d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>hh</name> <operator>&lt;</operator> <name>h</name></expr>)</condition>
            <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>l</name> <operator>*</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>hh</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><name>ans</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>&lt;</operator> <name>l</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>*</operator><call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <while>while <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>--</operator><call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>first</name> <operator>&gt;</operator> <name>r</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>--</operator><call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>second</name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>--</operator><call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <while>while <condition>(<expr><name>it</name> <operator>=</operator> <call><name><name>ranges</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>it</name> <operator>!=</operator> <call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition>
                <block type="pseudo"><expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
            <if>if <condition>(<expr><name>it</name> <operator>=</operator> <call><name><name>ranges</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>it</name> <operator>!=</operator> <call><name><name>ranges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>it</name> <operator>=</operator> <call><name><name>ranges</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>it</name> <operator>!=</operator> <call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>
                    <operator>&amp;&amp;</operator> <operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>-&gt;</operator><name>second</name> <operator>&gt;=</operator> <name>l</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>temp</name> <init>= <expr><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>temp</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></else></if>
    }</block></while>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>
            <operator>||</operator> <call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name> <operator>-</operator> <call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name><name>ranges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
