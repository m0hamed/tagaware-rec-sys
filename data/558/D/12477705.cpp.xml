<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12477705.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;utility&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<define>#<directive>define</directive> <macro><name>PB</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>MP</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>

<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>yes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>no</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>goLeft</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
  <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while>
  <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>goRight</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
  <while>while<condition>(<expr><name>k</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
  <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>przetnij</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name><name>b</name><operator>.</operator><name>F</name></name><operator>&lt;</operator><name><name>a</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <if>if<condition>(<expr><name><name>b</name><operator>.</operator><name>F</name></name><operator>&gt;</operator><name><name>a</name><operator>.</operator><name>S</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <return>return <expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>S</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call><operator>-</operator><name><name>b</name><operator>.</operator><name>F</name></name><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>F</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>F</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>F</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
  <return>return <expr><name><name>a</name><operator>.</operator><name>F</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>F</name></name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>elementWspolny</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>F</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld%lld%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>L</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>R</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>prz</name><init>=<expr><call><name>MP</name><argument_list>(<argument><expr><call><name>goLeft</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>goRight</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>h</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if<condition>(<expr><name>ans</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>yes</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>prz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
     <comment type="line">// printf("no(%lld, %lld)\n", prz.F, prz.S);</comment>
      <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>prz</name><operator>.</operator><name>F</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>prz</name><operator>.</operator><name>S</name></name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  
  <decl_stmt><decl><type><name>ll</name></type> <name>begin</name><init>=<expr><call><name>goLeft</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>end</name><init>=<expr><call><name>goRight</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>begin</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>begin</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>no</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if<condition>(<expr><call><name><name>yes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><name>begin</name><operator>=</operator><name><name>yes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name></expr><operator>,</operator> <expr><name>end</name><operator>=</operator><name><name>yes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><call><name><name>yes</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>yes</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name>begin</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>begin</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>end</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>end</name></expr></argument>,<argument><expr><name><name>it</name><operator>-&gt;</operator><name>S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></then></if>

  <if>if<condition>(<expr><name>begin</name><operator>&gt;</operator><name>end</name></expr>)</condition><then>
  <block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>no</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>no</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>ll</name></type> <name>wsp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>prev</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>wyn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>stan</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><call><name><name>no</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>no</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
  <block>{
    <if>if<condition>(<expr><name>stan</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>prev</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>prev</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>F</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>przeciecie</name><init>=<expr><call><name>przetnij</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>prev</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>F</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>begin</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>wsp</name><operator>+=</operator><name>przeciecie</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>przeciecie</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>wyn</name><operator>=</operator><call><name>elementWspolny</name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>prev</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>F</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>begin</name></expr></argument>,<argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><comment type="line">//prev+1;</comment>
    }</block></then></if>
    
    <expr_stmt><expr><name>prev</name><operator>=</operator><name><name>it</name><operator>-&gt;</operator><name>F</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stan</name><operator>+=</operator><name><name>it</name><operator>-&gt;</operator><name>S</name></name></expr>;</expr_stmt>
  }</block></for>

  <if>if<condition>(<expr><name>wsp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  
  <if>if<condition>(<expr><name>wsp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>wyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

  <if>if<condition>(<expr><name>wsp</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
