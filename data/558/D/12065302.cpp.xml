<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12065302.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name> ;</typedef>
<define>#<directive>define</directive> <macro><name>maxn</name></macro> <value>200005</value></define>
<struct>struct <name>xx</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <constructor><name>xx</name><parameter_list>()</parameter_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
    <constructor><name>xx</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>_l</name></decl></parameter> ,<parameter><decl><type><name>long</name> <name>long</name></type> <name>_r</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>l</name><operator>=</operator><name>_l</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>_r</name></expr>;</expr_stmt>}</block></constructor>
</public>}</block><decl><name><name>u</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>lu</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>xx</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>xx</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>l</name></name><operator>!=</operator><name><name>b</name><operator>.</operator><name>l</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>a</name><operator>.</operator><name>l</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>l</name></name></expr>;</return></block></then></if>
    <return>return <expr><name><name>a</name><operator>.</operator><name>r</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>r</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a1</name><init>=<expr><name>a</name><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>k</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>b1</name><init>=<expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>k</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>u</name><index>[<expr><name>lu</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>xx</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else 
        <block>{
            <if>if<condition>(<expr><name>a1</name><operator>&gt;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>u</name><index>[<expr><name>lu</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>xx</name><argument_list>(<argument><expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>a1</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>b1</name><operator>&lt;</operator><operator>(</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>u</name><index>[<expr><name>lu</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>xx</name><argument_list>(<argument><expr><name>b1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>u</name><operator>+</operator><name>lu</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type>  <name>now</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>lu</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
    <comment type="line">//  printf("%lld %lld \n",u[i].l,u[i].r);</comment>
        <if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>now</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>now</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>-</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name><operator>=</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name><operator>-</operator><name>now</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>now</name><operator>=</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt>
            }</block></else></if>

        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>now</name><operator>&lt;</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>now</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>sum</name><operator>==</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>sum</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>  
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function></unit>
