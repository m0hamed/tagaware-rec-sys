<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12138161.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Range</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>left</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>right</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>Question</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>answer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Range</name></type> <name>range</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Range</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>left</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>left</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>right</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>right</name></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>a</name><operator>.</operator><name>left</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>left</name></name></expr>;</return>
}</block></function>

<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Question</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Question</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>answer</name></name><operator>==</operator><name><name>b</name><operator>.</operator><name>answer</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name><name>a</name><operator>.</operator><name>range</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>range</name></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>a</name><operator>.</operator><name>answer</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>answer</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>rangesIntersection</name><parameter_list>(<parameter><decl><type><name>Range</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// return false if empty, else result in 1st parameter</comment>
    <if>if <condition>(<expr><name><name>b</name><operator>.</operator><name>left</name></name> <operator>&gt;</operator> <name><name>a</name><operator>.</operator><name>right</name></name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>a</name><operator>.</operator><name>left</name></name><operator>=</operator><name><name>b</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name><operator>.</operator><name>right</name></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>right</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>right</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<comment type="line">// not universal case function, we assume that beginning of range 'a' is exactly before or in last range in vector</comment>
<function><type><name>bool</name></type> <name>rangesComplement</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>ranges</name></decl></parameter>, <parameter><decl><type><name>Range</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// return false if empty, else edit vector</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>index</name><init>=<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>left</name></name> <operator>&gt;</operator> <name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>left</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>right</name></name> <operator>&lt;</operator> <name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><operator>.</operator><name>right</name></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>right</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>right</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>right</name></expr></argument>,<argument><expr><name><name>a</name><operator>.</operator><name>left</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>right</name></name> <operator>&lt;</operator> <name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>left</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>ranges</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>left</name></expr></argument>,<argument><expr><name><name>a</name><operator>.</operator><name>right</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>!</operator><call><name><name>ranges</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>mergeRangesOnLevel</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Question</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>questions</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>range</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>questions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>answer</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>rangesIntersection</name><argument_list>(<argument><expr><name><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>rangesComplement</name><argument_list>(<argument><expr><name>range</name></expr></argument>,<argument><expr><name><name>questions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>range</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>expandRangeToNextLevel</name><parameter_list>(<parameter><decl><type><name>Question</name> <modifier>&amp;</modifier></type><name>question</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>question</name><operator>.</operator><name>level</name></name><operator>==</operator><name>h</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>question</name><operator>.</operator><name>range</name><operator>.</operator><name>left</name></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name><name>question</name><operator>.</operator><name>range</name><operator>.</operator><name>left</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>question</name><operator>.</operator><name>range</name><operator>.</operator><name>right</name></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><name><name>question</name><operator>.</operator><name>range</name><operator>.</operator><name>right</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>question</name><operator>.</operator><name>level</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>expandRangeToNextLevel</name><argument_list>(<argument><expr><name>question</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Question</name></expr></argument>&gt;</argument_list></name></type> <name>questions</name> <argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>q</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>questions</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><block>{<expr><name>i</name></expr>,<expr><name>a</name></expr>,<expr><block>{<expr><name>l</name></expr>,<expr><name>p</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>expandRangeToNextLevel</name><argument_list>(<argument><expr><name><name>questions</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>questions</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>questions</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Question</name></type> <name>tmp</name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>expandRangeToNextLevel</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Range</name></expr></argument>&gt;</argument_list></name></type> <name>ranges</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ranges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name>mergeRangesOnLevel</name><argument_list>(<argument><expr><name>questions</name></expr></argument>,<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Game cheated!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name><name>ranges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">1</literal> <operator>||</operator> <name><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>left</name><operator>!=</operator><name><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>right</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Data not sufficient!"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ranges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>left</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
