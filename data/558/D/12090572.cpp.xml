<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12090572.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>P</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>make_pair(x,y)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MXL</name><init>=<expr><literal type="number">59</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>work</name><parameter_list>(<parameter><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> , <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> , <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sz</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;</operator> <call><name><name>v2</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr></argument> , <argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>swap</name></name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <comment type="line">//   for(int j=0;j&lt;v.size();j++) printf("(%lld,%lld)  " , v[j].first , v[j].second);</comment>
    <comment type="line">//puts("");</comment>
}</block></function>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> , <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>  , <parameter><decl><type><name>long</name> <name>long</name></type> <name>X</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sz</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>st</name><init>=<expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>en</name><init>=<expr><name>sz</name><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>last</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>mid</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>st</name><operator>&lt;=</operator><name>en</name></expr>)</condition><block>{
        <expr_stmt><expr><name>mid</name><operator>=</operator><operator>(</operator><name>st</name><operator>+</operator><name>en</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>X</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>last</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>st</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>en</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <if>if<condition>(<expr><name>last</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
   <comment type="line">// cout&lt;&lt;X&lt;&lt;' '&lt;&lt;sz&lt;&lt;' '&lt;&lt;last&lt;&lt;' '&lt;&lt;v[mid].first&lt;&lt;' '&lt;&lt;v[mid].second&lt;&lt;endl;</comment>
    <return>return <expr><name><name>v</name><index>[<expr><name>last</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;</operator><name>X</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument>  , <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></expr></argument>  &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>MXL</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>h</name></decl> , <decl><type ref="prev"/><name>Q</name></decl>  , <decl><type ref="prev"/><name>sol</name></decl> , <decl><type ref="prev"/><name>node</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>depth</name></decl></parameter> , <parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>depth</name></expr>]</index></name></expr></argument> , <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">//  cout&lt;&lt;depth&lt;&lt;' '&lt;&lt;x&lt;&lt;endl;</comment>
        <return>return;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>depth</name><operator>==</operator><name>h</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>sol</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>node</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>sol</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>depth</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>depth</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name>x</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl></parameter> , <parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><name>L</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name> <operator>||</operator> <operator>!</operator><name>a</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>L</name><operator>--</operator></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name>P</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//cout&lt;&lt;L+1&lt;&lt;' '&lt;&lt;a&lt;&lt;' '&lt;&lt;b&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>a</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <comment type="line">//    puts("");</comment>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>Q</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>Q</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl> , <decl><type ref="prev"/><name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>L</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>L</name></expr></argument> , <argument><expr><name>a</name></expr></argument> , <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else<block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name><init>=<expr><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><operator>(</operator><name>L</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> , <decl><type ref="prev"/><name>r</name><init>=<expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>L</name></expr></argument> , <argument><expr><name>l</name></expr></argument> , <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>l</name><operator>=</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr> <operator>,</operator> <expr><name>r</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>L</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>L</name></expr></argument> , <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block></while>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>h</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>work</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>sol</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>node</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>

}</block></function>
</unit>
