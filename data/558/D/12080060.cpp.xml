<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12080060.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<decl_stmt><decl><type><name>pll</name></type> <name><name>p</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>h</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>h</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>h</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name><operator>&gt;&gt;</operator><name>L</name><operator>&gt;&gt;</operator><name>R</name><operator>&gt;&gt;</operator><name>ans</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>L</name><operator>&lt;&lt;=</operator><name>h</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>R</name><operator>=</operator><name>R</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>h</name><operator>-</operator><name>i</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>ans</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>L</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>r</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name><operator>=</operator><call><name>pll</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>l</name><operator>&lt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then></if></block></for>
	<while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition> <block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;</operator><name>r</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt></block></then></if></block></while>
	<if>if<condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Game cheated!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<elseif>else <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Data not sufficient!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
