<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12221293.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ri</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>scanf("%d", &amp;(X))</value></define>
<define>#<directive>define</directive> <macro><name>pi</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>printf("%d", (X))</value></define>
<define>#<directive>define</directive> <macro><name>mp</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></macro> <value>make_pair(X,Y)</value></define>
<define>#<directive>define</directive> <macro><name>pb</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>push_back(X)</value></define>
<define>#<directive>define</directive> <macro><name>lint</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>1e9</value></define>
<define>#<directive>define</directive> <macro><name>linf</name></macro> <value>1e18</value></define>
<define>#<directive>define</directive> <macro><name>X</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>Y</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>(X).begin(),(X).end()</value></define>
<define>#<directive>define</directive> <macro><name>uni</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro> <value>X.erase(unique(X.begin(), X.end()), X.end());</value></define>


<define>#<directive>define</directive> <macro><name>MAXN</name></macro> <value>100009</value></define>
<define>#<directive>define</directive> <macro><name>T</name></macro> <value>int</value></define>
<define>#<directive>define</directive> <macro><name>neutro</name></macro> <value>0</value></define>


<decl_stmt><decl><type><name>T</name></type> <name><name>sum</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>MAXN</name><operator>*</operator><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>value</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>MAXN</name><operator>*</operator><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>change</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><name>MAXN</name><operator>*</operator><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>T</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return> }</block></function> <comment type="line">// Funcion que mantiene el segment tree</comment>


<comment type="line">// query(1,1,N,i,j)</comment>
<function><type><name>T</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>e</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name> <init>= <expr><name>node</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rt</name> <init>= <expr><name>lt</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  
  <if>if<condition>(<expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition><then><block>{
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></then></if>
	<if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name>e</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>neutro</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><call><name>f</name><argument_list>(<argument><expr><call><name>query</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>query</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<comment type="line">// modify(1,1,N,i,j,val)</comment>
<function><type><name>void</name></type> <name>modify</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>b</name> <operator>+</operator> <name>e</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>lt</name> <init>= <expr><name>node</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rt</name> <init>= <expr><name>lt</name> <operator>|</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  
  <if>if<condition>(<expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>)</condition><then><block>{
    <expr_stmt><expr><name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name>e</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>e</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name><name>value</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name> <operator>=</operator> <name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>change</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><name>lt</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <call><name>f</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>lt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><name><name>sum</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
      <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><name>w</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name><name>sum</name><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name><operator>+</operator><name><name>sum</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>u</name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>modify</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name><operator>+</operator><name><name>sum</name><index>[<expr><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name><operator>+</operator><name><name>sum</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name><operator>+</operator><literal type="char">'a'</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
