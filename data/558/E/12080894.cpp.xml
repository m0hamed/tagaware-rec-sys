<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12080894.cpp"><comment type="line">//Language: GNU C++11</comment>


<comment type="block">/*
PROG:kerim
LANG:C++
*/</comment>
<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>MAXN</name></macro> <value>100009</value></define>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1000000007</value></define>
<define>#<directive>define</directive> <macro><name>LLINF</name></macro> <value>1000000000000000007</value></define>
<define>#<directive>define</directive> <macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>make_pair(x,y)</value></define>
<define>#<directive>define</directive> <macro><name>ff</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>ss</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>x.begin(),x.end()</value></define>
<define>#<directive>define</directive> <macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>push_back(x)</value></define>
<define>#<directive>define</directive> <macro><name>ppb</name><parameter_list>()</parameter_list></macro> <value>pop_back()</value></define>
<define>#<directive>define</directive> <macro><name>tr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>for(typeof((c).begin()) i = (c).begin(); i!=(c).end(); i++)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<comment type="line">//freopen(".in", "r", stdin);</comment>
<comment type="line">//freopen(".out", "w", stdout);</comment>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rr</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ra</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>lazy</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>nd</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>	
}</block></function>
<function><type><name>void</name></type> <name>shift</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>nd</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	
	<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name><name>lazy</name><index>[<expr><name>nd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name><name>lazy</name><index>[<expr><name>nd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>nd</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
}</block></function>
<function><type><name>void</name></type> <name>modi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>y</name> <operator>or</operator> <name>r</name><operator>&lt;</operator><name>x</name></expr>)</condition><then>	
		<block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>x</name> <operator>and</operator> <name>y</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>nd</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>nd</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>modi</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>modi</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>void</name></type> <name>tap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>char</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
		<return>return;</return>		
	}</block></then></if>
	<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>nd</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>		
	<expr_stmt><expr><call><name>tap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tap</name><argument_list>(<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><call><name>int</name><argument_list>(<argument><expr><name><name>rr</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">96</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>	
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>void</name></type> <name>tap1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>y</name><argument_list type="generic">&lt;<argument><expr><name>l</name> <operator>or</operator> <name>x</name></expr></argument>&gt;</argument_list></name><name>r</name></expr>)</condition><then>
	<block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><name>x</name> <operator>and</operator> <name>y</name><operator>&lt;=</operator><name>r</name></expr>)</condition><then>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>s</name><index>[<expr><name>nd</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>shift</name><argument_list>(<argument><expr><name>nd</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>	
	<expr_stmt><expr><call><name>tap1</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tap1</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d\n"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>rr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>m</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>tap1</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>modi</name><argument_list>(<argument><expr><name>last</name></expr></argument>,<argument><expr><name>last</name><operator>+</operator><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>last</name><operator>+=</operator><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for>		
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>last</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">26</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name>modi</name><argument_list>(<argument><expr><name>last</name></expr></argument>,<argument><expr><name>last</name><operator>+</operator><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>last</name><operator>+=</operator><name><name>ra</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for> 
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>tap</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
