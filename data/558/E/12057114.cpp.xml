<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12057114.cpp"><comment type="line">//Language: GNU C++</comment>


<pragma>#<directive>pragma</directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <literal>"/STACK:256000000"</literal><name>)</name></pragma>
<define>#<directive>define</directive> <macro><name>_CRT_SECURE_NO_WARNINGS</name></macro></define>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;deque&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;ctime&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;sstream&gt;</file></include>

<comment type="line">//#include &lt;unordered_map&gt;</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//types</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>

<comment type="line">// for</comment>
<define>#<directive>define</directive> <macro><name>FI</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=0; i&lt;n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FI1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=1; i&lt;=n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FJ</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int j=0; j&lt;n; j++)</value></define>
<define>#<directive>define</directive> <macro><name>FJ1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int j=1; j&lt;=n; j++)</value></define>
<define>#<directive>define</directive> <macro><name>FK</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int k=0; k&lt;n; k++)</value></define>
<define>#<directive>define</directive> <macro><name>FU</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for (int i=0; i&lt;n; i++)</value></define>
<define>#<directive>define</directive> <macro><name>F</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></macro> <value>for (int i=s; i&lt;=e; i++)</value></define>

<comment type="line">//scanf types</comment>
<define>#<directive>define</directive> <macro><name>SI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%d", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>SII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d", &amp;x, &amp;y)</value></define>
<define>#<directive>define</directive> <macro><name>SIII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d %d", &amp;x, &amp;y, &amp;z)</value></define>
<define>#<directive>define</directive> <macro><name>SIIII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d %d %d", &amp;x, &amp;y, &amp;z, &amp;t)</value></define>
<define>#<directive>define</directive> <macro><name>SD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>SP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d", &amp;x.first, &amp;x.second)</value></define>
<define>#<directive>define</directive> <macro><name>SS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>scanf("%s", &amp;x)</value></define>
<define>#<directive>define</directive> <macro><name>SA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FI(n) SI(x[i])</value></define>
<define>#<directive>define</directive> <macro><name>SAA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></macro> <value>FI(n) FJ(m) SI(x[i][j])</value></define>

<define>#<directive>define</directive> <macro><name>Tests</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></macro> <value>int t; SI(t); for(int test=1; test&lt;=t; test++)</value></define>
<define>#<directive>define</directive> <macro><name>WS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>int n; while(SI(n) != EOF)</value></define>

<comment type="line">//scanf with def</comment>
<define>#<directive>define</directive> <macro><name>DI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>int x; SI(x)</value></define>
<define>#<directive>define</directive> <macro><name>DII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>int x, y; SII(x, y);</value></define>
<define>#<directive>define</directive> <macro><name>DIII</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></macro> <value>int x, y, z; SIII(x, y, z);</value></define>
<define>#<directive>define</directive> <macro><name>DD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>double x; SD(x)</value></define>
<define>#<directive>define</directive> <macro><name>DS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>string s; cin&gt;&gt;s</value></define>
<define>#<directive>define</directive> <macro><name>DA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>int n; SI(n); SA(a, n);</value></define>
<define>#<directive>define</directive> <macro><name>DA2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>int n; SI(n); SAA(a, n, n)</value></define>
<define>#<directive>define</directive> <macro><name>DAA</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></macro> <value>int n, m; SII(n, m); SAA(a, n, m)</value></define>

<comment type="line">//input &amp; files</comment>
<define>#<directive>define</directive> <macro><name>FR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>freopen(x, "rt", stdin)</value></define>
<define>#<directive>define</directive> <macro><name>FW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>freopen(x, "wt", stdout)</value></define>
<define>#<directive>define</directive> <macro><name>FRW</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></macro> <value>FR(x); FW(y)</value></define>
<define>#<directive>define</directive> <macro><name>UNSYNC</name><parameter_list>()</parameter_list></macro> <value>ios::sync_with_stdio(false)</value></define>

<comment type="line">//output &amp;&amp; db</comment>
<define>#<directive>define</directive> <macro><name>DB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;" ";</value></define>
<define>#<directive>define</directive> <macro><name>DBN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;"\n";</value></define>
<define>#<directive>define</directive> <macro><name>DBA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>{cout&lt;&lt;#x&lt;&lt;" = [ "; FI(n) cout&lt;&lt;x[i]&lt;&lt;((i+1==n)?" ]":", ");}</value></define>
<define>#<directive>define</directive> <macro><name>DS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>{cout&lt;&lt;#x&lt;&lt;" = [ "; int i = 0, n = x.size(); for(auto x:c) { cout&lt;&lt;x[i]&lt;&lt;((i+1==n)?" ]":", "); i++;}}</value></define>

<define>#<directive>define</directive> <macro><name>PI</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>printf("%d", x)</value></define>
<define>#<directive>define</directive> <macro><name>PIS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>printf("%d ", x)</value></define>
<define>#<directive>define</directive> <macro><name>PIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>printf("%d\n", x)</value></define>
<define>#<directive>define</directive> <macro><name>PA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>FI(n) if (i+1==n) PIN(x) : PIS(x)</value></define>
<define>#<directive>define</directive> <macro><name>PS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>for (auto it: x) cout&lt;&lt;it&lt;&lt;" ";</value></define> 

<comment type="line">//consts</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><literal type="number">3.1415926535897932</literal></expr></init></decl>;</decl_stmt>

<comment type="line">//pair</comment>
<define>#<directive>define</directive> <macro><name>x</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>y</name></macro> <value>second</value></define>

<comment type="line">//functions</comment>
<function><type><name>double</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name><operator>*</operator><name>x</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function><type><name>ll</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name><operator>*</operator><name>x</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function><type><name>ll</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>*</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>x</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100201</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SN</name> <init>= <expr><literal type="number">400</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>AN</name> <init>= <expr><literal type="char">'z'</literal> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>block</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><name>AN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>srt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>fn</name></decl>;</decl_stmt>

	<constructor><name>block</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>srt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <name>fn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name>void</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>rsum</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>fn</name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <name>st</name></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>st</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&gt;=</operator> <name>fn</name></expr>)</condition><then> <block>{
			<macro><name>FI</name><argument_list>(<argument>AN</argument>)</argument_list></macro> <block>{
				<expr_stmt><expr><name><name>rsum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
					<comment type="line">//DB(i); DBN(sum[i]);</comment>
				}</block></then></if>
				<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block>
			<return>return;</return>
		}</block></then></if>

		<if>if <condition>(<expr><name>srt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>rsum</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><name>st</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sum</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><name>st</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		}</block></for>
	}</block></function>

	<function><type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type> <name>rsum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>rev</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>fn</name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <name>st</name></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>

		<if>if <condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>st</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>&gt;=</operator> <name>fn</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>fn</name> <operator>-</operator> <name>st</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><name>AN</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</init> <condition><expr><name>last</name></expr>;</condition> <incr><expr><name>cur</name> <operator>+=</operator> <ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>can</name> <init>= <expr><name><name>rsum</name><index>[<expr><name>cur</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>can</name></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>can</name> <operator>&gt;=</operator> <name>last</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>rsum</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>-=</operator> <name>last</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>sum</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>+=</operator> <name>last</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>last</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					}</block></then>
					<else>else <block>{
						<expr_stmt><expr><name><name>rsum</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>-=</operator> <name>can</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>sum</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>+=</operator> <name>can</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>last</name> <operator>-=</operator> <name>can</name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
			}</block></for>
			
			<expr_stmt><expr><name>srt</name> <operator>=</operator> <ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>


		<if>if <condition>(<expr><name>srt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		
		<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><name>AN</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block>{
			<while>while <condition>(<expr><operator>!</operator><name><name>rsum</name><index>[<expr><name>cur</name></expr>]</index></name></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>+=</operator> <ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block></while>

			<expr_stmt><expr><name><name>rsum</name><index>[<expr><name>cur</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sum</name><index>[<expr><name>cur</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name> <operator>-</operator> <name>st</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
		}</block></for>
	}</block></function>
	
	<function><type><name>void</name></type> <name>push</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>srt</name></expr>)</condition><then> <block>{

			<decl_stmt><decl><type><name>bool</name></type> <name>rev</name> <init>= <expr><name>srt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><name>AN</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>dsum</name> <init>= <expr><name><name>sum</name><index>[<expr><name>cur</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>st</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>fn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<while>while <condition>(<expr><operator>!</operator><name>dsum</name></expr>)</condition> <block>{
					<expr_stmt><expr><name>cur</name> <operator>+=</operator> <ternary><condition><expr><name>rev</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
					<expr_stmt><expr><name>dsum</name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></while>
				<expr_stmt><expr><name>dsum</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><name>st</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
			}</block></for>

			<expr_stmt><expr><name>srt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>

	}</block></function>

	<function><type><name>void</name></type> <name>write</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>push</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>st</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>fn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name><operator>-</operator><name>st</name></expr>]</index></name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>block</name></type> <name><name>bs</name><index>[<expr><literal type="number">500</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//FRW("input.txt", "output.txt");</comment>

	<expr_stmt><expr><call><name>DII</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>bs</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>st</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>FI</name><argument_list>(<argument>n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name>cr</name> <operator>==</operator> <name>SN</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cb</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>bs</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>st</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>bs</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name><name>arr</name><index>[<expr><name>cr</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bs</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name><name>sum</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>bs</name><index>[<expr><name>cb</name></expr>]</index></name><operator>.</operator><name>fn</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cr</name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>cb</name><operator>++</operator></expr>;</expr_stmt>

	<macro><name>FI</name><argument_list>(<argument>k</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><call><name>DIII</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>FJ</name><argument_list>(<argument>cb</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name><name>bs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
		<macro><name>FJ</name><argument_list>(<argument>cb</argument>)</argument_list></macro> <block>{
			<expr_stmt><expr><name><name>bs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//	bs[j].write();</comment>
		}</block>
	}</block>


	<macro><name>FJ</name><argument_list>(<argument>cb</argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>bs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
