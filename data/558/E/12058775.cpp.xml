<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12058775.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>PII</name></macro> <value>pair &lt;int, int&gt;</value></define> 
<decl_stmt><decl><type><name>int</name></type> <name><name>freq</name> <index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lazyz</name> <index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lazya</name> <index>[<expr><literal type="number">8</literal><operator>*</operator><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>storefreq</name> <index>[<expr><literal type="number">28</literal></expr>]</index></name></decl>;</decl_stmt> 
<function><type><name>void</name></type> <name>insert</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>start</name><operator>&gt;</operator><name>i</name> <operator>||</operator> <name>end</name><operator>&lt;</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>start</name><operator>==</operator><name>end</name></expr>)</condition><then>
    <block>{<expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
    <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
}</block></function> 
<function><type><name>void</name></type> <name>pushz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>lazyz</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lazyz</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><name><name>lazyz</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>lazya</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>lazya</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lazyz</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><name><name>lazyz</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lazyz</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
    }</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>pusha</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name>end</name><operator>-</operator><name>start</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>lazya</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+=</operator><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>lazya</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+=</operator><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
        <expr_stmt><expr><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>     
    }</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>zeroout</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if>if <condition>(<expr><name>start</name><operator>!=</operator><name>end</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pushz</name> <argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>pusha</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if>if <condition>(<expr><name>start</name><operator>&gt;</operator><name>j</name> <operator>||</operator> <name>end</name><operator>&lt;</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if> 
    <if>if <condition>(<expr><name>start</name><operator>&gt;=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>end</name><operator>&lt;=</operator><name>j</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>lazyz</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return;</return> 
    }</block></then></if>
    <expr_stmt><expr><call><name>zeroout</name> <argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>zeroout</name> <argument_list>(<argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
}</block></function>
<function><type><name>void</name></type> <name>update</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>start</name><operator>!=</operator><name>end</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pushz</name> <argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>pusha</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>start</name><operator>&gt;</operator><name>j</name> <operator>||</operator> <name>end</name><operator>&lt;</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if> 
    <if>if <condition>(<expr><name>start</name><operator>&gt;=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>end</name><operator>&lt;=</operator><name>j</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>lazya</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>pusha</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <return>return;</return> 
    }</block></then></if>
    <expr_stmt><expr><call><name>update</name> <argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>update</name> <argument_list>(<argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>=</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name><operator>+</operator><name><name>freq</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</expr_stmt> 
}</block></function>
<function><type><name>int</name></type> <name>query</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seg</name></decl></parameter>)</parameter_list>
<block>{<if>if<condition>(<expr><name>start</name><operator>&gt;</operator><name>j</name> <operator>||</operator><name>end</name><operator>&lt;</operator><name>i</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>start</name><operator>!=</operator><name>end</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>pushz</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pushz</name> <argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name>pusha</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if>if <condition>(<expr><name>start</name><operator>&gt;=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>end</name><operator>&lt;=</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>freq</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name>seg</name></expr>]</index></name></expr>;</return></block></then></if> 
    <return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>query</name><argument_list>(<argument><expr><operator>(</operator><name>start</name><operator>+</operator><name>end</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>seg</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>leng</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>leng</name> <operator>&gt;&gt;</operator> <name>Q</name></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name><operator>&lt;</operator><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>S</name><index>[<expr><name>g</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name><operator>&lt;</operator><name>Q</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&gt;&gt;</operator> <name>j</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt> 
        <expr_stmt><expr><name>i</name><operator>--</operator></expr><operator>,</operator> <expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>storefreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>storefreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>zeroout</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>curi</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>(<expr><name>k</name></expr>)</condition><then>
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><call><name>update</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>curi</name></expr></argument>, <argument><expr><name>curi</name><operator>+</operator><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><name>curi</name><operator>+=</operator><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> 
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control>
            <block>{<if>if <condition>(<expr><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><call><name>update</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>curi</name></expr></argument>, <argument><expr><name>curi</name><operator>+</operator><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><name>curi</name><operator>+=</operator><name><name>storefreq</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> 
            }</block></for>
        }</block></else></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name><operator>&lt;</operator><name>leng</name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>leng</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><call>(<name>char</name>)<argument_list>(<argument><expr><literal type="char">'a'</literal><operator>+</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
