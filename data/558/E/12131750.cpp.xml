<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12131750.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>fi</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>se</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></macro> <value>x.begin(), x.end()</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100020</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>Lint</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>beg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ar</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name><name>st</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>f</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>st</name></decl></parameter> )</parameter_list> <block>{

    <decl_stmt><decl><type><name><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>st</name><operator>.</operator><name>lower_bound</name></name><argument_list>( <argument><expr><call><name>ii</name><argument_list>( <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>it2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>it2</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><name>beg</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>it</name> <operator>!=</operator> <call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block>{
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>&gt;</operator> <name>l</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><call><name>ii</name><argument_list>( <argument><expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg</name> <operator>+=</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name><operator>-</operator><name>l</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>( <argument><expr><name>it</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <name>it2</name></expr>;</expr_stmt>
    }</block></then></if>
    <for>for<control>(<init>;</init><condition><expr><name>it</name> <operator>!=</operator> <call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>&lt;=</operator> <name>r</name></expr>;</condition><incr/>)</control> <block>{

        <if>if<condition>( <expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>&gt;</operator> <name>r</name><operator>+</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><call><name>ii</name><argument_list>( <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>beg</name> <operator>+=</operator> <name>r</name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>( <argument><expr><name>it</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>beg</name> <operator>+=</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name> <operator>-</operator> <name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>it2</name> <operator>=</operator> <name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>( <argument><expr><name>it2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>( <expr><name>h</name> <operator>!=</operator> <name>beg</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><call><name>ii</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>beg</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <comment type="line">//freopen("asd.in.rc","r",stdin);</comment>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>,<argument><expr><name>ar</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>a</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>a</name></expr>;</condition><incr/>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>( <expr><name>j</name> <operator>&lt;=</operator> <name>a</name> <operator>&amp;&amp;</operator> <name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><name><name>st</name><index>[<expr><name><name>ar</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>( <argument><expr><call><name>ii</name><argument_list>( <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    }</block></for>

    <while>while<condition>( <expr><name>q</name><operator>--</operator></expr> )</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>beg</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>c</name></expr> )</condition><then> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>f</name><argument_list>( <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for></block></then>
        <else>else <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>f</name><argument_list>( <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for></block></else></if>

    }</block></while>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{

        <for>for<control>(<init><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>it</name> <init>= <expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl> ;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>st</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr> )</control> <block>{

            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>it</name><operator>-&gt;</operator><name>fi</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>se</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>ar</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt></block></for>

        }</block></for>

    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>ar</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
