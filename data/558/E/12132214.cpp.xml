<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12132214.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>1e18</value></define>
<define>#<directive>define</directive> <macro><name>f</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;pi,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pi</name></macro> <value>pair&lt;ll,ll&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>emplace_back</value></define>

<define>#<directive>define</directive> <macro><name>ll</name></macro> <value>long long</value></define>
<define>#<directive>define</directive> <macro><name>s</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>for(int i=0;i&lt;n;i++)</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>fr</name></macro> <value>freopen("input-4.txt","r",stdin)</value></define>
<define>#<directive>define</directive> <macro><name>fo</name></macro> <value>freopen("output-4.txt","w",stdout)</value></define>
<decl_stmt><decl><type><name>int</name></type> <name><name>tree</name><index>[<expr><literal type="number">400011</literal></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lazy</name><index>[<expr><literal type="number">400011</literal></expr>]</index><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>idx</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>()</parameter_list><block>{}</block></constructor>
	<constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_idx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_w</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><name>l</name><operator>=</operator><name>_l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name><operator>=</operator><name>_r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx</name><operator>=</operator><name>_idx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>w</name><operator>=</operator><name>_w</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lazy_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<function><type><name>node</name></type> <name>left</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><call><name>node</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>idx</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name>node</name></type> <name>right</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><call><name>node</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>idx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function><type><name>void</name></type> <name>lazy_update</name><parameter_list>()</parameter_list><block>{
		<if>if<condition>(<expr><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return ;</return></block></then></if>
		<if>if<condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>lazy</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lazy</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>idx</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list><block>{
		<if>if<condition>(<expr><name>r</name><operator>&lt;</operator><name>s</name> <operator>or</operator> <name><name>e</name><argument_list type="generic">&lt;<argument><expr><name>l</name> <operator>or</operator> <name>s</name></expr></argument>&gt;</argument_list></name><name>e</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
		<if>if<condition>(<expr><name>s</name><operator>&lt;=</operator><name>l</name> <operator>and</operator> <name>r</name><operator>&lt;=</operator><name>e</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><name>val</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>lazy_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>left</name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>right</name><argument_list>()</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>=</operator><name><name>tree</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name><operator>+</operator><name><name>tree</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>idx</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>e</name></decl></parameter>)</parameter_list><block>{
		<if>if<condition>(<expr><name>r</name><operator>&lt;</operator><name>s</name> <operator>or</operator> <name><name>e</name><argument_list type="generic">&lt;<argument><expr><name>l</name> <operator>or</operator> <name>s</name></expr></argument>&gt;</argument_list></name><name>e</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>s</name><operator>&lt;=</operator><name>l</name> <operator>and</operator> <name>r</name><operator>&lt;=</operator><name>e</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>tree</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>w</name></expr>]</index></name></expr>;</return></block></then></if>
		<return>return <expr><call><name>left</name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>right</name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

</public>}</block>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">4</literal>*n</argument>)</argument_list></macro><block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<comment type="line">//tree[i+1][j]=-1;</comment>
			<expr_stmt><expr><name><name>lazy</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block>
	}</block>
	<decl_stmt><decl><type><name>node</name></type> <name><name>stree</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>node</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>stree</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>w</name><operator>=</operator><literal type="number">1</literal><operator>-</operator><name>w</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>v</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;v[i]&lt;&lt;" ";</comment>
		}</block>
		<if>if<condition>(<expr><name>w</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>w</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>stree</name><index>[<expr><literal type="number">25</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stree</name><index>[<expr><literal type="number">25</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>s</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stree</name><index>[<expr><literal type="number">25</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>s</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
			<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
		<comment type="line">//cout&lt;&lt;"\n";</comment>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>stree</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//	cout&lt;&lt;v[i]&lt;&lt;" ";</comment>
		}</block>
	}</block></while>
	<expr_stmt><expr><name>s</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">26</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>stree</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>s</name><operator>+=</operator><call><name>char</name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>s</name></expr>;</expr_stmt>
}</block></function>
</unit>
