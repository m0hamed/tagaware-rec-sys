<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12052660.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cassert&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<define>#<directive>define</directive> <macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>( (int) (x).size() )</value></define>
<define>#<directive>define</directive> <macro><name>CNT</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>( (s).find(x) != (s).end() )</value></define>
<define>#<directive>define</directive> <macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>(x).begin(), (x).end()</value></define>
<define>#<directive>define</directive> <macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>fi</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>se</name></macro> <value>second</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<comment type="line">// const int INF = 1e9;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SIGMA</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><name>SIGMA</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>segment_tree</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>lz</name><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>C</name><index>[<expr><name>MAXN</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <constructor><name>segment_tree</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>lz</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>C</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>
        <expr_stmt><expr><name><name>C</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>lz</name><index>[<expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>lz</name><index>[<expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>L</name> <operator>||</operator> <name>R</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>lz</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>M</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>L</name> <operator>||</operator> <name>R</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>R</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then>
        <block>{
            <return>return <expr><name><name>C</name><index>[<expr><name>cur</name></expr>]</index></name></expr>;</return>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <return>return 
            <expr><call><name>query</name><argument_list>(<argument><expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>M</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>+</operator> 
            <call><name>query</name><argument_list>(<argument><expr><name>cur</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>M</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>j</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block> <decl><name><name>tree</name><index>[<expr><name>SIGMA</name></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>Q</name></expr></argument>, <argument><expr><name>S</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <while>while<condition>(<expr><name>Q</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>SIGMA</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>tree</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>

        <if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>SIGMA</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>s</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>SIGMA</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>l</name><operator>--</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><name><name>tree</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <name>s</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>s</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></while>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>SIGMA</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></block></for>
    }</block></for>

    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
