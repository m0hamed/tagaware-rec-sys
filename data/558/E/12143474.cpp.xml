<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12143474.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>rd</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>ret</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>sgn</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<while>while <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal><operator>)</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>sgn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>sgn</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>pt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>pt</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<define>#<directive>define</directive> <macro><name>lson</name></macro> <value>(id&lt;&lt;1)</value></define>
<define>#<directive>define</directive> <macro><name>rson</name></macro> <value>(id&lt;&lt;1|1)</value></define>
<define>#<directive>define</directive> <macro><name>L</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>tree[x].l</value></define>
<define>#<directive>define</directive> <macro><name>R</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>tree[x].r</value></define>
<define>#<directive>define</directive> <macro><name>Hav</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>tree[x].hav</value></define>
<define>#<directive>define</directive> <macro><name>Siz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>tree[x].siz</value></define>
<define>#<directive>define</directive> <macro><name>Lazy</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>tree[x].lazy</value></define>
<struct>struct <name>Tree</name> <block>{<public type="default">
	<struct>struct <name>Node</name> <block>{<public type="default">
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>siz</name></decl>;</decl_stmt><comment type="line">//siz??????</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>hav</name></decl>;</decl_stmt><comment type="line">//hav???????? </comment>
		<decl_stmt><decl><type><name>int</name></type> <name>lazy</name></decl>;</decl_stmt><comment type="line">//lazy?2?????? lazy?1????????1</comment>
	</public>}</block><decl><name><name>tree</name><index>[<expr><name>N</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</struct>
	<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>l</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>r</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>Siz</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>Down</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Siz</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Siz</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Lazy</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Lazy</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Hav</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Lazy</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Lazy</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></function>
	<function><type><name>void</name></type> <name>Up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Hav</name><argument_list>(<argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Hav</name><argument_list>(<argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>updata</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>l</name> <operator>==</operator> <call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> 
				<block type="pseudo"><expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>Siz</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>Hav</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><call><name>Lazy</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>Down</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>updata</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name>mid</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>updata</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><call><name>updata</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>updata</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>Up</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>l</name> <operator>==</operator> <call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>r</name></expr>)</condition><then> <block>{
			<return>return <expr><call><name>Hav</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name>Down</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><call><name>L</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>R</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>r</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name>mid</name> <operator>&lt;</operator> <name>l</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>lson</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>query</name><argument_list>(<argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>rson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>Up</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>ans</name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>Tree</name></type> <name><name>alph</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sum</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>alph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>alph</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>updata</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>rd</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>sum</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>alph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>alph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>updata</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>tim</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>in</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">25</literal></expr><operator>,</operator> <expr><name>in</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		<for>for <control>(<init>;</init><condition><expr><name>tim</name><operator>--</operator></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>in</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>alph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>updata</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name> <operator>+</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>+=</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></while>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>alph</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
			}</block></then></if></block></for>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
