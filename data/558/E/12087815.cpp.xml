<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12087815.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>lazy</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name>val</name> <operator>=</operator> <name>lazy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block> <decl><name><name>seg</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>lazy_push</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>lazy</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lazy_val</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>lazy_push</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>l</name> <operator>&gt;</operator> <name>y</name> <operator>or</operator> <name>r</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then>	<block type="pseudo"><return>return ;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>x</name> <operator>and</operator> <name>r</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <name>lazy_val</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>lazy_push</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lazy_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>lazy_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>val</name> <operator>+</operator> <name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>lazy_push</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>l</name> <operator>&gt;</operator> <name>y</name> <operator>or</operator> <name>r</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then>	<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>l</name> <operator>&gt;=</operator> <name>x</name> <operator>and</operator> <name>r</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then>	<block type="pseudo"><return>return <expr><name><name>seg</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nd</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return></block></then></if></elseif>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<return>return <expr><operator>(</operator><call><name>query</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>query</name><argument_list>(<argument><expr><name>nd</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal><operator>*</operator><name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>seg</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>lazy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>A</name></expr>;</expr_stmt>


	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;i&lt;&lt;" --&gt; "&lt;&lt;cnt[i]&lt;&lt;endl;</comment>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>start</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>k</name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><name>temp</name> <operator>=</operator> <literal type="number">25</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>temp</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></else></if>
			<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>temp</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>temp</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>start</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>temp</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></while>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">26</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>char</name></type> <name>temp</name> <init>= <expr><literal type="char">'a'</literal> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>temp</name></expr>;</expr_stmt>
			}</block></then></if></block></for></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
