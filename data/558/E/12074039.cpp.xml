<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12074039.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>ii</name></expr></argument> &gt;</argument_list></name></type> <name>vii</name>;</typedef>

<define>#<directive>define</directive> <macro><name>INF</name></macro> <value>0x3F3F3F3F</value></define>
<define>#<directive>define</directive> <macro><name>LINF</name></macro> <value>0x3F3F3F3F3F3F3F3FLL</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro> <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro> <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pq</name></macro> <value>priority_queue</value></define>
<define>#<directive>define</directive> <macro><name>LSONE</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></macro> <value>((s)&amp;(-s))</value></define> <comment type="line">//LASTBIT</comment>
<define>#<directive>define</directive> <macro><name>DEG_to_RAD</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></macro>   <value>(X * PI / 180)</value></define>
<define>#<directive>define</directive> <macro><name>F</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>S</name></macro> <value>second</value></define>

 
<ifdef>#<directive>ifdef</directive> <name>ONLINE_JUDGE</name></ifdef>
<define>#<directive>define</directive> <macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></macro></define>
<else>#<directive>else</directive></else>
<define>#<directive>define</directive> <macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></macro> <value>fprintf(stderr,args)</value></define>
<endif>#<directive>endif</directive></endif>

<comment type="line" format="doxygen">//////////////////////</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>	
<comment type="line" format="doxygen">//////////////////////</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>segtree</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>tr</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>lz</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name>segtree</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>tr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lz</name></expr></argument>,<argument><expr><name>INF</name></expr></argument>,<argument><expr><sizeof>sizeof <name>lz</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tr</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>tr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lz</name></expr></argument>,<argument><expr><name>INF</name></expr></argument>,<argument><expr><sizeof>sizeof <name>lz</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>propagate</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> )</parameter_list>
	<block>{
		<if>if<condition>( <expr><name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name> <operator>==</operator> <name>INF</name></expr> )</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
		<expr_stmt><expr><name><name>tr</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if>if<condition>( <expr><name>l</name> <operator>!=</operator> <name>r</name></expr> )</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><operator>(</operator><name>no</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>nxt</name></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>nxt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name>INF</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>update</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>propagate</name><argument_list>(<argument><expr><name>no</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><name>i</name> <operator>||</operator> <name>l</name></expr></argument>&gt;</argument_list></name><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
		<if>if<condition>( <expr><name>l</name><operator>&gt;=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;=</operator><name>j</name></expr> )</condition><then>
		<block>{
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>propagate</name><argument_list>(<argument><expr><name>no</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
			<return>return;</return>
		}</block></then></if> 
		<decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><operator>(</operator><name>no</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>nxt</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tr</name><index>[<expr><name>no</name></expr>]</index></name> <operator>=</operator> <name><name>tr</name><index>[<expr><name>nxt</name></expr>]</index></name><operator>+</operator><name><name>tr</name><index>[<expr><name>nxt</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>int</name></type> <name>query</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>no</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter> )</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>propagate</name><argument_list>(<argument><expr><name>no</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><name>i</name> <operator>||</operator> <name>l</name></expr></argument>&gt;</argument_list></name><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>( <expr><name>l</name><operator>&gt;=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;=</operator><name>j</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><name><name>tr</name><index>[<expr><name>no</name></expr>]</index></name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><operator>(</operator><name>no</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>query</name><argument_list>(<argument><expr><name>nxt</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

</public>}</block>;</struct>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>segtree</name></type> <name><name>tr</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//ios::sync_with_stdio(0);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>tr</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>cnt</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
		}</block></for>
		<if>if<condition>(<expr><name>c</name></expr>)</condition><then>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
			<block>{	
				<expr_stmt><expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>

	}</block></while>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>( <expr><name><name>tr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>	</unit>
