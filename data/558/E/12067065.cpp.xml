<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12067065.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxc</name><init>=<expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxt</name><init>=<expr><literal type="number">300005</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>_getnum</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>xx</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>tt</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>tt</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>tt</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>tt</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <for>for<control>(<init><expr><name>xx</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>tt</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>tt</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>tt</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>xx</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>tt</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name>M</name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>maxc</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>splay_node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ls</name></decl>,<decl><type ref="prev"/><name>rs</name></decl>,<decl><type ref="prev"/><name>fath</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>p</name><index>[<expr><name>maxt</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>null_node</name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>tot_node</name></decl>,<decl><type ref="prev"/><name><name>Z_rib</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>Z_top</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>_new_splay_node</name><parameter_list>()</parameter_list>
<block>{
    <if>if<condition>(<expr><name>Z_top</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>Z_rib</name><index>[<expr><operator>--</operator><name>Z_top</name></expr>]</index></name></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><operator>++</operator><name>tot_node</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>_recycle_splay_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>null_node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>Z_rib</name><index>[<expr><name>Z_top</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>_pushup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>+</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name><operator>+</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
}</block></function>
<struct>struct <name>splay_tree</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>_build</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>i</name><operator>=</operator><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>i</name><operator>=</operator><name>N</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><literal type="number">0</literal><operator>&lt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_build</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name><operator>=</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>l</name><operator>&lt;</operator><name>i</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_build</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_build</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
        <expr_stmt><expr><call><name>_pushup</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>_build</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>_build</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tot_node</name><operator>=</operator><name>N</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>_zig</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fath</name></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>k</name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>root</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>j</name><operator>==</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_pushup</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>_zag</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fath</name></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>k</name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>root</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name>j</name><operator>==</operator><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_pushup</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>_splay</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>i</name><operator>!=</operator><name>root</name></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>j</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fath</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>j</name><operator>==</operator><name>root</name><operator>||</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>==</operator><name>root</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>i</name><operator>==</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_zig</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>_zag</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>j</name><operator>==</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>i</name><operator>==</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_zig</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>_zig</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>_zag</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>_zig</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if></elseif>
            <else>else 
            <block>{
                <if>if<condition>(<expr><name>i</name><operator>==</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_zag</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>_zag</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name>_zig</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>_zag</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></else></if>
        }</block></while>
    }</block></function>
    <function><type><name>int</name></type> <name>_find_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>root</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/*
        if(x==0)
        {
            for(;p[i].ls!=0;i=p[i].ls);
            return i;
        }
        */</comment>
        <while>while<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
        <block>{
            <if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>x</name><operator>-=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr><operator>,</operator><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>;</expr_stmt></block></else></if>
        }</block></while>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>_find_left_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>_splay</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>;</init><condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <return>return <expr><name>i</name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>_find_right_node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>_splay</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>;</init><condition><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>!=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
        <return>return <expr><name>i</name></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>_insert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>root</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>root</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <while>while<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>+=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>;</expr_stmt></block></then>
                <else>else 
                <block>{
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>_splay</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>x</name><operator>-=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>i</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>_splay</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></else></if>
            }</block></else></if>
        }</block></while>
    }</block></function>
    <function><type><name>void</name></type> <name>_dfs_recycle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_dfs_recycle</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_dfs_recycle</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>+=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_recycle_splay_node</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name>_output_dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
    <block>{
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_output_dfs</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        
        <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>N</name><operator>+</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>N</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><then>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></then></if>
        
        <comment type="block">/*
        printf("p[%2d]  ",i);
        printf("ch=%c  ",p[i].ch);
        printf("c=%d  ",p[i].c);
        printf("count=%d  ",p[i].count);
        printf("ls=%d  ",p[i].ls);
        printf("rs=%d\n",p[i].rs);
        */</comment>
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_output_dfs</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
    <function><type><name>void</name></type> <name>_output</name><parameter_list>()</parameter_list>
    <block>{
        <expr_stmt><expr><call><name>_output_dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
</public>}</block><decl><name>T</name></decl>,<decl><type ref="prev"/><name>T1</name></decl>,<decl><type ref="prev"/><name>T2</name></decl>;</struct>
<function><type><name>void</name></type> <name>_split</name><parameter_list>(<parameter><decl><type><name>splay_tree</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>splay_tree</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>cl</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>=</operator><call><name><name>A</name><operator>.</operator><name>_find_node</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_splay</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cl</name><operator>=</operator><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ls</name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>cl</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>==</operator><name>x</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><call><name><name>A</name><operator>.</operator><name>_find_right_node</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
        <expr_stmt><expr><name>j</name><operator>=</operator><call><name>_new_splay_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ch</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><name>cl</name><operator>+</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>-=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>_pushup</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_insert</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
    }</block></else></if>
    
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_splay</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_splay</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rs</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fath</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>_pushup</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>.</operator><name>root</name></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>_rebuild</name><parameter_list>(<parameter><decl><type><name>splay_tree</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ty</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_dfs_recycle</name></name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><operator>.</operator><name>root</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>ty</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>i</name><operator>=</operator><call><name>_new_splay_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name><operator>=</operator><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></then>
    <else>else
    <block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">25</literal></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>i</name><operator>=</operator><call><name>_new_splay_node</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ch</name><operator>=</operator><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>count</name><operator>=</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>n</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>_merge</name><parameter_list>(<parameter><decl><type><name>splay_tree</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><name>splay_tree</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name><operator>=</operator><name><name>B</name><operator>.</operator><name>root</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><operator>.</operator><name>root</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name><operator>=</operator><name><name>p</name><index>[<expr><name><name>A</name><operator>.</operator><name>root</name></name></expr>]</index></name><operator>.</operator><name>count</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>_insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>_debug</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"T::\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>_output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"T1::\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>T1</name><operator>.</operator><name>_output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"T2::\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>T2</name><operator>.</operator><name>_output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("datax.in","r",stdin);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>_getnum</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>_getnum</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>_build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
    _debug();
    */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>_getnum</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>_getnum</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>_getnum</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        printf("%d :: %d %d %d\n",i,l,r,k);
        if(i==6)
        {
            _debug();
        }
        */</comment>
        <expr_stmt><expr><call><name>_split</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        if(i==6)
        {
            _debug();
        }
        */</comment>
        <expr_stmt><expr><call><name>_split</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        if(i==6)
        {
            _debug();
        }
        */</comment>
        <expr_stmt><expr><call><name>_rebuild</name><argument_list>(<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        if(i==6)
        {
            _debug();
        }
        */</comment>
        <expr_stmt><expr><call><name>_merge</name><argument_list>(<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        if(i==6)
        {
            _debug();
        }
        */</comment>
        <expr_stmt><expr><call><name>_merge</name><argument_list>(<argument><expr><name>T</name></expr></argument>,<argument><expr><name>T1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
        _debug();
        j=0;
        */</comment>
    }</block></for>
    <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>_output</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
