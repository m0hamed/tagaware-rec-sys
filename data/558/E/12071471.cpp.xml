<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12071471.cpp"><comment type="line">//Language: GNU C++</comment>


<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iomanip&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cmath&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;set&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<else>#<directive>else</directive></else>
<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<endif>#<directive>endif</directive></endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>ms</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></macro> <value>memset(s, n, sizeof(s))</value></define>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a; i &lt; b; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FORd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i = a - 1; i &gt;= b; i--)</value></define>
<define>#<directive>define</directive> <macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>int((a).size())</value></define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pl</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<expr_stmt><expr><name>r</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>}</block></while> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxc</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>st</name><index>[<expr><name>maxc</name></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lz</name><index>[<expr><name>maxc</name></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><name>maxc</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><index>[<expr><name>L</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal> <operator>==</operator> <name>c</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>R</name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name>R</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>R</name> <operator>||</operator> <name>y</name> <operator>&lt;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>L</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</return></block></then></if>
	<return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>query</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>L</name> <operator>&lt;</operator> <name>R</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lz</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><operator>!</operator><name><name>st</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if <condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>s</name><index>[<expr><name>L</name></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>+</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>p</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>L</name> <operator>+</operator> <name>R</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>ms</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>maxc</argument>)</argument_list></macro> <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>k</name></expr>)</condition><then> <block>{
		<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>maxc</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <name>cur</name></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
	}</block></then>
	<else>else <block>{
		<macro><name>FORd</name><argument_list>(<argument>i</argument>, <argument>maxc</argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <name>cur</name></expr></argument>, <argument><expr><name>L</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>ms</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ms</name><argument_list>(<argument><expr><name>lz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>maxc</argument>)</argument_list></macro> <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>q</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>maxc</argument>)</argument_list></macro> <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<endif>#<directive>endif</directive></endif>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<ifndef>#<directive>ifndef</directive> <name>ONLINE_JUDGE</name></ifndef>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTime elapsed: %dms"</literal></expr></argument>, <argument><expr><literal type="number">1000</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<endif>#<directive>endif</directive></endif>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
