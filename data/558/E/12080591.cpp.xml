<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12080591.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;bits/stdc++.h&gt;</file></include>
<define>#<directive>define</directive> <macro><name>fu</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;=b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>fd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&gt;=b;i--)</value></define>
<define>#<directive>define</directive> <macro><name>mid</name></macro> <value>(l+r)/2</value></define>
<define>#<directive>define</directive> <macro><name>N</name></macro> <value>100005</value></define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>t</name><index>[<expr><literal type="number">27</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">27</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>int</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call><operator>==</operator><name>j</name><operator>)</operator></expr>;</expr_stmt> <return>return;</return> }</block></then></if>
    <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name><operator>+</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>lazy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>lazy</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>r</name><argument_list type="generic">&lt;<argument><expr><name>p</name> <operator>||</operator> <name>l</name></expr></argument>&gt;</argument_list></name><name>q</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>p</name><operator>&lt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;=</operator><name>q</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator> <call><name>sum</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>sum</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>lazy</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>l</name><operator>&gt;</operator><name>q</name> <operator>||</operator> <name>r</name><operator>&lt;</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>p</name><operator>&lt;=</operator><name>l</name> <operator>&amp;&amp;</operator> <name>r</name><operator>&lt;=</operator><name>q</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>u</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>l</name><operator>!=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt></block></then></if>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr>]</index></name><operator>+</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>lazy</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="char">'a'</literal><operator>+</operator><name>j</name></expr>;</expr_stmt> <return>return;</return> }</block></then></if>
    <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("a.txt","r",stdin);</comment>
    <comment type="line">//freopen("a.ttt","w",stdout);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>cin</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getline</name><argument_list>(<argument><expr><name>cin</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name><operator>=</operator><literal type="char">'0'</literal><operator>+</operator><name>s</name></expr>;</expr_stmt>
    <macro><name>fu</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>sl</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>fu</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>q</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>trc</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>fu</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>sum</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block>
        <expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>trc</name><operator>=</operator><name>l</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <macro><name>fu</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>trc</name></expr></argument>,<argument><expr><name>trc</name><operator>+</operator><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>trc</name><operator>+=</operator><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then> <else>else <block>{
            <macro><name>fd</name><argument_list>(<argument>j</argument>,<argument><literal type="number">25</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>trc</name></expr></argument>,<argument><expr><name>trc</name><operator>+</operator><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>trc</name><operator>+=</operator><name><name>sl</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block>
    <macro><name>fu</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">25</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>ans</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>s</name></expr>;</expr_stmt>
}</block></function>
</unit>
