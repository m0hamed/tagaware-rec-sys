<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12108903.cpp"><comment type="line">//Language: MS C++</comment>


<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;map&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;vector&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;fstream&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;string&gt;</file></include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>CN</name><init>=<expr><literal type="number">26</literal></expr></init></decl>, <decl><type ref="prev"/><name>CN1</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><name>CN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>A1</name><index>[<expr><name>CN</name></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>NeedFun</name><parameter_list>(<parameter><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t3</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>beg</name></decl>, <decl><type ref="prev"/><name>endd</name></decl>, <decl><type ref="prev"/><name>order</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>beg</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last</name> <operator>=</operator>  <name>l</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>t1</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name><operator>!=</operator><name>t2</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>t3</name></expr></incr>)</control>
	<block>{
		<comment type="line">//cout&lt;&lt;p-&gt;second.second.second[i]&lt;&lt;' '&lt;&lt;last&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>last</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>last</name><operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><name>last</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name></expr>;</init> <condition><expr><name>i</name><operator>!=</operator><name>t2</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>t3</name></expr></incr>)</control>
	<block>{	
		<comment type="line">//cout&lt;&lt;p-&gt;second.second.second[i]&lt;&lt;' '&lt;&lt;last&lt;&lt;endl;</comment>
		<expr_stmt><expr><name><name>A1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>				
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>NeedFun2</name><parameter_list>(<parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t3</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>A</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>t1</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>!=</operator><name>t2</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>t3</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>beg</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">//cout&lt;&lt;A[i]&lt;&lt;' ';</comment>
	}</block></for>
}</block></function>


<function><type><name>void</name></type> <name>Fun_Main</name><parameter_list>(<parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>m1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>last</name></decl>, <decl><type ref="prev"/><name>beg</name></decl>, <decl><type ref="prev"/><name>endd</name></decl>, <decl><type ref="prev"/><name>order</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>upper_bound</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>order</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>order</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>NeedFun</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>NeedFun</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>CN1</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	
	<expr_stmt><expr><name>beg</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>endd</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last</name> <operator>=</operator>  <name>l</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
	

	<comment type="line">//delete [] p-&gt;second.second.second;</comment>
	<expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>beg</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>l</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>beg</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>CN</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>m1</name><index>[<expr><name>beg</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>beg</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>order</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>NeedFun2</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>beg</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>NeedFun2</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>beg</name></expr></argument>, <argument><expr><name>CN1</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>endd</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>CN</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if>if<condition>(<expr><name>order</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>NeedFun2</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>NeedFun2</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>CN1</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>A1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<comment type="line">//	ifstream ff("file.txt");</comment>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>m1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>p0</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>ignore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>char</name></type> <name>C</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>C</name><operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//cin&gt;&gt;C;</comment>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>CN</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>C</name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
<comment type="line" format="doxygen">/////</comment>
	<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>,<argument><expr><name>int</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
	<block>{	
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
		<comment type="line">//ff&gt;&gt;l&gt;&gt;r&gt;&gt;z;</comment>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>p</name><operator>==</operator><call><name><name>m1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>Fun_Main</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
		<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>p1</name><operator>==</operator><call><name><name>m1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>r</name><operator>!=</operator><name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>Fun_Main</name><argument_list>(<argument><expr><name>m1</name></expr></argument>,<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<comment type="line" format="doxygen">////////</comment>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>CN</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>p</name></expr>;</init> <condition><expr><name>p</name><operator>!=</operator><name>p1</name></expr>;</condition> <incr/>)</control>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name><name>A1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<comment type="line">//cout&lt;&lt;A1[i]&lt;&lt;' ';</comment>
			}</block></for>
			<comment type="line">//cout&lt;&lt;endl;</comment>
			<comment type="line">//delete [] p-&gt;second.second.second;</comment>
			<expr_stmt><expr><call><name><name>m1</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <operator>new</operator> <name><name>int</name><index>[<expr><name>CN</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>A1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>


		<if>if<condition>(<expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>	
	}</block></while>

	<comment type="line" format="doxygen">///////</comment>

	<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name><name>m1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>p</name></expr>;</init> <condition><expr><name>p</name><operator>!=</operator><call><name><name>m1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
	<block>{
		
		<if>if<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block></then>
		<else>else
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>CN1</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>char</name>)<argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<comment type="line">//cin&gt;&gt;n;</comment>
				}</block></for>
			}</block></for>
		}</block></else></if>

	}</block></for>
	<comment type="line">//cin&gt;&gt;n;</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
