<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12058027.cpp"><comment type="line">//Language: GNU C++11</comment>



<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<comment type="line">//#include &lt;windows.h&gt;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<define>#<directive>define</directive> <macro><name>FRE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>  <value>for(i = a; i &lt;= b; i++)</value></define>
<define>#<directive>define</directive> <macro><name>FRL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>  <value>for(i = a; i &lt; b; i++)</value></define>
<define>#<directive>define</directive> <macro><name>mem</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></macro>   <value>memset ((t) , v, sizeof(t))</value></define>
<define>#<directive>define</directive> <macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>((x)*(x))</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>      <value>x.begin(),x.end()</value></define>
<define>#<directive>define</directive> <macro><name>un</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>       <value>x.erase(unique(all(x)), x.end())</value></define>
<define>#<directive>define</directive> <macro><name>sf</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></macro>       <value>scanf("%d", &amp;n)</value></define>
<define>#<directive>define</directive> <macro><name>sff</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro>    <value>scanf("%d %d", &amp;a, &amp;b)</value></define>
<define>#<directive>define</directive> <macro><name>sfff</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></macro> <value>scanf("%d %d %d", &amp;a, &amp;b, &amp;c)</value></define>
<define>#<directive>define</directive> <macro><name>D</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>        <value>cout&lt;&lt;#x " = "&lt;&lt;(x)&lt;&lt;endl</value></define>
<define>#<directive>define</directive> <macro><name>pf</name></macro>          <value>printf</value></define>
<define>#<directive>define</directive> <macro><name>VI</name></macro>          <value>vector &lt;int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pii</name></macro>         <value>pair &lt;int, int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pll</name></macro>         <value>pair &lt;LL, LL&gt;</value></define>
<define>#<directive>define</directive> <macro><name>pb</name></macro>          <value>push_back</value></define>
<define>#<directive>define</directive> <macro><name>mp</name></macro>          <value>make_pair</value></define>
<define>#<directive>define</directive> <macro><name>pi</name></macro>          <value>acos(-1.00)</value></define>
<define>#<directive>define</directive> <macro><name>DBG</name></macro>         <value>pf("Hi\n")</value></define>
<define>#<directive>define</directive> <macro><name>sz</name></macro>          <value>size()</value></define>
<define>#<directive>define</directive> <macro><name>ins</name></macro>         <value>insert</value></define>
<define>#<directive>define</directive> <macro><name>fi</name></macro>          <value>first</value></define>
<define>#<directive>define</directive> <macro><name>se</name></macro>          <value>second</value></define>
<define>#<directive>define</directive> <macro><name>xx</name></macro>          <value>first</value></define>
<define>#<directive>define</directive> <macro><name>yy</name></macro>          <value>second</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro>         <value>(1&lt;&lt;29)</value></define>
<define>#<directive>define</directive> <macro><name>hp</name></macro>          <value>(LL) 999983</value></define>
<define>#<directive>define</directive> <macro><name>MOD</name></macro>         <value>100007</value></define>
<define>#<directive>define</directive> <macro><name>eps</name></macro>         <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>MAX</name></macro>         <value>100000</value></define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<comment type="line">//int dx[] = {+0,+1,+0,-1};</comment>
<comment type="line">//int dy[] = {+1,+0,-1,+0};</comment>
<comment type="line">//int dx[] = {-1,-1,-1,+0,+0,+1,+1,+1};</comment>
<comment type="line">//int dy[] = {-1,+0,+1,-1,+1,-1,+0,+1};</comment>
<comment type="line">//bool check(LL n, int pos) {return (bool) (n &amp; ((LL)1&lt;&lt;pos));}</comment>
<comment type="line">//LL on(LL n, int pos) {return n | ((LL)1&lt;&lt;pos); }</comment>
<comment type="line">//LL off(LL n, int pos) {return n &amp; ~((LL)1&lt;&lt;pos); }</comment>

<define>#<directive>define</directive> <macro><name>scale</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro>    <value>(x-'a')</value></define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>setflag</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>tree</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>MAX</name></expr>]</index></name></decl>;</struct>

<function><type><name>void</name></type> <name>prop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tp</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>tp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <operator>(</operator><name>ed</name><operator>-</operator><name>st</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
    <return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tp</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>st</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>ed</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>tp</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <operator>(</operator><name>ed</name><operator>-</operator><name>st</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>

        <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>idx</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>l</name><operator>|</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>(</operator><name>st</name><operator>+</operator><name>ed</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>prop</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prop</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if<condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>update</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>=</operator> <name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>sum</name> <operator>+</operator> <name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>st</name> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>ed</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>sum</name></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>idx</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>l</name><operator>|</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mid</name> <init>= <expr><operator>(</operator><name>st</name><operator>+</operator><name>ed</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>prop</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>prop</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>tree</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>setflag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name>mid</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <else>else <block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>st</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>query</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ch</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ed</name></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("c:\\Users\\User\\Desktop\\in.txt", "r", stdin);</comment>
    <comment type="line">//freopen("c:\\Users\\User\\Desktop\\out.txt", "w", stdout);</comment>
    <comment type="line">//ios_base::sync_with_stdio(0); cin.tie(0);</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>cs</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>mn</name></decl>, <decl><type ref="prev"/><name>mx</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>csm</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><call><name>scale</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name><operator>--</operator></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <expr_stmt><expr><name>csm</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>k</name></expr>)</condition><then>
        <block>{
            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>csm</name></expr></argument>,<argument><expr><name>csm</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>csm</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if></block></for>
        }</block></then>

        <else>else
        <block>{
            <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">25</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>csm</name></expr></argument>,<argument><expr><name>csm</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>csm</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if></block></for>
        }</block></else></if>

        <comment type="block">/*for(i = 0; i &lt; n; i++)
        for(j = 0; j &lt;= 25; j++)
            if(query(1,j,0,n,i,i))
            {
                printf("%c", j+'a');
                break;
            }*/</comment>
    }</block></while>


    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">25</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><call><name>query</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></block></for></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
