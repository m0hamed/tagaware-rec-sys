<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12125652.cpp"><comment type="line">//Language: GNU C++11</comment>


<include>#<directive>include</directive> <file>&lt;cstdio&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstdlib&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;cstring&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive> <file>&lt;iostream&gt;</file></include>
<define>#<directive>define</directive> <macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int x=(a); x&lt;(b); x++)</value></define>
<define>#<directive>define</directive> <macro><name>RI</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>scanf("%d", &amp;a)</value></define>
<define>#<directive>define</directive> <macro><name>RD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>scanf("%lf", &amp;a)</value></define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>Node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>cov</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>lchild</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>rchild</name></decl>;</decl_stmt>
    <constructor><name>Node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_r</name></decl></parameter>, <parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>_lc</name></decl></parameter>, <parameter><decl><type><name>Node</name><modifier>*</modifier></type> <name>_rc</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>lchild</name> <operator>=</operator> <name>_lc</name></expr>;</expr_stmt> <expr_stmt><expr><name>rchild</name> <operator>=</operator> <name>_rc</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <name>_l</name></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>_r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cov</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block> <decl><modifier>*</modifier><name><name>root</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>Node</name><modifier>*</modifier></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>L</name><operator>+</operator><name>R</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>Node</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><call><name>build</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>build</name><argument_list>(<argument><expr><name>M</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>push</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>cov</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>cov</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>cov</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cov</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>cov</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>r</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>l</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>r</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>l</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cov</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>pull</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>lchild</name><operator>-&gt;</operator><name>sum</name></name> <operator>+</operator> <name><name>node</name><operator>-&gt;</operator><name>rchild</name><operator>-&gt;</operator><name>sum</name></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>R</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>r</name></name> <operator>&lt;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>l</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>r</name></name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>cov</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>v</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>r</name></name> <operator>-</operator> <name><name>node</name><operator>-&gt;</operator><name>l</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>lchild</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>rchild</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pull</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>R</name> <operator>&lt;</operator> <name><name>node</name><operator>-&gt;</operator><name>l</name></name> <operator>||</operator> <name><name>node</name><operator>-&gt;</operator><name>r</name></name> <operator>&lt;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>L</name> <operator>&lt;=</operator> <name><name>node</name><operator>-&gt;</operator><name>l</name></name> <operator>&amp;&amp;</operator> <name><name>node</name><operator>-&gt;</operator><name>r</name></name> <operator>&lt;=</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>node</name><operator>-&gt;</operator><name>sum</name></name></expr>;</return></block></then></if>
    <expr_stmt><expr><call><name>push</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>lchild</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a2</name> <init>= <expr><call><name>query</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>rchild</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pull</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>a1</name> <operator>+</operator> <name>a2</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>print_string</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal><operator>+</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    }</block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>RI</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>RI</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>build</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'a'</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>m</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>query</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><name>s</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><name>s</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for></block></then>
        <else>else
            <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">25</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><name>s</name></expr></argument>, <argument><expr><name>l</name><operator>+</operator><name>s</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for></block></else></if>
        <comment type="line">// print_string();</comment>
    }</block></while>
    <expr_stmt><expr><call><name>print_string</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
    char ch;
    int a, b;
    while(scanf(" %c %d %d", &amp;ch, &amp;a, &amp;b)) {
        printf("%d\n", query(root[ch-'a'], a, b));
    }
    */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
