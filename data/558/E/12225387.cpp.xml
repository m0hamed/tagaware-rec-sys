<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="12225387.cpp"><comment type="line">//Language: GNU C++</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sumv</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tag</name><index>[<expr><literal type="number">26</literal></expr>]</index><index>[<expr><literal type="number">4</literal><operator>*</operator><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lab</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'a'</literal><operator>+</operator><name>lab</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lab</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>ll</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>rr</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>mid</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>rr</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>ll</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>query</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>query</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lab</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>ll</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>rr</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name>r</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>mid</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>rr</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<elseif>else <if>if <condition>(<expr><name>ll</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lab</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ll</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>ll</name><operator>&lt;=</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&lt;=</operator><name>rr</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>mid</name><operator>-</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>r</name><operator>-</operator><name>mid</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tag</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if>
	<if>if <condition>(<expr><name>rr</name><operator>&lt;=</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<elseif>else <if>if <condition>(<expr><name>ll</name><operator>&gt;</operator><name>mid</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><name>lab</name></expr></argument>,<argument><expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<expr_stmt><expr><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>sumv</name><index>[<expr><name>lab</name></expr>]</index><index>[<expr><operator>(</operator><name>root</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen("558E.in","r",stdin);</comment>
	<comment type="line">//freopen("558E.out","w",stdout);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>q</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ll</name></decl>,<decl><type ref="prev"/><name>rr</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ll</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rr</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>query</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><name>rr</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>p</name><operator>-=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><name>ll</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name><operator>+</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>p</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">26</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><call><name>query</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
