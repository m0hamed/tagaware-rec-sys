<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit   revision="0.9.5" language="C++" filename="11853291.cpp"><comment type="line">//Language: GNU C++</comment>


<comment type="line">//BISMILLAHIR RAHMANIR RAHIM</comment>


<include>#<directive>include</directive><file>&lt;stdio.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;bits/stdc++.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;string.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stdlib.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;math.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;algorithm&gt;</file></include>
<include>#<directive>include</directive><file>&lt;queue&gt;</file></include>
<include>#<directive>include</directive><file>&lt;stack&gt;</file></include>
<include>#<directive>include</directive><file>&lt;time.h&gt;</file></include>
<include>#<directive>include</directive><file>&lt;map&gt;</file></include>
<include>#<directive>include</directive><file>&lt;iostream&gt;</file></include>
<include>#<directive>include</directive><file>&lt;vector&gt;</file></include>
<define>#<directive>define</directive> <macro><name>pii</name></macro> <value>pair&lt;int,int&gt;</value></define>
<define>#<directive>define</directive> <macro><name>CLR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,0,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>SET</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,-1,sizeof(a))</value></define>
<define>#<directive>define</directive> <macro><name>SETINF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>memset(a,126,sizeof a)</value></define>
<define>#<directive>define</directive> <macro><name>LLI</name></macro> <value>long long int</value></define>
<define>#<directive>define</directive> <macro><name>ULL</name></macro> <value>unsigned long long</value></define>
<define>#<directive>define</directive> <macro><name>PI</name></macro> <value>acos(-1.0)</value></define>
<define>#<directive>define</directive> <macro><name>EPS</name></macro> <value>1e-9</value></define>
<define>#<directive>define</directive> <macro><name>inf</name></macro> <value>1&lt;&lt;30</value></define>
<define>#<directive>define</directive> <macro><name>f</name></macro> <value>first</value></define>
<define>#<directive>define</directive> <macro><name>s</name></macro> <value>second</value></define>
<define>#<directive>define</directive> <macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.begin(),a.end()</value></define>
<define>#<directive>define</directive> <macro><name>rall</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></macro> <value>a.rbegin(),a.rend()</value></define>
<define>#<directive>define</directive> <macro><name>countbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></macro> <value>__builtin_popcount(x)</value></define>
<define>#<directive>define</directive> <macro><name>lpi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>lpd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&gt;b;i--)</value></define>
<define>#<directive>define</directive> <macro><name>repi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&lt;=b;i++)</value></define>
<define>#<directive>define</directive> <macro><name>repd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></macro> <value>for(int i=a;i&gt;=b;i--)</value></define>

<comment type="line">//#define MAX(a) (*max_element(all(a)))</comment>
<comment type="line">//#define MIN(a) (*min_element(all(a)))</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>sq</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name> <operator>*</operator> <name>a</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>X</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>_pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>X</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>T</name></type> <name>z</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <macro><name>repi</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>y</argument>)</argument_list></macro><block>{<expr_stmt><expr><name>z</name><operator>*=</operator><name>a</name></expr>;</expr_stmt>}</block> <return>return <expr><name>z</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<while>while<condition>(<expr><name>b</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>b</name> <operator>^=</operator> <name>a</name> <operator>^=</operator> <name>b</name> <operator>^=</operator> <name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt></block></while><return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>(</operator><name>a</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><name>b</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>extended</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name>T</name></type> <name>g</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt> <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>g</name><operator>=</operator><name>a</name></expr>;</expr_stmt> <return>return <expr><name>g</name></expr>;</return>}</block></then></if> <expr_stmt><expr><name>g</name><operator>=</operator><call><name>extended</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>x</name><operator>=</operator><name>y1</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>=</operator><name>x1</name><operator>-</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>y1</name></expr>;</expr_stmt> <return>return <expr><name>g</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>X</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>getbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>X</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <return>return <expr><operator>(</operator><operator>(</operator><name>a</name><operator>&amp;</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>X</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>setbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>X</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><return>return <expr><operator>(</operator><name>a</name><operator>|</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>X</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>resetbit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>X</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><return>return <expr><operator>(</operator><name>a</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>X</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>togglebit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>X</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><return>return <expr><operator>(</operator><name>a</name><operator>^</operator><operator>(</operator><name>t</name><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</return> }</block></function>

<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name></type> <name>X</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>bigmod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>X</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ULL</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>a</name> <init>= <expr><name>n</name><operator>%</operator><name>mod</name></expr></init></decl> ;</decl_stmt> <while>while<condition>(<expr><name>m</name></expr>)</condition><block>{ <if>if<condition>(<expr><name>m</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><operator>(</operator><name>ret</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>m</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> }</block></while><expr_stmt><expr><name>ret</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt><return>return <expr><operator>(</operator><name>T</name><operator>)</operator><name>ret</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>modinv</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>bigmod</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt; <parameter><type><name>class</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>_gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>_abs</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>b</name><operator>=</operator><call><name>_abs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if> <return>return <expr><call><name>_gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<comment type="line" format="doxygen">///-----------------//-----------------//</comment>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
     <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">//    freopen("output.txt","w",stdout);</comment>
     <comment type="line">//    freopen("input.txt","r",stdin);</comment>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>mini</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>maxi</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LLI</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>mini</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>maxi</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tot</name><operator>+=</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>maxi</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

<if>if<condition>(<expr><name>tot</name><operator>==</operator><name>n</name></expr>)</condition><then>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></then>
<else>else
<block>{<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>tot</name><operator>!=</operator><name>n</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>t</name></expr>]</index></name><operator>&gt;</operator><name><name>mini</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>t</name></expr>]</index></name><operator>--</operator></expr><operator>,</operator><expr><name>tot</name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>







<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
